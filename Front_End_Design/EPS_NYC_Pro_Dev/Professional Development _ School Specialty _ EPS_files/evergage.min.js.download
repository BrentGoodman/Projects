window.evergageBeaconParseTimeStart = (new Date().getTime());
'use strict';var Evergage=function(n){function A(d){A="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(c){return typeof c}:function(c){return c&&"function"===typeof Symbol&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":typeof c};return A(d)}function Ka(d,c){if(!(d instanceof c))throw new TypeError("Cannot call a class as a function");}function lc(d,c){for(var f=0;f<c.length;f++){var a=c[f];a.enumerable=a.enumerable||!1;a.configurable=!0;"value"in a&&(a.writable=!0);Object.defineProperty(d,
a.key,a)}}function La(d,c,f){c&&lc(d.prototype,c);f&&lc(d,f);return d}function L(d,c,f){c in d?Object.defineProperty(d,c,{value:f,enumerable:!0,configurable:!0,writable:!0}):d[c]=f;return d}function mc(d,c){var f=Object.keys(d);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(d);c&&(a=a.filter(function(a){return Object.getOwnPropertyDescriptor(d,a).enumerable}));f.push.apply(f,a)}return f}function y(d){for(var c=1;c<arguments.length;c++){var f=null!=arguments[c]?arguments[c]:{};
c%2?mc(f,!0).forEach(function(a){L(d,a,f[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(d,Object.getOwnPropertyDescriptors(f)):mc(f).forEach(function(a){Object.defineProperty(d,a,Object.getOwnPropertyDescriptor(f,a))})}return d}function je(d,c){if("function"!==typeof c&&null!==c)throw new TypeError("Super expression must either be null or a function");d.prototype=Object.create(c&&c.prototype,{constructor:{value:d,writable:!0,configurable:!0}});c&&gb(d,c)}function ta(d){ta=Object.setPrototypeOf?
Object.getPrototypeOf:function(c){return c.__proto__||Object.getPrototypeOf(c)};return ta(d)}function gb(d,c){gb=Object.setPrototypeOf||function(c,a){c.__proto__=a;return c};return gb(d,c)}function ua(d,c){if(null==d)return{};if(null==d)var f={};else{f={};var a=Object.keys(d),b;for(b=0;b<a.length;b++){var e=a[b];0<=c.indexOf(e)||(f[e]=d[e])}}if(Object.getOwnPropertySymbols)for(b=Object.getOwnPropertySymbols(d),e=0;e<b.length;e++)a=b[e],0<=c.indexOf(a)||Object.prototype.propertyIsEnumerable.call(d,
a)&&(f[a]=d[a]);return f}function hb(d,c,f){hb="undefined"!==typeof Reflect&&Reflect.get?Reflect.get:function(a,b,c){for(;!Object.prototype.hasOwnProperty.call(a,b)&&(a=ta(a),null!==a););if(a)return b=Object.getOwnPropertyDescriptor(a,b),b.get?b.get.call(c):b.value};return hb(d,c,f||d)}function va(d,c){var f=Array.isArray(d)?d:void 0;if(!f){f=[];var a=!0,b=!1,e=void 0;try{for(var g=d[Symbol.iterator](),h;!(a=(h=g.next()).done)&&(f.push(h.value),!c||f.length!==c);a=!0);}catch(m){b=!0,e=m}finally{try{if(!a&&
null!=g["return"])g["return"]()}finally{if(b)throw e;}}}if(!(d=f))throw new TypeError("Invalid attempt to destructure non-iterable instance");return d}function ib(d){if(Array.isArray(d)){var c=0;for(var f=Array(d.length);c<d.length;c++)f[c]=d[c];c=f}else c=void 0;c||(c=Symbol.iterator in Object(d)||"[object Arguments]"===Object.prototype.toString.call(d)?Array.from(d):void 0);if(!(d=c))throw new TypeError("Invalid attempt to spread non-iterable instance");return d}function jb(d){var c=1<arguments.length&&
void 0!==arguments[1]?arguments[1]:R;return c&&9===c.nodeType||c&&1===c.nodeType?ke.test(d)?c.getElementsByClassName(d.slice(1)):le.test(d)?c.getElementsByTagName(d):c.querySelectorAll(d):[]}function wa(d){return d.replace(me,function(c,d){return d.toUpperCase()})}function C(d,c,f){if(f)for(f=d.length;f--&&!1!==c.call(d[f],f,d[f]););else{f=0;for(var a=d.length;f<a&&!1!==c.call(d[f],f,d[f]);f++);}return d}function kb(d,c){var f=d&&(d.matches||d.webkitMatchesSelector||d.msMatchesSelector);return!!f&&
f.call(d,c)}function lb(d){return!!d&&d===d.window}function fa(d){return"function"===typeof d}function F(d){return"string"===typeof d}function nc(d){return!isNaN(parseFloat(d))&&isFinite(d)}function mb(d){return F(d)?function(c,f){return kb(f,d)}:fa(d)?d:d instanceof Ma?function(c,f){return d.is(f)}:d?function(c,f){return f===d}:function(){return!1}}function ma(d,c){return c?d.filter(c):d}function Na(d){return F(d)?d.match(ne)||[]:[]}function U(d,c,f){for(var a=[],b=fa(c),e=0,g=d.length;e<g;e++)if(b){var h=
c(d[e]);h.length&&oe.apply(a,h)}else for(h=d[e][c];null!=h;)a.push(h),h=f?h[c]:null;return a}function S(d){return 1<d.length?nb.call(d,function(c,d,a){return oc.call(a,c)===d}):d}function ha(d,c,f){if(d&&1===d.nodeType&&c)return d=xa.getComputedStyle(d,null),c?f?d.getPropertyValue(c)||void 0:d[c]:d}function na(d,c){return parseInt(ha(d,c),10)||0}function pc(d){if(1<arguments.length&&void 0!==arguments[1]?arguments[1]:ob.test(d))return d;if(!pb[d]){var c=wa(d),f="".concat(c[0].toUpperCase()).concat(c.slice(1));
c="".concat(c," ").concat(pe.join("".concat(f," "))).concat(f).split(" ");C(c,function(a,b){if(b in qe)return pb[d]=b,!1})}return pb[d]}function qc(d,c){return(2<arguments.length&&void 0!==arguments[2]?arguments[2]:ob.test(d))||re[d]||!nc(c)?c:"".concat(c,"px")}function rc(d,c){d=d.dataset[c]||d.dataset[wa(c)];try{return JSON.parse(d)}catch(f){}return d}function sc(d,c){return na(d,"border".concat(c?"Left":"Top","Width"))+na(d,"padding".concat(c?"Left":"Top"))+na(d,"padding".concat(c?"Right":"Bottom"))+
na(d,"border".concat(c?"Right":"Bottom","Width"))}function tc(d,c){return!c||!qb.call(c,function(c){return 0>d.indexOf(c)})}function se(d,c,f,a,b){b.guid=b.guid||p.guid++;var e=d.___ce=d.___ce||{};e[c]=e[c]||[];e[c].push([f,a,b]);d.addEventListener(c,b)}function rb(d){d=d.split(".");return[d[0],d.slice(1).sort()]}function Oa(d,c,f,a,b){var e=d.___ce=d.___ce||{};if(c)e[c]&&(e[c]=e[c].filter(function(e){var g=va(e,3);e=g[0];var m=g[1];g=g[2];if(b&&g.guid!==b.guid||!tc(e,f)||a&&a!==m)return!0;d.removeEventListener(c,
g)}));else for(c in e)Oa(d,c,f,a,b)}function uc(d){return d.multiple&&d.options?U(nb.call(d.options,function(c){return c.selected&&!c.disabled&&!c.parentNode.disabled}),"value"):d.value||""}function vc(d){if(!F(d))return[];if(te.test(d))return[ia(RegExp.$1)];var c=ue.test(d)&&RegExp.$1;c=wc[c]||wc["*"];c.innerHTML=d;return p(c.childNodes).detach().get()}function ve(d,c){d=p(d);d.filter("script").add(d.find("script")).each(function(d,a){if(we.test(a.type)&&sb.contains(a)){var b=ia("script");b.text=
a.textContent.replace(xe,"");C(ye,function(c,d){a[d]&&(b[d]=a[d])});c.head.insertBefore(b,null);c.head.removeChild(b)}})}function aa(d,c,f,a,b,e,g,h){C(d,function(d,e){C(p(e),function(d,e){C(p(c),function(c,d){var g=f?d:e;d=f?e:d;c=c?g.cloneNode(!0):g;b?d.insertBefore(c,a?d.firstElementChild:null):d.parentNode.insertBefore(c,a?d:d.nextElementSibling);ve(c,d.ownerDocument)},h)},g)},e);return c}function J(d){J="function"===typeof Symbol&&"symbol"===A(Symbol.iterator)?function(c){return A(c)}:function(c){return c&&
"function"===typeof Symbol&&c.constructor===Symbol&&c!==Symbol.prototype?"symbol":A(c)};return J(d)}function Pa(d,c){if(!(d instanceof c))throw new TypeError("Cannot call a class as a function");}function yc(d,c){for(var f=0;f<c.length;f++){var a=c[f];a.enumerable=a.enumerable||!1;a.configurable=!0;"value"in a&&(a.writable=!0);Object.defineProperty(d,a.key,a)}}function zc(d,c,f){c&&yc(d.prototype,c);f&&yc(d,f);return d}function Qa(d,c,f){c in d?Object.defineProperty(d,c,{value:f,enumerable:!0,configurable:!0,
writable:!0}):d[c]=f;return d}function Ac(d,c){var f=Object.keys(d);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(d);c&&(a=a.filter(function(a){return Object.getOwnPropertyDescriptor(d,a).enumerable}));f.push.apply(f,a)}return f}function G(d){for(var c=1;c<arguments.length;c++){var f=null!=arguments[c]?arguments[c]:{};c%2?Ac(f,!0).forEach(function(a){Qa(d,a,f[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(d,Object.getOwnPropertyDescriptors(f)):Ac(f).forEach(function(a){Object.defineProperty(d,
a,Object.getOwnPropertyDescriptor(f,a))})}return d}function Bc(d){if(Array.isArray(d)){var c=0;for(var f=Array(d.length);c<d.length;c++)f[c]=d[c];c=f}else c=void 0;c||(c=Symbol.iterator in Object(d)||"[object Arguments]"===Object.prototype.toString.call(d)?Array.from(d):void 0);if(!(d=c))throw new TypeError("Invalid attempt to spread non-iterable instance");return d}function Cc(d){r.setLoggingLevel(d)}function Dc(){return r.getLoggingLevel()}function tb(d){var c,f,a,b=[],e=[f=1732584193,a=4023233417,
~f,~a,3285377520],g=[],h=unescape(encodeURI(d))+"\u0080",m=h.length;for(g[d=--m/4+2|15]=8*m;~m;)g[m>>2]|=h.charCodeAt(m)<<8*~m--;for(c=m=0;c<d;c+=16){for(f=e;80>m;f=[f[4]+(b[m]=16>m?~~g[c+m]:2*h|0>h)+1518500249+[a&z|~a&ba,h=341275144+(a^z^ba),882459459+(a&z|a&ba|z&ba),h+1535694389][m++/5>>2]+((h=f[0])<<5|h>>>27),h,a<<30|a>>>2,z,ba]){h=b[m-3]^b[m-8]^b[m-14]^b[m-16];a=f[1];var z=f[2];var ba=f[3]}for(m=5;m;)e[--m]+=f[m]}for(h="";40>m;)h+=(e[m>>3]>>4*(7-m++)&15).toString(16);return h}function Ec(){var d=
(window.navigator.userAgent||"")+(window.navigator.platform||"")+(new Date).getTime+JSON.stringify({})+Math.random();return ya(d).slice(0,16)}function Fc(d,c,f){return"function"===typeof f?{bind:d,selector:c,callback:f}:null}function Ae(){ub=u.onFireException.on(function(d,c){document.dispatchEvent(new CustomEvent(v.OnException,{detail:{error:d,context:c}}))});vb=u.onEventSend.on(function(d){document.dispatchEvent(new CustomEvent(v.OnBeforeEventSend,{detail:{actionEvent:d},cancelable:!0}))&&document.dispatchEvent(new CustomEvent(v.OnEventSend,
{detail:{actionEvent:d}}))});wb=u.onPageMatchStatusUpdated.on(function(d){document.dispatchEvent(new CustomEvent(v.OnPageMatchStatusUpdated,{detail:{matchStatus:d}}))});xb=u.onInitSitemap.on(function(d){document.dispatchEvent(new CustomEvent(v.OnInitSitemap,{detail:{sitemapConfig:d}}))})}function V(d){ub&&ub();vb&&vb();wb&&wb();xb&&xb();document.dispatchEvent(new CustomEvent(v.OnShutDown,{detail:{message:d}}));yb="shutDown";return!1}function Ra(d,c,f,a){return d.addEventListener?(d.addEventListener(c,
f,a),!0):!1}function ca(d,c,f,a){return d.removeEventListener?(d.removeEventListener(c,f,a),!0):!1}function zb(d){var c=document.createElement("a");c.href=d;return c}function Gc(d){try{return decodeURIComponent(d.replace(/\+/g," "))}catch(c){return null}}function Hc(d){if(d=d.detail&&d.detail.actionEvent)if(d.itemAction&&d.itemAction.includes("View"))Sa();else{var c;if(c=d.interaction)d=d.interaction.name,c=d===ja.ViewCatalogObject||d===ja.ViewCatalogObjectDetail||d===ja.QuickViewCatalogObject||d===
za.StopQuickViewCatalogObject;c&&Sa()}}function Ab(d){-1!==W&&(Bb(!1,d),clearTimeout(W),W=-1)}function Sa(){if(!q.beaconConfig.doNotTrackPingRequestsForActions){Ab(!0);document.removeEventListener(n.CustomEvents.OnEventSend,Hc);document.addEventListener(n.CustomEvents.OnEventSend,Hc);var d=Date.now();if(-1===H||d-H>=q.beaconConfig.minimumActivityTimeToRegister)H=d;W=setTimeout(function(){Bb(!0)},q.beaconConfig.timeOnPageTimerLengthMillis);r.info("Setting up time on page listeners.");ca(window,"unload",
Cb);Ra(window,"unload",Cb);ca(window,"blur",Db);Ra(window,"blur",Db);ca(window,"focus",Eb);Ra(window,"focus",Eb);ca(document,"mousemove keydown scroll click",Aa);Ra(document,"mousemove keydown scroll click",Aa)}}function Bb(d,c){var f=Date.now();-1!==H&&(f-=H,q.beaconConfig.timeOnPageTimerLengthMillis<f?Ta():(r.trace("Evergage: timeOnPage before: sendActivityPingRequest: ".concat(D)),D+=f,r.trace("Evergage: timeOnPage after: sendActivityPingRequest: ".concat(D)),-1!==X&&clearTimeout(X),X=setTimeout(Ta,
q.beaconConfig.timeOnPageTimerLengthMillis-f)));if(0<D){D=Math.min(D,q.beaconConfig.timeOnPageTimerLengthMillis);if(!0!==c||2E3<=D)c=Be(D),Ce(c),Ic(c);D=0}0>D&&(D=0);d&&(-1!==W&&clearTimeout(W),W=setTimeout(function(){Bb(!0)},q.beaconConfig.timeOnPageTimerLengthMillis))}function Be(d){d={timeOnPageMillis:d};var c=Jc(),f={};if(c&&c.itemAction&&c.catalog)f=c.catalog;else if(c&&c.interaction&&c.interaction.catalogObject){f=c.interaction.catalogObject;var a={},b=f.id,e=f.type,g=ua(f,["id","type"]);b&&
e&&(a[f.type]={_id:b});f.relatedCatalogObjects&&(e=g.relatedCatalogObjects,b=e.Category,e=ua(e,["Category"]),Array.isArray(b)&&(a[f.type].categories=Kc(b)),0!==Object.keys(e).length&&(a[f.type].relatedCatalogObjects=e));f=a}0!==Object.keys(f).length&&(d.catalog=f);c&&c.interaction&&null!=c.interaction.name?d.action=c.interaction.name:c&&null!=c.action&&(d.action=c.action);Lc();d.performance={};c=ua(x,["sdkLoadTime","sdkParseTime"]);for(var h in c)x[h]&&(d.performance[h]=x[h]);return d}function Cb(d){Ab()}
function Db(d){try{r.trace("Evergage: window blurred"),Ta()}catch(c){w(c,"windowBlurFunction")}}function Eb(d){try{r.trace("Evergage: window focused"),Aa()}catch(c){w(c,"windowFocusFunction")}}function Ta(){try{-1!==X&&(clearTimeout(X),X=-1);var d=Date.now(),c=0;-1!==H&&(c=d-H);r.trace("Evergage: timeOnPage before: setUserInactive: ".concat(D));D+=c;r.trace("Evergage: timeOnPage after: setUserInactive: ".concat(D));H=-1}catch(f){w(f,"setUserInactive")}}function Aa(){r.trace("activity registered");
try{-1!==X&&(clearTimeout(X),X=-1);var d=Date.now();if(-1===H||d-H>=q.beaconConfig.minimumActivityTimeToRegister)-1!==H&&(r.trace("Evergage: timeOnPage before: activityRegistered: ".concat(D)),D+=d-Math.max(H,-1),r.trace("Evergage: timeOnPage after: activityRegistered: ".concat(D))),H=d}catch(c){w(c,"activityRegistered")}}function Fb(d,c){d="string"===typeof d?Error(d):d;for(var f in c)Object.defineProperty(d,f,{value:c[f],enumerable:!1});return d}var M=function(d,c){return c={exports:{}},d(c,c.exports),
c.exports}(function(d,c){d.exports=function(){function c(){for(var a=0,c={};a<arguments.length;a++){var d=arguments[a],f;for(f in d)c[f]=d[f]}return c}function a(b){function d(){}function f(a,e,f){if("undefined"!==typeof document){f=c({path:"/"},d.defaults,f);"number"===typeof f.expires&&(f.expires=new Date(1*new Date+864E5*f.expires));f.expires=f.expires?f.expires.toUTCString():"";try{var g=JSON.stringify(e);/^[\{\[]/.test(g)&&(e=g)}catch(xc){}e=b.write?b.write(e,a):encodeURIComponent(String(e)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
decodeURIComponent);a=encodeURIComponent(String(a)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);g="";for(var h in f)f[h]&&(g+="; "+h,!0!==f[h]&&(g+="="+f[h].split(";")[0]));return document.cookie=a+"="+e+g}}function h(a,c){if("undefined"!==typeof document){for(var d={},e=document.cookie?document.cookie.split("; "):[],f=0;f<e.length;f++){var g=e[f].split("="),h=g.slice(1).join("=");c||'"'!==h.charAt(0)||(h=h.slice(1,-1));try{var m=g[0].replace(/(%[0-9A-Z]{2})+/g,
decodeURIComponent);h=(b.read||b)(h,m)||h.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent);if(c)try{h=JSON.parse(h)}catch(De){}d[m]=h;if(a===m)break}catch(De){}}return a?d[a]:d}}d.set=f;d.get=function(a){return h(a,!1)};d.getJSON=function(a){return h(a,!0)};d.remove=function(a,b){f(a,"",c(b,{expires:-1}))};d.defaults={};d.withConverter=a;return d}return a(function(){})}()}),R=document,xa=window,sb=R.documentElement,ia=R.createElement.bind(R),Mc=ia("div"),Gb=ia("table"),Ee=ia("tbody"),Nc=ia("tr"),Hb=
Array.isArray,da=Array.prototype,nb=da.filter,oc=da.indexOf,Fe=da.map,oe=da.push,Oc=da.slice,qb=da.some,Ge=da.splice,He=/^#[\w-]*$/,ke=/^\.[\w-]*$/,Ie=/<.+>/,le=/^\w+$/,Ma=function(){function d(c){var f=1<arguments.length&&void 0!==arguments[1]?arguments[1]:R;Ka(this,d);if(c){if(c instanceof Ma)return c;var a=c;if(F(c)){if(a=f instanceof Ma?f[0]:f,a=He.test(c)?a.getElementById(c.slice(1)):Ie.test(c)?vc(c):jb(c,a),!a)return}else if(fa(c))return this.ready(c);if(a.nodeType||a===xa)a=[a];this.length=
a.length;f=0;for(var b=this.length;f<b;f++)this[f]=a[f]}}La(d,[{key:"init",value:function(c,f){return new d(c,f)}}]);return d}(),l=Ma.prototype,p=l.init;p.fn=p.prototype=l;l.length=0;l.splice=Ge;"function"===typeof Symbol&&(l[Symbol.iterator]=da[Symbol.iterator]);l.map=function(d){return p(Fe.call(this,function(c,f){return d.call(c,f,c)}))};l.slice=function(d,c){return p(Oc.call(this,d,c))};var me=/-([a-z])/g;p.camelCase=wa;p.each=C;l.each=function(d){return C(this,d)};l.removeProp=function(d){return this.each(function(c,
f){delete f[d]})};p.extend=function(d){for(var c=arguments.length,f=Array(1<c?c-1:0),a=1;a<c;a++)f[a-1]=arguments[a];c=arguments.length;for(f=2>c?0:1;f<c;f++)for(var b in arguments[f])d[b]=arguments[f][b];return d};l.extend=function(d){return p.extend(l,d)};p.guid=1;p.matches=kb;p.isWindow=lb;p.isFunction=fa;p.isString=F;p.isNumeric=nc;p.isArray=Hb;l.prop=function(d,c){if(d){if(F(d))return 2>arguments.length?this[0]&&this[0][d]:this.each(function(a,b){b[d]=c});for(var f in d)this.prop(f,d[f]);return this}};
l.get=function(d){return void 0===d?Oc.call(this):this[0>d?d+this.length:d]};l.eq=function(d){return p(this.get(d))};l.first=function(){return this.eq(0)};l.last=function(){return this.eq(-1)};l.filter=function(d){var c=mb(d);return p(nb.call(this,function(d,a){return c.call(d,a,d)}))};var ne=/\S+/g;l.hasClass=function(d){return!!d&&qb.call(this,function(c){return c.classList.contains(d)})};l.removeAttr=function(d){var c=Na(d);return this.each(function(d,a){C(c,function(b,c){a.removeAttribute(c)})})};
l.attr=function(d,c){if(d){if(F(d)){if(2>arguments.length){if(!this[0])return;var f=this[0].getAttribute(d);return null===f?void 0:f}return void 0===c?this:null===c?this.removeAttr(d):this.each(function(a,b){b.setAttribute(d,c)})}for(f in d)this.attr(f,d[f]);return this}};l.toggleClass=function(d,c){var f=Na(d),a=void 0!==c;return this.each(function(b,d){C(f,function(b,e){a?c?d.classList.add(e):d.classList.remove(e):d.classList.toggle(e)})})};l.addClass=function(d){return this.toggleClass(d,!0)};
l.removeClass=function(d){return arguments.length?this.toggleClass(d,!1):this.attr("class","")};p.unique=S;l.add=function(d,c){return p(S(this.get().concat(p(d,c).get())))};var ob=/^--/,pb={},qe=Mc.style,pe=["webkit","moz","ms"];p.prefixedProp=pc;var re={animationIterationCount:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0};l.css=function(d,c){if(F(d)){var f=ob.test(d);d=pc(d,f);if(2>arguments.length)return this[0]&&ha(this[0],
d,f);if(!d)return this;c=qc(d,c,f);return this.each(function(a,e){e&&1===e.nodeType&&(f?e.style.setProperty(d,c):e.style[d]=c)})}for(var a in d)this.css(a,d[a]);return this};l.data=function(d,c){if(!d){if(!this[0])return;var f={},a;for(a in this[0].dataset)f[a]=rc(this[0],a);return f}if(F(d))return 2>arguments.length?this[0]&&rc(this[0],d):this.each(function(a,e){a=c;try{a=JSON.stringify(a)}catch(g){}e.dataset[wa(d)]=a});for(f in d)this.data(f,d[f]);return this};C([!0,!1],function(d,c){C(["Width",
"Height"],function(d,a){var b="".concat(c?"outer":"inner").concat(a);l[b]=function(e){if(this[0])return lb(this[0])?xa[b]:this[0]["".concat(c?"offset":"client").concat(a)]+(e&&c?na(this[0],"margin".concat(d?"Top":"Left"))+na(this[0],"margin".concat(d?"Bottom":"Right")):0)}})});C(["width","height"],function(d,c){l[c]=function(f){if(!this[0])return void 0===f?void 0:this;if(!arguments.length)return lb(this[0])?this[0][wa("outer-".concat(c))]:this[0].getBoundingClientRect()[c]-sc(this[0],!d);var a=parseInt(f,
10);return this.each(function(b,e){e&&1===e.nodeType&&(b=ha(e,"boxSizing"),e.style[c]=qc(c,a+("border-box"===b?sc(e,!d):0)))})}});var Ib={};l.toggle=function(d){return this.each(function(c,f){if(void 0===d?"none"===ha(f,"display"):d){if(f.style.display=f.___cd||"","none"===ha(f,"display")){c=f.style;f=f.tagName;if(Ib[f])f=Ib[f];else{var a=ia(f);R.body.insertBefore(a,null);var b=ha(a,"display");R.body.removeChild(a);f=Ib[f]="none"!==b?b:"block"}c.display=f}}else f.___cd=ha(f,"display"),f.style.display=
"none"})};l.hide=function(){return this.toggle(!1)};l.show=function(){return this.toggle(!0)};var Jb={focus:"focusin",blur:"focusout"},Pc={mouseenter:"mouseover",mouseleave:"mouseout"},Je=/^(mouse|pointer|contextmenu|drag|drop|click|dblclick)/i;l.off=function(d,c,f){var a=this;if(void 0===d)this.each(function(a,b){Oa(b)});else if(F(d))fa(c)&&(f=c,c=""),C(Na(d),function(b,d){b=rb(Pc[d]||Jb[d]||d);b=va(b,2);var e=b[0],g=b[1];a.each(function(a,b){Oa(b,e,g,c,f)})});else for(var b in d)this.off(b,d[b]);
return this};l.on=function(d,c,f,a){var b=this;if(!F(d)){for(var e in d)this.on(e,c,d[e]);return this}fa(c)&&(f=c,c="");C(Na(d),function(d,e){d=rb(Pc[e]||Jb[e]||e);d=va(d,2);var g=d[0],h=d[1];b.each(function(b,d){b=function ze(b){if(!b.namespace||tc(h,b.namespace.split("."))){var e=d;if(c){for(var m=b.target;!kb(m,c);){if(m===d)return;m=m.parentNode;if(!m)return}e=m;b.___cd=!0}b.___cd&&Object.defineProperty(b,"currentTarget",{configurable:!0,get:function(){return e}});m=f.call(e,b,b.data);a&&Oa(d,
g,h,c,ze);!1===m&&(b.preventDefault(),b.stopPropagation())}};b.guid=f.guid=f.guid||p.guid++;se(d,g,h,c,b)})});return this};l.one=function(d,c,f){return this.on(d,c,f,!0)};l.ready=function(d){"loading"!==R.readyState?d(p):R.addEventListener("DOMContentLoaded",function(){d(p)});return this};l.trigger=function(d,c){if(F(d)){var f=rb(d),a=va(f,2);f=a[0];a=a[1];var b=Je.test(f)?"MouseEvents":"HTMLEvents";d=R.createEvent(b);d.initEvent(f,!0,!0);d.namespace=a.join(".")}d.data=c;var e=d.type in Jb;return this.each(function(a,
b){if(e&&fa(b[d.type]))b[d.type]();else b.dispatchEvent(d)})};var Ke=/%20/g,Le=/file|reset|submit|button|image/i,Me=/radio|checkbox/i;l.serialize=function(){var d="";this.each(function(c,f){C(f.elements||[f],function(a,b){b.disabled||!b.name||"FIELDSET"===b.tagName||Le.test(b.type)||Me.test(b.type)&&!b.checked||(a=uc(b),void 0!==a&&(a=Hb(a)?a:[a],C(a,function(a,c){a=d;c="&".concat(encodeURIComponent(b.name),"=").concat(encodeURIComponent(c).replace(Ke,"+"));d=a+c})))})});return d.slice(1)};l.val=
function(d){return void 0===d?this[0]&&uc(this[0]):this.each(function(c,f){if("SELECT"===f.tagName){var a=Hb(d)?d:null===d?[]:[d];C(f.options,function(b,c){c.selected=0<=a.indexOf(c.value)})}else f.value=null===d?"":d})};l.clone=function(){return this.map(function(d,c){return c.cloneNode(!0)})};l.detach=function(){return this.each(function(d,c){c.parentNode&&c.parentNode.removeChild(c)})};var ue=/^\s*<(\w+)[^>]*>/,te=/^\s*<(\w+)\s*\/?>(?:<\/\1>)?\s*$/,wc={"*":Mc,tr:Ee,td:Nc,th:Nc,thead:Gb,tbody:Gb,
tfoot:Gb};p.parseHTML=vc;l.empty=function(){return this.each(function(d,c){for(;c.firstChild;)c.removeChild(c.firstChild)})};l.html=function(d){return void 0===d?this[0]&&this[0].innerHTML:this.each(function(c,f){f.innerHTML=d})};l.remove=function(){return this.detach().off()};l.text=function(d){return void 0===d?this[0]?this[0].textContent:"":this.each(function(c,f){f.textContent=d})};l.unwrap=function(){this.parent().each(function(d,c){d=p(c);d.replaceWith(d.children())});return this};l.offset=
function(){var d=this[0];if(d)return d=d.getBoundingClientRect(),{top:d.top+xa.pageYOffset-sb.clientTop,left:d.left+xa.pageXOffset-sb.clientLeft}};l.offsetParent=function(){return p(this[0]&&this[0].offsetParent)};l.position=function(){var d=this[0];if(d)return{left:d.offsetLeft,top:d.offsetTop}};l.children=function(d){return ma(p(S(U(this,function(c){return c.children}))),d)};l.contents=function(){return p(S(U(this,function(d){return"IFRAME"===d.tagName?[d.contentDocument]:d.childNodes})))};l.find=
function(d){return p(S(U(this,function(c){return jb(d,c)})))};var xe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,we=/^$|^module$|\/(java|ecma)script/i,ye=["type","src","nonce","noModule"];l.after=function(){return aa(arguments,this,!1,!1,!1,!0,!0)};l.append=function(){return aa(arguments,this,!1,!1,!0)};l.appendTo=function(d){return aa(arguments,this,!0,!1,!0)};l.before=function(){return aa(arguments,this,!1,!0)};l.insertAfter=function(d){return aa(arguments,this,!0,!1,!1,!1,!1,!0)};l.insertBefore=
function(d){return aa(arguments,this,!0,!0)};l.prepend=function(){return aa(arguments,this,!1,!0,!0,!0,!0)};l.prependTo=function(d){return aa(arguments,this,!0,!0,!0,!1,!1,!0)};l.replaceWith=function(d){return this.before(d).remove()};l.replaceAll=function(d){p(d).replaceWith(this);return this};l.wrapAll=function(d){d=p(d);for(var c=d[0];c.children.length;)c=c.firstElementChild;this.first().before(d);return this.appendTo(c)};l.wrap=function(d){return this.each(function(c,f){var a=p(d)[0];p(f).wrapAll(c?
a.cloneNode(!0):a)})};l.wrapInner=function(d){return this.each(function(c,f){c=p(f);f=c.contents();f.length?f.wrapAll(d):c.append(d)})};l.has=function(d){var c=F(d)?function(c,a){return jb(d,a).length}:function(c,a){return a.contains(d)};return this.filter(c)};l.is=function(d){var c=mb(d);return qb.call(this,function(d,a){return c.call(d,a,d)})};l.next=function(d,c){return ma(p(S(U(this,"nextElementSibling",c))),d)};l.nextAll=function(d){return this.next(d,!0)};l.not=function(d){var c=mb(d);return this.filter(function(d,
a){return!c.call(a,d,a)})};l.parent=function(d){return ma(p(S(U(this,"parentNode"))),d)};l.index=function(d){var c=d?p(d)[0]:this[0];d=d?this:p(c).parent().children();return oc.call(d,c)};l.closest=function(d){var c=this.filter(d);if(c.length)return c;var f=this.parent();return f.length?f.closest(d):c};l.parents=function(d){return ma(p(S(U(this,"parentElement",!0))),d)};l.prev=function(d,c){return ma(p(S(U(this,"previousElementSibling",c))),d)};l.prevAll=function(d){return this.prev(d,!0)};l.siblings=
function(d){return ma(p(S(U(this,function(c){return p(c).parent().children().not(c)}))),d)};var Kb=["error","warn","info","debug","trace"],r=new (function(){function d(){var c=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",f=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0;Pa(this,d);this.console=window.console;this.level=f;this.prefix=c;this.buildLogFunctions()}zc(d,[{key:"shouldLog",value:function(c){return c<=this.level}},{key:"setLoggingLevel",value:function(c){this.level="string"===
typeof c?Kb.indexOf(c.toLowerCase())+1:c||0;this.buildLogFunctions()}},{key:"getLoggingLevel",value:function(){return this.level}},{key:"setPrefix",value:function(c){this.prefix=c;this.buildLogFunctions()}},{key:"getPrefix",value:function(){return this.prefix}},{key:"buildLogFunctions",value:function(){var c=this;Kb.forEach(function(d,a){d=Kb[a];c[d]=c.shouldLog(a+1)?c.getLogFn(d):function(){}})}},{key:"getLogFn",value:function(d){return Function.prototype.bind.call(this.console.log,this.console,
"[".concat(d.toUpperCase(),"]").concat(this.prefix?"("+this.prefix+")":"",":"))}}]);return d}()),v;(function(d){d.OnEventSend="interactions:onEventSend";d.OnBeforeEventSend="interactions:onBeforeEventSend";d.OnException="interactions:onException";d.OnPageMatchStatusUpdated="interactions:onPageMatchStatusUpdated";d.OnInit="interactions:onInit";d.OnInitSitemap="interactions:onInitSitemap";d.OnShutDown="interactions:onShutDown";d.OnSetAnonymousId="interactions:onSetAnonymousId";d.OnResetAnonymousId=
"interactions:onResetAnonymousId";d.OnClearPersistedIdentities="interactions:onClearPersistedIdentities";d.OnClearCookie="interactions:onClearCookie";d.OnConsentRevoke="interactions:onConsentRevoke";d.OnBeforeInit="interactions:onBeforeInit"})(v||(v={}));var ya=tb.default?tb.default:tb,Qc,ka=window.location.hostname,Lb=function(d){ka=d;Rc()},Rc=function(){Qc=ya("".concat(ya(ka+"/").slice(0,4))).slice(0,4)},Ba=function(){return"".concat("_sfid","_").concat(Qc)},Sc;document.addEventListener(v.OnClearCookie,
function(d){var c=d.detail&&d.detail.options||{};c.domain&&Lb(d.detail.options.domain);Tc(G({domain:ka},c))});var Mb=function(){return M.getJSON(Ba())},Tc=function(d){M.remove(Ba(),d)},Uc=function(d){qa.write(G({},Mb(),{consents:d}),730)},qa={read:Mb,write:function(d,c){Sc?M.set(Ba(),d,{expires:c,domain:ka,secure:!0}):M.set(Ba(),d,{expires:c,domain:ka});M.get(Ba())||r.warn("Web SDK cookie (_sfid) could not be set. This is possibly due to a restricted top level domain. See https://publicsuffix.org/learn/ for more information.")},
remove:Tc},Ne=[/bot/i,/spider/i,/facebookexternalhit/i,/simplepie/i,/yahooseeker/i,/embedly/i,/quora link preview/i,/outbrain/i,/vkshare/i,/monit/i,/Pingability/i,/Monitoring/i,/WinHttpRequest/i,/Apache-HttpClient/i,/getprismatic.com/i,/python-requests/i,/Twurly/i,/yandex/i,/browserproxy/i,/crawler/i,/Qwantify/i,/Yahoo! Slurp/i,/pinterest/i,/Tumblr\/14.0.835.186/i,/Tumblr Agent 14.0/i],Oe=function(d){return Ne.some(function(c){return c.test(d)})},Pe=navigator.vendor&&-1<navigator.vendor.indexOf("Apple")&&
navigator.userAgent&&-1==navigator.userAgent.indexOf("CriOS")&&-1==navigator.userAgent.indexOf("FxiOS"),T="";document.addEventListener(v.OnResetAnonymousId,function(){qa.remove();Vc()});document.addEventListener(v.OnSetAnonymousId,function(d){d.detail&&d.detail.newAnonymousId&&(d=d.detail.newAnonymousId,qa.write(G({},Mb(),{anonymousId:d}),730))});var Ua=function(d){(T=d)?document.dispatchEvent(new CustomEvent(v.OnSetAnonymousId,{detail:{newAnonymousId:d}})):r.warn("Attempted to setAnonymousId but not parameter is undefined")},
Vc=function(){Wc()?(T=qa.read().anonymousId,Ua(T),r.debug("Loaded anonymous identity record from cookie: ".concat(JSON.stringify(T)))):(Ua(Ec()),r.debug("Created new anonymous identity record. anonymousId: ".concat(T)));return T},Wc=function(){var d=qa.read();return!!(d&&"object"===J(d)&&0<Object.keys(d).length)},Va=function(){function d(){Pa(this,d);this.listeners=[]}zc(d,[{key:"on",value:function(d){var c=this;(this.listeners=this.listeners||[]).push(d);return function(){c.listeners=c.listeners.filter(function(a){return a!==
d})}}},{key:"once",value:function(d){var c=this;return this.on(function(){c.unbindAll();try{for(var a=arguments.length,b=Array(a),e=0;e<a;e++)b[e]=arguments[e];d.apply(c,b)}catch(g){r.error("Signal listener callback error: "+g)}})}},{key:"emit",value:function(){for(var d=this,f=arguments.length,a=Array(f),b=0;b<f;b++)a[b]=arguments[b];0!==this.listeners.length&&this.listeners.forEach(function(b){try{b.apply(d,a)}catch(g){r.error("Signal listener callback error: "+g)}})}},{key:"unbindAll",value:function(){this.listeners=
[]}}]);return d}(),Qe=function(d){r.debug("Unbinding all signals for type: ",d);Object.keys(d).forEach(function(c){d[c].unbindAll&&d[c].unbindAll()})},u=function c(){Pa(this,c)};u.onEventSend=new Va;u.onFireException=new Va;u.onPageMatchStatusUpdated=new Va;u.onInitSitemap=new Va;u.unbindAll=function(){Qe(u)};var t={currentPage:null,matchedConfig:null,matchStatus:null},N={pageTypes:[]},E=null,O;(function(c){c.Pending="pending";c.Running="running";c.Selected="selected";c.Matched="matched";c.Rejected=
"rejected"})(O||(O={}));var Wa=function(c){return new Promise(function(f,a){var b=N.pageTypeDefault;b&&Ca({pageName:b.name,status:O.Pending});b&&!c.length?(Nb(b),f(b)):(Re(c),c.map(function(e){Se(e).then(function(g){g?(b&&Xc(b),Nb(e),f(e)):(Xc(e),Te(c)||(b?(Nb(b),f(b)):a("No matching page found")))}).catch(function(a){"sitemap_reinit"!==a&&u.onFireException.emit(Error("isMatch failed while evaluating the ".concat(e.name," page config")),"Site-wide Javascript")})}))})},Yc=function(){t.matchStatus&&
(t.matchStatus.forEach(function(c){c.status===O.Running&&c._reject("sitemap_reinit")}),t.matchStatus=[]);u.onPageMatchStatusUpdated.emit(t.matchStatus)},Re=function(c){c.forEach(function(c){Ca({pageName:c.name,status:O.Pending})})},Nb=function(c){Ca({pageName:c.name,endTime:Date.now(),status:t.matchStatus.find(function(c){return c.status===O.Selected})?O.Matched:O.Selected})},Xc=function(c){Ca({pageName:c.name,status:O.Rejected,endTime:Date.now()})},Te=function(c){return t.matchStatus.filter(function(c){return c.status===
O.Rejected},0).length<c.length},Se=function(c){return new Promise(function(f,a){Ca({pageName:c.name,status:O.Running,startTime:Date.now(),_reject:a});"function"===typeof c.isMatch?(a=c.isMatch(),"object"===J(a)?a.then(function(a){f(a)}).catch(function(){}):f(a)):u.onFireException.emit(Error("isMatch failed while evaluating the ".concat(c.name," page config. isMatch must be a function.")),"Site-wide Javascript")})},Ca=function(c){t.matchStatus=[].concat(Bc(t.matchStatus||[]),[c]);u.onPageMatchStatusUpdated.emit(t.matchStatus)},
ja;(function(c){c.ViewCatalogObject="View Catalog Object";c.ViewCatalogObjectDetail="View Catalog Object Detail";c.QuickViewCatalogObject="Quick View Catalog Object";c.ShareCatalogObject="Share Catalog Object";c.ReviewCatalogObject="Review Catalog Object";c.CommentCatalogObject="Comment Catalog Object";c.FavoriteCatalogObject="Favorite Catalog Object"})(ja||(ja={}));var Ob;(function(c){c.AddToCart="Add To Cart";c.RemoveFromCart="Remove From Cart";c.ReplaceCart="Replace Cart"})(Ob||(Ob={}));var Pb;
(function(c){c.Purchase="Purchase";c.Preorder="Preorder";c.Cancel="Cancel";c.Ship="Ship";c.Deliver="Deliver";c.Return="Return";c.Exchange="Exchange"})(Pb||(Pb={}));var ra;(ra||(ra={})).MetadataUpdate="MetadataUpdate";var Zc;(Zc||(Zc={})).Tracking="Tracking";(function(c){c.OptIn="Opt In";c.OptOut="Opt Out"})(n.ConsentStatus||(n.ConsentStatus={}));var w=function(c,f,a){u.onFireException.emit(c,f);r.warn("sendException",{event,errorSection:f})},P=[],$c=function(){return P},ad=function(c){return P.find(function(f){return c.purpose==
f.consent.purpose})},Qb=function(c){bd(c,!0)},bd=function(c,f){Array.isArray(c)?c.forEach(function(a){cd(a,f)}):cd(c,f);Uc(P)},cd=function(c,f){if(c&&"object"==J(c)&&c.purpose&&c.provider&&c.status)var a=!0;else w(Error("Invalid consent, check that consent is a valid object and all fields are defined: ".concat(JSON.stringify(c))),"Salesforce Web SDK"),a=!1;if(a)if(a=ad(c)){var b=a.consent.status;if(a.consent.status!=c.status||a.consent.provider!=c.provider)a.consent=c,a.lastUpdateTime=(new Date).toISOString();
f&&b==n.ConsentStatus.OptIn&&c.status==n.ConsentStatus.OptOut&&dd(a)}else c={consent:c,lastUpdateTime:(new Date).toISOString()},P.push(c),f&&c.consent.status==n.ConsentStatus.OptOut&&dd(c)},dd=function(c){document.dispatchEvent(new CustomEvent(v.OnConsentRevoke,{detail:{revokedConsent:c}}))},Ue=function(c){var f=(new Date).toISOString();c.forEach(function(a){ad(a).lastSentTime=f});Uc(P)},We=function(c){Ve();Promise.resolve(c).then(function(c){c&&0<c.length&&Qb(c)})},Ve=function(){var c=qa.read();
c&&(P=c.consents||[])},Xe=function(c){return 0<=c.findIndex(function(c){return c.status==n.ConsentStatus.OptIn})},Ye=function(){return Xe(P.map(function(c){return c.consent}))},ed=function(c){c.source=c.source||{};var f=c.source||{},a;(a=c.source.pageType)||(a=t.currentPage&&t.currentPage.source?t.currentPage.source.pageType:void 0);c.source=G({},f,{pageType:a,url:c.source.url||window.location.href,urlReferrer:c.source.urlReferrer||document.referrer,channel:c.source.channel||"Web"});c.user=G({},c.user||
{},{anonymousId:T});Ze(c)},Ze=function(c){c.consents&&bd(c.consents,!1);c.consents=P.filter(function(c){return!c.lastSentTime||new Date(c.lastUpdateTime)>=new Date(c.lastSentTime)}).map(function(c){return c.consent});Ue(c.consents)};document.addEventListener(v.OnConsentRevoke,function(c){c.detail&&c.detail.revokedConsent&&$e({interaction:{name:ra.MetadataUpdate},consents:[c.detail.revokedConsent.consent]})});var gd=function(c){return fd(c,Ye).catch(function(f){r.error(f.message);u.onFireException.emit(f,
"Site-wide JavaScript");return c})},$e=function(c){fd(c,function(){return!0}).then(function(){return r.debug("Consent revoked")},function(c){return u.onFireException.emit(c,"Site-wide JavaScript")})},fd=function(c,f){a:{var a=c,b=t.matchedConfig;try{a=b&&b.onActionEvent?b.onActionEvent(a):a;if("object"===J(a)){c=a;break a}u.onFireException.emit(Error("onActionEvent failed for the ".concat(t.matchedConfig.name," page config. Must return an object or null.")),"Site-wide Javascript")}catch(e){u.onFireException.emit(Error("onActionEvent failed for the ".concat(t.matchedConfig.name,
" page config. ").concat(e.message,".")),"Site-wide Javascript")}c=void 0}a:{a=c;try{a=N.global&&N.global.onActionEvent?N.global.onActionEvent(a):a;if("object"===J(a)){c=a;break a}u.onFireException.emit(Error("onActionEvent failed for the global page config. Must return an object or null."),"Site-wide Javascript")}catch(e){u.onFireException.emit(Error("onActionEvent failed for the global page config. ".concat(e.message,".")),"Site-wide Javascript")}c=void 0}ed(c);f&&!f()&&r.debug("No opt-in consents provided. Event will still be dispatched.");
r.debug("Sent event: ",c);u.onEventSend.emit(c);return Promise.resolve(c)},af=function(c){return new Promise(function(f,a){u.onInitSitemap.once(function(){return a("sitemap_reinit")});var b={name:null},e=[];Object.keys(c.interaction).forEach(function(a){var f=hd(c.interaction[a],a).then(function(c){b[a]=c});e.push(f)});Promise.all(e).then(function(){f(b)}).catch(function(a){u.onFireException.emit(Error("Catalog object interaction config was rejected"),"Site-wide Javascript")})})},hd=function(c,f){try{return E=
f,"object"===J(c)&&!Array.isArray(c)&&0<Object.keys(c).length?bf(c):Promise.resolve(c).then(function(a){return"function"===typeof a?a():a})}catch(a){u.onFireException.emit(Error("getValue for ".concat(f," failed on ").concat(t.matchedConfig.name," while evaluating custom function. ").concat(a.message,".")),"Site-wide Javascript")}},bf=function(c){var f={},a=Object.keys(c),b={};a.forEach(function(a){var b=hd(c[a],a);f[a]=b});return Promise.all(Object.values(f)).then(function(c){c.forEach(function(c,
e){b[a[e]]=c});return b})},Xa,cf=function(){Rb();id()&&(Xa=setInterval(function(){var c=!1,f=(new Date).getTime(),a=t.matchedConfig.listeners.map(function(a){if(a.selectorFound)return a;a=Ya(a);c=a.selectorFound||c;return a});c&&Object.assign(t.matchedConfig,G({},t.matchedConfig,{listeners:a}));(50<(new Date).getTime()-f||!id())&&Rb()},1E3))},id=function(){if(t.matchedConfig){var c=t.matchedConfig.listeners;return c?c.filter(function(c){return!c.selectorFound}).length:!1}return!1},Rb=function(){"number"===
typeof Xa&&clearInterval(Xa);Xa=null},Ya=function(c){var f=p(c.selector),a=G({},c,{selectorFound:0<f.length});f.on(a.bind,function(b){try{a.callback(b)}catch(e){u.onFireException.emit(Error("Listener callback on ".concat(a.bind," bound to ").concat(a.selector," failed for the ").concat(t.matchedConfig.name," page config. ").concat(e.message,".")),"Site-wide Javascript")}});return a},df=function(){t&&t.matchedConfig&&t.matchedConfig.listeners&&t.matchedConfig.listeners.forEach(function(c){p(c.selector).off(c.bind)})},
jd=function(c){c.global=c.global||{};"object"!=J(c.global)&&u.onFireException.emit(Error("The global config has a type of ".concat(J(c.global),", but it must be an object")),"Sitewide Javascript");Object.assign(N,G({},c));u.onInitSitemap.emit(N)},kd=function(c){ef(c);return!0},ld=function(c){t.matchedConfig=G({},c,{listeners:ff(c)});t.currentPage=G({},t.currentPage||{},{source:{pageType:c.name,locale:gf(c)},user:{anonymousId:null},interaction:null,pageView:!0});return c.interaction?af(c).then(function(c){t.currentPage.interaction=
c}):Promise.resolve()},ff=function(c){return(c.listeners||[]).map(function(c){return Ya(c)})},gf=function(c){return"function"===typeof c.locale?c.locale():c.locale},hf=function f(){for(var a=arguments.length,b=Array(a),e=0;e<a;e++)b[e]=arguments[e];return b.reduce(function(a,b){Object.keys(b).forEach(function(e){var g=a[e],h=b[e];Array.isArray(g)&&Array.isArray(h)?Object.assign(a,Qa({},e,g.concat.apply(g,Bc(h)))):g&&"object"===J(g)&&h&&"object"===J(h)?Object.assign(a,Qa({},e,f(g,h))):Object.assign(a,
Qa({},e,h))});return a},{})},md=function(f){var a=N.global||{},b=a.onActionEvent;delete a.onActionEvent;f=hf(a,f);a.onActionEvent=b;return f},jf=function(f){f.forEach(function(a){if(!a.name||!a.isMatch)throw Error("All page configs must have a name and isMatch attribute defined");})},kf=function(){var f=t;gd(t.currentPage);t=f},ef=function(f){jd(f);df();Yc();Rb();t.currentPage=null;try{jf(f.pageTypes);var a=!0}catch(b){u.onFireException.emit(Error(b),"Sitemap"),a=!1}a&&Wa(f.pageTypes).then(md).then(ld).then(kf).then(cf).catch(function(a){"sitemap_reinit"!==
a&&u.onFireException.emit(Error("Unhandled exception: ".concat(a)),"Site-wide Javascript")})},I=function(f,a){if(f)try{return f(a)}catch(b){return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name," inside of the custom transform function. ").concat(b)),"Site-wide Javascript"),null}return a},Sb=function(f,a){a=a||window;f=f.split(".");var b=!0,e=!1,g=void 0;try{for(var h=f[Symbol.iterator](),m;!(b=(m=h.next()).done);b=!0){var z=m.value;var k=/(\w+)\[([0-9]+)\]/.exec(z);
if(a[z])a=a[z];else if(k){if(a[k[1]]&&(a=a[k[1]][parseInt(k[2],10)],!a))return null}else return null}}catch(oa){e=!0,g=oa}finally{try{b||null==h.return||h.return()}finally{if(e)throw g;}}return a},nd={fromSelector:function(f,a){return function(){if("string"!=typeof f)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Selector must be a string.")),"Site-wide Javascript"),null;var b=p(f).first().text();return b=I(a,b)}},fromSelectorAttribute:function(f,
a,b){return function(){if("string"!=typeof f)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Selector must be a string.")),"Site-wide Javascript"),null;if("string"!=typeof a)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Attribute must be a string.")),"Site-wide Javascript"),null;var e=p(f).first().attr(a);return e=I(b,e)}},fromSelectorMultiple:function(f,a){return function(){if("string"!=
typeof f)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Selector must be a string.")),"Site-wide Javascript"),null;var b=p(f).get().map(function(a){return p(a).text()});return b=I(a,b)}},fromSelectorAttributeMultiple:function(f,a,b){return function(){if("string"!=typeof f)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Selector must be a string.")),"Site-wide Javascript"),null;if("string"!=
typeof a)return u.onFireException.emit(Error("getValue for ".concat(E," failed on ").concat(t.matchedConfig.name,". Attribute must be a string.")),"Site-wide Javascript"),null;var e=p(f).get().map(function(b){return p(b).attr(a)});return e=I(b,e)}},fromItemProp:function(f,a){return function(){var b=p("[itemprop='"+f+"']").first().attr("content");return b=I(a,b)}},fromMeta:function(f,a){return function(){var b=p("meta[name='"+f+"']").first().attr("content")||p("meta[property='"+f+"']").first().attr("content");
return b=I(a,b)}},fromWindow:function(f,a){return function(){var b=Sb(f);return b=I(a,b)}},fromJsonLd:function(f,a){return function(){var b=p("script[type='application/ld+json']").first().text();try{var e=JSON.parse(b);if(f){var g=Sb(f,e);return I(a,g)}return I(a,e)}catch(h){u.onFireException.emit(Error("Parsing JSON-LD for ".concat(E," failed on ").concat(t.matchedConfig.name,". ").concat(h)),"Site-wide Javascript")}}},fromCanonical:function(f){return function(){var a=p("link[rel=canonical]").attr("href");
return a=I(f,a)}},fromHref:function(f){return function(){var a=window.location.href;return a=I(f,a)}},buildCategoryId:function(f,a,b,e){return function(){var g=Array.from(p(f));a&&(g=g.slice(a));b&&(g=g.slice(0,-1));var h=[];g.forEach(function(a){(a=p(a).text().trim())?h.push(a):u.onFireException.emit(Error("buildCategoryId for ".concat(E," failed on ").concat(t.matchedConfig.name,". A category part is null.")),"Site-wide Javascript")});g=h.join("|");return g=I(e,g)}},buildCategoryIdAttribute:function(f,
a,b,e,g){return function(){var h=Array.from(p(f));b&&(h=h.slice(b));e&&(h=h.slice(0,-1));var m=[];h.forEach(function(b){(b=p(b).attr(a).trim())?m.push(b):u.onFireException.emit(Error("buildCategoryId for ".concat(E," failed on ").concat(t.matchedConfig.name,". A category part is null.")),"Site-wide Javascript")});h=m.join("|");return h=I(g,h)}}},B=p,ea={},Da=function(f){if(!f||"string"!==typeof f||"function"!==typeof ea[f])return null;ea[f]();delete ea[f]},od={resolveWhenTrue:{bind:function(f){var a=
1<arguments.length&&void 0!==arguments[1]?arguments[1]:Math.random().toString(36).slice(2),b=2<arguments.length&&void 0!==arguments[2]?arguments[2]:2E3,e=3<arguments.length&&void 0!==arguments[3]?arguments[3]:100;if("function"===typeof f)return new Promise(function(g,h){var m=0,z=setInterval(function(){try{m+=e;var z=f();z?(Da(a),g(z)):m>=b&&(Da(a),g(!1))}catch(oa){Da(a),h(oa)}},e);ea[a]=function(){clearInterval(z)}})},unbind:Da,getBindings:function(){return ea},clearBindings:function(){for(var f in ea)ea.hasOwnProperty(f)&&
"function"===typeof ea[f]&&Da(f)}}};var yb="shutDown";var Za={cookieDomain:null,consents:null},pd=function(){function f(a,e,f){if(f)for(a=Math.random().toString(36).slice(2);b[a];)a=Math.random().toString(36).slice(2);else a=a||e;return a}function a(a,e){return{pageElementLoaded:function(h,m){if("string"!==typeof m||""===m)m=0<B("body").length?"body":"html";if("string"!==typeof h||""===h)throw Error("[pageElementLoaded] Invalid arguments");return new Promise(function(z){var k=B(h);if(0<k.length)z(k[0]);
else{k=B(m)[0];if(!k)throw Error("pageElementLoaded cannot be bound. observerSelector ".concat(m," is not on the page"));var l=new MutationObserver(function(b,e){var f=!0,m=!1,k=void 0;try{for(var l=b[Symbol.iterator](),n;!(f=(n=l.next()).done);f=!0){var p=n.value;if(p.addedNodes&&0<p.addedNodes.length){b=!0;var q=!1,ba=void 0;try{for(var r=p.addedNodes[Symbol.iterator](),t;!(b=(t=r.next()).done);b=!0){var pa=t.value,oa=B(pa).is(h)?pa:B(pa).find(h).get(0);if(oa){a?g.unbind(a):e.disconnect();z(oa);
return}}}catch(Tb){q=!0,ba=Tb}finally{try{b||null==r.return||r.return()}finally{if(q)throw ba;}}}}}catch(Tb){m=!0,k=Tb}finally{try{f||null==l.return||l.return()}finally{if(m)throw k;}}});l.observe(k,{childList:!0,subtree:!0})}a=f(a,"<pageElementLoaded>"+h,e);b[a]=function(){l&&l.disconnect()}})},pageElementVisible:function(h,m){var z=m||0;if("string"!==typeof h||""===h||"number"!==typeof z||0>z||1<z)throw Error("[pageElementVisible] Invalid arguments");return new Promise(function(m){var k=B(h),l=
new IntersectionObserver(function(b,e){for(var f=0;f<b.length;f++)if(b[f].isIntersecting){a?g.unbind(a):e.disconnect();m(b[f]);break}},{threshold:z});l.observe(k[0]);a=f(a,"<pageElementVisible>"+h,e);b[a]=function(){l.disconnect()}})},pageExit:function(h){h=h||0;if("number"!==typeof h||0>h)throw Error("[pageExit] Invalid arguments");return new Promise(function(m){function k(a){clearTimeout(n);10>=a.pageY-window.pageYOffset&&(n=0<h?setTimeout(z.bind(this,a),h):z.call(this,a))}function z(b){a?g.unbind(a):
l.off("mousemove",k);clearTimeout(n);m(b)}var l=B(document),n;l.on("mousemove",k);a=f(a,"<pageExit>",e);b[a]=function(){l.off("mousemove",k)}})},pageInactive:function(h){function m(b,e){var f=new Promise(function(f){function h(b){b=b||new Event("pageInactive");a&&!e.isSubscribe?g.unbind(a):k.off("mousemove click scroll keyup keydown",m);f(b)}function m(a){clearTimeout(l);l=setTimeout(h.bind(this,a),b)}var k=B(document),l;m();k.on("mousemove click scroll keyup keydown",m)});f.subscribe=function(h){delete f.subscribe;
e.isSubscribe=!0;f.then(function(f){f.disconnect=function(){a?g.unbind(a):e.isDisconnected=!0};h(f);!e.isDisconnected&&m(b,e).subscribe(h)});return f};return f}if("number"!==typeof h||0>=h)throw Error("[pageInactive] Invalid arguments");var k={isDisconnected:!1,isSubscribe:!1};a=f(a,"<pageInactive>",e);b[a]=function(){k.isDisconnected=!0};return m(h,k)},pageScroll:function(h){if("number"!==typeof h||0>h||1<h)throw Error("[pageScroll] Invalid arguments");return new Promise(function(m){function k(b){window.scrollY/
(document.documentElement.scrollHeight-window.innerHeight)>=h&&(m(b),a?g.unbind(a):l.off("scroll",k))}var l=B(document);l.on("scroll",k);a=f(a,"<pageScroll>",e);b[a]=function(){l.off("scroll",k)}})}}}var b={},e=a(null,!0),g=function(){return{bind:function(e){e&&b[e]&&(b[e](),delete b[e]);return a(e)},unbind:function(a){if(!a||"string"!==typeof a||"function"!==typeof b[a])return null;b[a]();delete b[a]},getBindings:function(){return b},clearBindings:function(){for(var a in b)b.hasOwnProperty(a)&&(b[a](),
delete b[a])}}}();return Object.assign(e,g)}(),qd=function b(a){var e=this;Pa(this,b);this.clearRateLimiter=function(){for(;e.sentEvents.length;)e.sentEvents.pop()};this.eventWithinLimitTimeRange=function(a,b,e){return e-b.time<a};this.isTriggerLimitExceeded=function(a){var b=G({},e.eventRateLimiterConfig),g=b.globalLimit,k=b.globalTimeRange,l=b.perInteractionLimit;b=b.perInteractionTimeRange;var n=Date.now(),p=0,q=0,t=b?Math.max(k,b):k;e.sentEvents.push({name:a,time:n});for(var u=e.sentEvents.length-
1;0<=u;u--){if(!e.eventWithinLimitTimeRange(t,e.sentEvents[u],n)){e.sentEvents.splice(0,u+1);break}if(e.eventWithinLimitTimeRange(k,e.sentEvents[u],n)&&(p++,p>g))return r.info("Event rate limit exceeded. More than ".concat(g," events ")+"sent in ".concat(k,"ms.")),!0;if(l&&b&&e.eventWithinLimitTimeRange(b,e.sentEvents[u],n)&&e.sentEvents[u].name===a&&(q++,q>l))return r.info("Event rate limit exceeded. More than ".concat(l," events ")+"with interaction name of ".concat(a," sent in ").concat(b,"ms.")),
!0}return!1};this.sentEvents=[];this.eventRateLimiterConfig=a},ub,vb,wb,xb,Ub=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};if(!(Oe(window.navigator.userAgent||"")?V("You are a robot."):"prerender"===document.visibilityState&&Pe?V("Page is pre-rendered and loaded in Safari."):1))return Promise.reject();"initialized"==yb&&V("reinitializing Web SDK");a.cookieDomain&&Lb(a.cookieDomain);Rc();Za=G({},Za,{},a);document.dispatchEvent(new CustomEvent(v.OnBeforeInit));Ae();Vc();
yb="initialized";document.dispatchEvent(new CustomEvent(v.OnInit,{detail:{sdkConfig:Za}}));We(a.consents);return Promise.resolve()};window.SalesforceInteractions={init:Ub,reinit:function(){var a=P.map(function(a){return a.consent});Ub(G({},Za,{consents:a})).then(function(){kd(N)})},sendEvent:gd,sendException:w,getAnonymousId:function(){return T},setAnonymousId:Ua,getCookieDomain:function(){return ka},setCookieDomain:Lb,updateConsents:Qb,getConsents:$c,ConsentStatus:n.ConsentStatus,log:r,getLoggingLevel:Dc,
setLoggingLevel:Cc,initSitemap:kd,getSitemapConfig:function(){return N},getSitemapResult:function(){return t},CatalogObjectInteractionName:ja,CartInteractionName:Ob,OrderInteractionName:Pb,listener:Fc,build:function(a){Wa(a.pageTypes).then(md).then(ld).catch(function(a){"sitemap_reinit"!==a&&u.onFireException.emit(Error("Unhandled exception: ".concat(a)),"Site-wide Javascript")})},cashDom:B,resolvers:nd,util:od,DisplayUtils:pd,CustomEvents:v};var lf="cdn.".concat("evergage.com"),Vb;(function(a){a.Impression=
"i";a.Clickthrough="c";a.Dismissal="d";a.Unsubscribe="u";a.Send="s"})(Vb||(Vb={}));(function(a){a.Product="Product";a.Category="Category"})(n.ItemType||(n.ItemType={}));var za;(za||(za={})).StopQuickViewCatalogObject="Stop Quick View Catalog Object";var Wb={Personalization:"Personalization"},Xb;(function(a){a._id="_id";a.categories="categories";a.dimensions="dimensions";a.relatedCatalogObjects="relatedCatalogObjects"})(Xb||(Xb={}));(function(a){a.OnEventResponse="evergage:onEventResponse";a.OnEventSend=
"evergage:onEventSend";a.OnStatSend="evergage:onStatSend";a.OnException="evergage:onException";a.OnTemplateDisplayEnd="evergage:onTemplateDisplayEnd";a.OnPageMatchStatusUpdated="evergage:onPageMatchStatusUpdated";a.OnInit="evergage:onInit";a.OnInitSitemap="evergage:onInitSitemap";a.OnShutDown="evergage:onShutDown";a.OnConsentRevoke="evergage:onConsentRevoke"})(n.CustomEvents||(n.CustomEvents={}));var la;(function(a){a.OnEventResponse="mcis:onEventResponse";a.OnStatSend="mcis:onStatSend";a.OnTemplateDisplayEnd=
"mcis:onTemplateDisplayEnd";a.OnBeforeEventSend="mcis:onBeforeEventSend";a.OnInit="mcis:onInit"})(la||(la={}));var q={endpointConfig:{},beaconConfig:{sendEvents:!0,minimumActivityTimeToRegister:300,timeOnPageTimerLengthMillis:6E4,trackAnonymousVisitors:!0,corsAllowedOrigins:["*"],identityAttributes:[],rememberMeUserIdsMillis:63072E6,actionRateLimiterConfig:{globalLimit:10,globalTimeRange:5E3,perActionLimit:5,perActionTimeRange:2E3}},beaconState:null},Yb=function(){return y({},q.endpointConfig,{},
q.beaconConfig)},rd=function(){var a=Yb();return"account dataset cookieDomain consents cdnUrl trackerUrl siteConfigVersion minimumActivityTimeToRegister timeOnPageTimerLengthMillis sendEvents trackAnonymousVisitors doNotTrackPingRequestsForActions trackContextualRelatedItems identityAttributes actionRateLimiterConfig".split(" ").reduce(function(b,e){return b[e]=a[e],b},{})},sd;document.addEventListener(v.OnClearCookie,function(a){a=a.detail&&a.detail.options||{};Zb("a",y({domain:q.beaconConfig.cookieDomain},
a));Zb("n",y({domain:q.beaconConfig.cookieDomain},a))});var Ea=function(a){return"".concat("_evg").concat(a,"_").concat(sd)},Zb=function(a,b){M.remove(Ea(a),b)},Q={setCookieHash:function(a,b,e){sd=ya("".concat(a,".").concat(b,".").concat(ya(e+"/").slice(0,4))).slice(0,4)},read:function(a){return M.getJSON(Ea(a))},write:function(a,b,e,g){q.beaconConfig.secureCookie?M.set(Ea(a),b,{expires:e,domain:g,secure:!0}):M.set(Ea(a),b,{expires:e,domain:g});M.get(Ea(a))||r.warn("Web SDK cookie (_evga) for the Interaction Studio module could not be set. This is possibly due to a restricted top level domain. See https://publicsuffix.org/learn/ for more information.")},
remove:Zb},td=function(a){return{uuid:a.uuid,affinityId:a.affinityId,persistedUserId:a.puid,persistedAccountId:a.paid}},Y=function(a){a=y({},K(),{},a);Q.write("a",{uuid:a.uuid,puid:a.persistedUserId,paid:a.persistedAccountId,affinityId:a.affinityId},730,q.beaconConfig.cookieDomain);var b=Q.read("a");b&&r.debug("Stored visitor cookie. ".concat(JSON.stringify(b)));return a},$b=function(a){return 0===a.indexOf("www")?a.substring(4,a.length):a},ud=function(a){return!!(a&&"object"===A(a)&&0<Object.keys(a).length)},
ac=function(){var a=K().uuid;Ua(a)},K=function(){var a=Q.read("a");return ud(a)?td(a):{}},mf=function(a){if(!a)return!1;a=(a||{}).user;a=void 0===a?{}:a;var b=y({},a.attributes,{},a.identities);return Object.keys(b).some(function(a){return q.beaconConfig.identityAttributes.includes(a)})||!!a.id||!!K().persistedUserId},k={result:y({},t,{backgroundPage:null}),config:y({},N,{settings:{canonicalizeIds:!1,runOnTranslatedPage:!1,setDefaultListPrice:!1,truncateTranslated:!0},currentKey:null}),campaignResponses:[]},
Jc=function(){return k.result.currentPage||{}},$a=function(){k.config.currentKey=E;return k},vd=function(){return $a().result||null},wd=function(){return $a().config||null},xd=function(){return $a().campaignResponses||[]},Fa,Ga,bc=function(a){a[".bv"]=16;a._ak=q.endpointConfig.account;a._ds=q.endpointConfig.dataset;a[".scv"]=q.endpointConfig.siteConfigVersion;a.channel="Web";a._r=String(Math.random()).slice(2,8)},cc=function(a){var b=K();a.userId?a._reqPersistedEntityIds="":b.persistedUserId&&(a._persistedUserId=
b.persistedUserId);k&&k.result&&k.result.currentPage&&k.result.currentPage.user&&k.result.currentPage.user.attributes&&k.result.currentPage.user.attributes.customer_non_consent&&(a.customer_non_consent=k.result.currentPage.user.attributes.customer_non_consent);q.beaconConfig.trackAnonymousVisitors&&(a[".anonId"]=b.uuid,null!=b.affinityId&&(a[".aaId"]=b.affinityId),a.userId||a._persistedUserId||a._persistedAccountId||(a._anon="true"));return a},Ha=function(a){a="".concat(a);if(null==a||974>=a.length)return a;
var b=731,e=244;974!=b+e&&(b+=974-(b+e));10<e?e-=5:10<b&&(b-=5);return a.substring(0,b)+" ... "+a.substring(a.length-e)},yd=function(a,b){var e=b.header,g=b.fileName,h=b.line;b=b.column;e&&(a[".ef"]=Ha(e));a[".eu"]=Ha(g);a[".el"]=Ha(h);a[".ec"]=Ha(b);return a},nf=(Fa={},L(Fa,".eu","sourceURL"),L(Fa,".el","line"),L(Fa,".ec","column"),Fa),of=(Ga={},L(Ga,".eu","fileName"),L(Ga,".el","lineNumber"),L(Ga,".ec","columnNumber"),Ga),zd=function(a,b,e){return b?yd(a,{header:!!b.stack&&"string"===typeof b.stack&&
b.stack.substring(0,b.stack.indexOf("@")),fileName:b[e[".eu"]],line:b[e[".el"]],column:b[e[".ec"]]}):a},pf=function(a){var b=Object.keys(a)[0];if(!b)return{};a=a[b];b={type:b,_id:a._id};Array.isArray(a.categories)&&(b.categories=a.categories.map(function(a){return"string"===typeof a?{_id:a,type:n.ItemType.Category}:a}));if("object"===A(a.dimensions)||"object"===A(a.relatedCatalogObjects)){b.dimensions={};a=a.relatedCatalogObjects||a.dimensions;for(var e in a)if(a.hasOwnProperty(e)){var g=a[e];Array.isArray(g)?
b.dimensions[e]=g:b.dimensions[e]=[g]}}return b},rf=function(a){var b=[];Object.keys(a).forEach(function(e){b=b.concat(qf(e,a[e]))});return b},qf=function(a,b){return b.map(function(b){var e=sf(a);return{_id:b,type:e,tagType:"t"===e?a:void 0}})},sf=function(a){switch(a){case "Product":return"p";case "Article":return"a";case "Blog":return"b";case "Category":return"c";case "Promotion":return"P";default:return"t"}},tf=function(a){var b={type:"e",id:a.experienceId,stat:Vb[a.stat],ug:a.control?"Control":
void 0};a.catalog&&(b.piks=rf(a.catalog));return b},uf=function(a){var b={};b[".cStat"]=JSON.stringify(a.campaignStats.map(tf));bc(b);cc(b);return b},vf=function(a){var b={};b[".top"]=""+a.timeOnPageMillis;a.catalog&&0<Object.keys(a.catalog).length&&(b.item=JSON.stringify(pf(a.catalog)));a.action&&(b.action=a.action);if(a.performance){var e=a.performance.networkTime;e&&(b[".tt"]=e);(e=a.performance.eventDnsTime)&&(b[".ttdns"]=e);(e=a.performance.domLoadTime)&&(b[".dt"]=e);(e=a.performance.pageLoadTime)&&
(b[".lt"]=e);(e=a.performance.sdkLoadTime)&&(b[".bt"]=e);(e=a.performance.sdkParseTime)&&(b[".pt"]=e);(a=a.performance.sdkDnsTime)&&(b[".btdns"]=a)}bc(b);cc(b);return b},wf=Object.prototype.hasOwnProperty,dc=function(){function a(b){Ka(this,a);this.baseURL=b}La(a,[{key:"send",value:function(a){xf(a);var b=this.baseURL+"?";var g="";var h=[],m;"string"!==typeof g&&(g="?");for(k in a)if(wf.call(a,k)){(m=a[k])||null!==m&&void 0!==m&&!isNaN(m)||(m="");var k=encodeURIComponent(k);m=encodeURIComponent(m);
null!==k&&null!==m&&h.push(k+"="+m)}a=h.length?g+h.join("&"):"";b+=a;if(navigator&&navigator.sendBeacon)return a=new Blob([],{type:"application/x-www-form-urlencoded"}),navigator.sendBeacon(b,a);a=new XMLHttpRequest;a.open("GET",b,!0);a.send()}}]);return a}(),yf=function(a){function b(a,g){Ka(this,b);a=ta(b).call(this,a);if(!a||"object"!==typeof a&&"function"!==typeof a){if(void 0===this)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");a=this}a.eventRateLimiter=
g||new qd({globalLimit:q.beaconConfig.actionRateLimiterConfig.perActionLimit,globalTimeRange:q.beaconConfig.actionRateLimiterConfig.perActionTimeRange});return a}je(b,a);La(b,[{key:"send",value:function(a){if(this.eventRateLimiter.isTriggerLimitExceeded())r.warn("Error event rate limiter triggered.");else return hb(ta(b.prototype),"send",this).call(this,a)}}]);return b}(dc),xf=function(a){Object.keys(a).forEach(function(b){var e=a[b];if("number"!=typeof e&&"boolean"!==typeof e&&null!=e)if("string"==
typeof e){a:switch(b){case "url":case "urlref":e=e.substring(0,3072);break a;case "title":e=e.substring(0,1024);break a;default:e=e.substring(0,1024)}a[b]=e}else"function"==typeof e?delete a[b]:a[b]=JSON.stringify(e)})},Ad,Bd,ab,Cd=!1,Dd=!1,Ed=!1,x={sdkLoadTime:null,sdkParseTime:null,sdkDnsTime:null,pageLoadTime:null,domLoadTime:null,networkTime:null,eventDnsTime:null},Fd=function(){return window.performance.getEntriesByType?window.performance.getEntriesByType("resource").reverse().find(function(a){return 0<=
a.name.indexOf("/api2/event/")}):null},Gd=function(){return window.performance.getEntriesByType?window.performance.getEntriesByType("resource").find(function(a){return/\/evergage(Small)?(\.min)?\.js$/.test(a.name)}):null},Hd=function(){if(window.performance.getEntriesByType){var a=window.performance.getEntriesByType("navigation");if(a&&0<a.length)return a=a[0],a||(a=window.performance.timing),a}return null},Ic=function(a){for(var b in a.performance)x[b]=null},Lc=function(){if(!Dd){var a=Hd();a&&0<
a.domContentLoadedEventEnd&&(void 0!=a.entryType?x.domLoadTime=Math.round(a.domContentLoadedEventEnd)||null:x.domLoadTime=Math.round(a.domContentLoadedEventEnd-window.performance.timing.navigationStart)||null);x.domLoadTime&&(Dd=!0)}if(!Cd){if(a=Hd())void 0!=a.entryType?x.pageLoadTime=Math.round(a.loadEventEnd)||null:x.pageLoadTime=Math.round(a.loadEventEnd-window.performance.timing.navigationStart)||null;x.pageLoadTime&&(Cd=!0)}},Id=function(a){a=a?(a=zb(a))?a.pathname:"":"";return a},ec=function(a,
b){b="undefined"===typeof b?location.search:b;for(var e=/([^=?&]+)=?([^&]*)/g,g={},h;h=e.exec(b);){var m=Gc(h[1]);h=Gc(h[2]);null===m||null===h||m in g||(g[m]=h)}return g[a]||""},Jd=function(a,b){return(a=a.exec(b))&&2===a.length?a[1]:null},Kd=function(a){return Jd(/[/]?([^/]*)[/]?$/,Id(a))},fc=function(a){return"string"!==typeof a||""===a.trim()?null:zb(a).href},bb=function(a){return a&&"string"===typeof a?(a=parseFloat(a.replace(/[^0-9.]+/g,"")),isNaN(a)?null:a):null},Ld=function(a){return a&&"string"===
typeof a?(a=parseInt(a.trim().replace(/[^0-9.]+/g,""),10),isNaN(a)?null:a):null},zf=function(a){var b=t;if(b.currentPage&&b.currentPage.interaction&&b.currentPage.interaction.catalogObject)return(b=b.currentPage.interaction.catalogObject)?{catalogObjectType:b.type,catalogObjectId:b.id,price:b.attributes&&b.attributes.price?b.attributes.price:null,quantity:bb(p(a).val())}:null},sa={extractFirstGroup:Jd,getLastPathComponent:Kd,getLastPathComponentWithoutExtension:function(a){a=Kd(fc(a));var b=a.lastIndexOf(".");
return 0<=b?a.substring(0,b):a},getParameterByName:ec,getPathname:Id,qualifyUrl:fc,removeQueryString:function(a){if(!a)return"";a=zb(a);return[a.protocol,"//","http:"===a.protocol&&"80"===a.port||"https:"===a.protocol&&"443"===a.port?a.hostname:a.host,a?a.pathname:""].join("")},getFloatValue:bb,getIntegerValue:Ld,getUtagFirstForField:function(a){var b=window.utag_data;if(b&&b[a]&&0<=b[a].length)return Array.isArray(b[a])?b[a][0]:b[a]},getValueFromNestedObject:Sb,buildLineItemFromPageState:function(a){if(k.result.currentPage&&
k.result.currentPage.catalog){var b=k.result.currentPage.catalog[n.ItemType.Product];return b?{_id:b._id,price:b.price,quantity:bb(p(a).val())}:null}},resolveWhenTrue:od.resolveWhenTrue,cookie:M},Af=function(a){return new Promise(function(b,e){gc(e);Z(a,"lineItems",!1,!0).then(function(a){var e={complete:{Product:[]}};0===Object.keys(a).length&&b(e);a=Z(a,"lineItems",!0,!1);e.complete.Product=a;b(e)}).catch(function(){w(Error("Cart Config was rejected"),"Site-wide Javascript")})})},Z=function(a,b,
e,g){try{E=b;if(a)if("dimensions"!==b&&"relatedCatalogObjects"!==b&&"lineItems"!==b&&"attributes"!==b||!g){var h="function"===typeof a?a():a;"categories"===b&&Array.isArray(h)&&"object"!==A(h[0])&&"c"!==h[0].type&&"string"!==typeof h[0]._id?h=Kc(h):"lineItems"===b&&"object"===A(h)&&(h=Bf(h))}else h=Cf(a,b);return e?hc(b,h,k.config.settings.canonicalizeIds):h}catch(m){w(Error("getValue for ".concat(b," failed on ").concat(k.result.matchedConfig.name," while evaluating custom function. ").concat(m.message,
".")),"Site-wide Javascript")}},Md=function(a,b,e){if(a&&"object"===A(a)&&"function"===typeof a.then)w(Error("getValue for ".concat(b," failed on ").concat(k.result.matchedConfig.name," while evaluating custom function. ").concat(b," cannot be a Promise.")),"Site-wide Javascript");else if(a||"number"===typeof a||"boolean"===typeof a)e[b]=a},Df=function(a,b){return new Promise(function(e,g){gc(g);var h=Object.keys(Xb);g=[];for(var m=0;m<h.length;m++){var k=h[m];k=Z(a[k],k,!1,!0);g.push(k)}Promise.all(g).then(function(g){var m=
{_id:null};g.forEach(function(a,b){b=h[b];a=Z(a,b,!0,!1);Md(a,b,m)});Object.keys(a).forEach(function(b){if(!h.includes(b)){var e=Z(a[b],b,!0,!0);Md(e,b,m)}});g=L({},b,m);e(g)}).catch(function(){w(Error("Catalog Config was rejected"),"Site-wide Javascript")})})},Ef=function(a){return new Promise(function(b,e){gc(e);var g=[],h=Object.keys(a);h.forEach(function(b){E=b;b=Z(a[b],b,!1,!0);g.push(b)});Promise.all(g).then(function(a){var e={},g={Product:{}};a.forEach(function(a,b){b=h[b];e[b]=Z(a,b,!0,!1)});
g.Product=e;b(g)}).catch(function(){w(Error("Order Config was rejected"),"Site-wide Javascript")})})},Bf=function(a){var b;a._id?b=a._id.length:a.sku?b=a.sku.length:w(Error("Either _id or sku must be defined for lineItems"),"Sitemap");for(var e=[],g=function(){var a=va(m[h],2),g=a[0];a=a[1];a.length!=b?w(Error("Resolving multiple values for ".concat(g," failed on ").concat(k.result.matchedConfig.name,". ").concat(g," does not have the same number of values as _id")),"Site-wide Javascript"):a.forEach(function(a,
b){e[b]||(e[b]={_id:null,quantity:null});e[b][g]=a})},h=0,m=Object.entries(a);h<m.length;h++)g();return e},Kc=function(a){return a.map(function(a){return{type:"c",_id:a}})},Cf=function(a,b){var e={},g=Object.keys(a),h={};g.forEach(function(b){e[b]=Z(a[b],b,!1,!0)});return"lineItems"===b||"dimensions"===b||"relatedCatalogObjects"===b?Promise.all(Object.values(e)).then(function(a){a.forEach(function(a,b){b=g[b];(a=Z(a,b,!1,!1))&&(h[b]=a)});return h}):e},hc=function(a,b){var e=2<arguments.length&&void 0!==
arguments[2]?arguments[2]:!0;return b=Array.isArray(b)?"lineItems"===a?Ff(b,e):b.map(function(b){return Nd(a,b,e)}):Nd(a,b,e)},Ff=function(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:!0;return a.map(function(a){return Gf(a,b)})},Gf=function(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:!0,e;for(e in a)if("item"===e)for(var g in a[e])a[e][g]=hc(g,a[e][g],b);else a[e]=hc(e,a[e],b);return a},Nd=function(a,b){var e=2<arguments.length&&void 0!==arguments[2]?arguments[2]:
!0,g=b;"price"!==a&&"listPrice"!==a&&"totalValue"!==a&&"rating"!==a||"string"!==typeof g||(g=bb(g));if("url"===a||"imageUrl"===a)g=fc(g);"_id"!==a&&"sku"!==a&&"orderId"!==a||"number"!==typeof g||(g=g.toString());!e||"string"!==typeof g||"_id"!==a&&"sku"!==a&&"orderId"!==a&&"alternateId"!==a&&"parentId"!==a||(g=g.toUpperCase());"string"===typeof g&&(0<=g.indexOf("&")&&(e=document.createElement("textarea"),Object.assign(e,{innerHTML:g}),g=e.value),g=g.trim());"description"===a&&"string"===typeof g&&
200<g.length&&(g=g.substr(0,197)+"...");"quantity"!==a&&"inventoryCount"!==a&&"numRatings"!==a||"string"!==typeof g||(g=Ld(g));return g},gc=function(a){document.addEventListener(n.CustomEvents.OnInitSitemap,function(){a("sitemap_reinit")},{once:!0})},Hf=function(a){return P.some(function(b){return b.consent.purpose===a.purpose&&b.consent.status===a.status})},Ia=function(a){return q.beaconConfig.trackAnonymousVisitors||mf(a)?!Hf({purpose:Wb.Personalization,status:n.ConsentStatus.OptOut})&&q.beaconConfig.sendEvents:
(r.debug("An anonymous event has been blocked. trackAnonymous has been turned off and event has no named user."),!1)},D=0,H=-1,W,X,Ce=function(a){return Ia(a)?Bd.send(vf(a)):Promise.resolve(a)},If={setupActivityTimers:Sa,activityRegistered:Aa,setUserInactive:Ta};(function(a){a.ViewItem="View Item";a.ViewItemOutOfStock="View Item Out Of Stock";a.ViewItemDetail="View Item Detail";a.QuickViewItem="Quick View Item";a.StopQuickViewItem="Stop Quick View Item";a.ViewCategory="View Category";a.ViewTag="View Tag";
a.AddToCart="Add To Cart";a.ViewCart="View Cart";a.Purchase="Purchase";a.Share="Share";a.Review="Review";a.Comment="Comment";a.Favorite="Favorite";a.Search="Search";a.SearchViewResults="Search View Results";a.SearchClick="Search Click";a.ClickThrough="Click Through";a.UpdateLineItem="Update Line Item";a.RemoveFromCart="Remove From Cart";a.ViewBanditItems="View Bandit Items"})(n.ItemAction||(n.ItemAction={}));var Jf=function(){function a(b,e){Ka(this,a);this.baseURL=b;this.eventRateLimiter=e||new qd({globalLimit:q.beaconConfig.actionRateLimiterConfig.globalLimit,
globalTimeRange:q.beaconConfig.actionRateLimiterConfig.globalTimeRange,perInteractionLimit:q.beaconConfig.actionRateLimiterConfig.perActionLimit,perInteractionTimeRange:q.beaconConfig.actionRateLimiterConfig.perActionTimeRange})}La(a,[{key:"handleSpecialEvent",value:function(a){var b=a.interaction&&a.interaction.name?a.interaction.name:a.itemAction;if(b===n.ItemAction.QuickViewItem||b===ja.QuickViewCatalogObject)k.result=y({},k.result,{backgroundPage:k.result.backgroundPage||k.result.currentPage,
currentPage:y({},a)}),b===n.ItemAction.QuickViewItem&&(k.result.currentPage.action=a.action||n.ItemAction.QuickViewItem,k.result.currentPage.itemAction=n.ItemAction.QuickViewItem);else if(b===n.ItemAction.StopQuickViewItem||b===za.StopQuickViewCatalogObject)k.result=y({},k.result,{backgroundPage:null,currentPage:k.result.backgroundPage||k.result.currentPage})}},{key:"handlePersistedIdentityInResponse",value:function(a){var b={},g=a.persistedUserId;a=a.anonAffinityId;if(g){var h=g.entityId;g=g.accountId;
h&&(b.persistedUserId=h);g&&(b.persistedAccountId=g)}a&&a!==b.affinityId&&(b.affinityId=a);Y(b)}},{key:"handlePerformanceTimingBeforeEvent",value:function(){Lc();if(!Ed){x.sdkLoadTime=Math.round((Gd()||{}).duration)||null;window.evergageBeaconParseTimeStart&&window.window.evergageBeaconParseTimeEnd&&(x.sdkParseTime=window.evergageBeaconParseTimeEnd-window.evergageBeaconParseTimeStart);var a=Gd();a&&void 0!=a.domainLookupEnd&&void 0!=a.domainLookupStart&&(x.sdkDnsTime=Math.round(a.domainLookupEnd-
a.domainLookupStart));Ed=!0}}},{key:"handlePerformanceTimingInResponse",value:function(){x.networkTime=Math.round((Fd()||{}).duration)||null;var a=Fd();a&&(x.eventDnsTime=Math.round(a.domainLookupEnd-a.domainLookupStart)||null);Ab();Sa()}},{key:"handleDebug",value:function(a){a.interaction&&a.interaction.name&&a.debug&&a.debug.explanations&&(a.explain=a.debug.explanations,delete a.debug.explanations)}},{key:"onEventSend",value:function(a){var b=this;this.handlePerformanceTimingBeforeEvent();document.dispatchEvent(new CustomEvent(n.CustomEvents.OnEventSend,
{detail:{actionEvent:a},cancelable:!0}))&&document.dispatchEvent(new CustomEvent(la.OnBeforeEventSend,{detail:{actionEvent:a},cancelable:!0}))?(this.handleDebug(a),this.handleSpecialEvent(a),r.debug("Sending event: ",a),this.send(a).then(function(e){Ic(a);(a.pageView||a.flags&&a.flags.pageView)&&b.handlePerformanceTimingInResponse();b.handlePersistedIdentityInResponse(e);r.debug("Received event response: ",e);if(e.campaignResponses){var g=e.campaignResponses.map(function(a){return a.experienceId});
k.campaignResponses=[].concat(ib(e.campaignResponses),ib(k.campaignResponses.filter(function(a){return!g.includes(a.experienceId)})))}document.dispatchEvent(new CustomEvent(n.CustomEvents.OnEventResponse,{detail:{response:e,actionEvent:a}}));document.dispatchEvent(new CustomEvent(la.OnEventResponse,{detail:{response:e,actionEvent:a}}))}).catch(function(a){w(a,"Server Response")})):r.debug("MCIS Module onBeforeEventSend cancelled.")}},{key:"send",value:function(a){var b=this;return new Promise(function(e,
h){if(b.eventRateLimiter.isTriggerLimitExceeded(a.action||a.interaction&&a.interaction.name))h(Error("Event Rate Limiter triggered"));else{try{var g=JSON.stringify(a)}catch(pa){return h(pa)}var k=new XMLHttpRequest;k.onload=function(){if(200<=this.status&&300>this.status)try{var a=JSON.parse(k.response);e(a)}catch(xc){h(Fb(xc,{status:this.status,statusText:k.statusText}))}else h(Fb("Response was not OK: ".concat(k.responseText),{status:this.status,statusText:k.statusText}))};k.onerror=function(){if(""===
k.responseType||"text"===k.responseType){var a=k.responseText||k.statusText;if(a){h(Fb("Response error: ".concat(a),{status:this.status,statusText:k.statusText}));return}}r.debug("An error was sent with no text.                                      This is un-actionable so it is being logged instead of written.")};if(a.debug&&a.debug.explanations||a.explain)k.withCredentials=!0;if("true"==ec("isReadableEvent"))b.sendPost(k,b.baseURL,g);else try{if(!/^[\x20-\x7E]+$/.test(g))throw Error("GET request payload contains non-ASCII characters, try sending POST request");
var l=encodeURIComponent(window.btoa(g)),n=b.baseURL+"?event="+l;if(8192<n.length)throw Error("GET request URL exceeds 8192 characters, try sending POST request");b.sendGet(k,n)}catch(pa){b.sendPost(k,b.baseURL,g)}}})}},{key:"sendGet",value:function(a,e){a.open("GET",e,!0);a.setRequestHeader("Accept","application/json, text/javascript, */*; q=0.01");a.send()}},{key:"sendPost",value:function(a,e,g){a.open("POST",e,!0);a.setRequestHeader("Accept","application/json, text/javascript, */*; q=0.01");a.setRequestHeader("Content-Type",
"application/x-www-form-urlencoded");a.send("event="+encodeURIComponent(g))}}]);return a}(),Ja,Od=function(a){return(a.contentZones||[]).reduce(function(a,e){e=ic(e);"string"===typeof(e||{}).name&&""!==(e||{}).name&&a.push(e);return a},[])},Pd=function(a){return(a.contentZones||[]).reduce(function(a,e){e=ic(e);"string"===typeof(e||{}).name&&""!==(e||{}).name&&a.push((e||{}).name);return a},[])},ic=function(a){var b=!(a||{}).selector||0<B((a||{}).selector).length;return y({},a,{selectorFound:b})},
Qd=function(a){var b=(k.result.matchedConfig||{}).contentZones;return b?(b=b.find(function(b){return b.name===a}))&&b.selector?b.selector:null:null},cb,Sd=function(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:!0;db();Rd(a)&&(cb=setInterval(function(){var b=!1,e=(new Date).getTime(),g=k.result.matchedConfig||{},h=g.listeners||[];g=g.contentZones||[];a&&(h=h.map(function(a){if(a.selectorFound)return a;a=Ya(a);b=a.selectorFound||b;return a}));g=g.map(function(a){if(a.selectorFound)return a;
a=ic(a);b=a.selectorFound||b;return a});b&&Object.assign(k.result.matchedConfig,y({},k.result.matchedConfig,{contentZones:g,listeners:h}));(50<(new Date).getTime()-e||!Rd(a))&&db()},1E3))},Rd=function(a){if(k.result.matchedConfig){var b=k.result.matchedConfig,e=b.listeners;b=b.contentZones;var g,h=!1;e&&a&&(g=!!e.filter(function(a){return!a.selectorFound}).length);b&&(h=!!b.filter(function(a){return!a.selectorFound}).length);return g||h}return!1},db=function(){"number"===typeof cb&&clearInterval(cb);
cb=null},Kf=function(){k.result&&k.result.matchedConfig&&k.result.matchedConfig.listeners&&k.result.matchedConfig.listeners.forEach(function(a){B(a.selector).off(a.bind)})},Td={_id:!0,id:!0,currency:!0,inventoryCount:!0,price:!0,tagType:!0,type:!0},jc=function(){var a=0<B('script[src*="//translate.googleusercontent.com"]').length,b=0<B("html.translated-ltr").length||0<B("html.translated-rtl").length;if(a||b)return r.debug("page is translated"),!0;try{var e=0<B(window.parent.document).find('script[src*="//www.microsofttranslator.com"]').length,
g=0<B(window.parent.document).find('frame[src*="//www.worldlingo.com"]').length;if(e||g)return r.debug("page is translated"),!0;r.debug("page is not translated");return!1}catch(h){return r.debug("exception caught, assuming page is untranslated "+h),!1}},Lf=function(a){Object.keys(a).forEach(function(b){var e=a[b];Object.keys(e).forEach(function(a){Td[a]||delete e[a]})});return a},Mf=function(a){Object.keys(a).forEach(function(b){Td[b]||delete a[b]});return a},Ud=function(){return k.config&&k.config.settings&&
k.config.settings.truncateTranslated&&jc()},Vd=function(a){(1<arguments.length&&void 0!==arguments[1]?arguments[1]:1)&&ed(a);if(!Ia(a))return Promise.resolve(a);Nf(a);Of(a);Ja.onEventSend(a);return new Promise(function(a){document.addEventListener(n.CustomEvents.OnEventResponse,function(b){b&&b.detail&&b.detail.response&&a(b.detail.response)})})},Nf=function(a){var b=K(),e=ua(a.user||{},["anonymousId"]);a.user=y({},e||{},{anonId:b.uuid});Wd(a)},Wd=function(a){var b=K();b.persistedUserId&&(a.user.encryptedId=
b.persistedUserId);b=K();a.account=a.account||{};b.persistedAccountId&&(a.account.encryptedId=b.persistedAccountId);if(b=ec("evergageTestMessages"))a.debug?a.debug.testMessages=b:a.debug={testMessages:b};a.source=y({},a.source||{},{beaconVersion:16,configVersion:q.endpointConfig.siteConfigVersion,contentZones:Pf(a.source,a.pageView||(a.flags||{}).pageView)});if(x.domLoadTime||x.pageLoadTime||x.sdkParseTime||x.sdkLoadTime||x.sdkDnsTime)a.performance=y({},x.domLoadTime&&{domLoadTime:x.domLoadTime},
{},x.pageLoadTime&&{pageLoadTime:x.pageLoadTime},{},x.sdkParseTime&&{sdkParseTime:x.sdkParseTime},{},x.sdkLoadTime&&{sdkLoadTime:x.sdkLoadTime},{},x.sdkDnsTime&&{sdkDnsTime:x.sdkDnsTime})},Pf=function(a,b){return(a.contentZones||[]).reduce(function(a,g){!b&&"object"===A(g)&&(g||{}).name&&r.warn("Using content zone objects in 'sendEvent' will soon be deprecated in favor of zone names as strings");g="string"===typeof g&&""!==g?g:(g||{}).name;"string"===typeof g&&""!==g&&a.push(g);return a},[])},Of=
function(a){a.catalog&&0<Object.keys(a.catalog).length&&Object.keys(a.catalog).forEach(function(b){if(a.catalog[b]){if(a.catalog[b].dimensions&&a.catalog[b].relatedCatalogObjects)return w(Error("Catalog cannot include both dimensions and relatedCatalogObjects"),"Sitemap"),!1;var e=a.catalog[b].relatedCatalogObjects||a.catalog[b].dimensions;e&&"object"===A(e)&&Object.keys(e).forEach(function(a){if(!Array.isArray(e[a]))return w(Error("".concat(a," is not an array. Related Catalog Objects must have type of string[]")),
"Sitemap"),!1})}});return!0},Qf=function(a){a&&("catalogObject"in a?eb(a.catalogObject):"lineItem"in a?eb(a.lineItem):"lineItems"in a?a.lineItems.map(function(a){return eb(a)}):"order"in a&&eb(a.order))},eb=function(a){if("object"===A(a))for(var b=0,e=Object.keys(a);b<e.length;b++){var g=e[b],h=a[g];if("lineItems"===g&&Array.isArray(h))h.map(function(a){a.catalogObjectId&&"string"===typeof a.catalogObjectId&&(a.catalogObjectId=a.catalogObjectId.trim())});else if("relatedCatalogObjects"===g){g=0;for(var k=
Object.keys(h);g<k.length;g++){var l=k[g];Array.isArray(h[l])&&(h[l]=h[l].map(function(a){if("string"===typeof a)return a.trim()}))}}else"catalogObjectId"!==g&&"id"!==g||"string"!==typeof h||(a[g]=h.trim())}},fb=function(a){a:{var b=a,e=k.result.matchedConfig;try{b=e&&e.onActionEvent?e.onActionEvent(b):b;if("object"===A(b)){a=b;break a}w(Error("onActionEvent failed for the ".concat(k.result.matchedConfig.name," page config. Must return an object or null.")),"Site-wide Javascript")}catch(g){w(Error("onActionEvent failed for the ".concat(k.result.matchedConfig.name,
" page config. ").concat(g.message,".")),"Site-wide Javascript")}a=void 0}a:{b=a;e=k.config;try{b=e.global&&e.global.onActionEvent?e.global.onActionEvent(b):b;if("object"===A(b)){a=b;break a}w(Error("onActionEvent failed for the global page config. Must return an object or null."),"Site-wide Javascript")}catch(g){w(Error("onActionEvent failed for the global page config. ".concat(g.message,".")),"Site-wide Javascript")}a=void 0}return a.action===ra.MetadataUpdate?Vd(a,!1):Vd(a)},Xd=function(){k.config=
y({},k.config,{},N);db()},Yd=function(a){a=a.detail.actionEvent;try{var b=JSON.parse(JSON.stringify(a))}catch(g){w(g,"Copy ActionEvent")}if(b){var e=t;k.result=y({},k.result,{},e,{},{currentPage:k.result.currentPage});a===e.currentPage&&(k.result.currentPage=b);!Ia(a)||!k.config.settings.runOnTranslatedPage&&jc()||(b.interaction&&b.interaction.catalogObject&&Ud()&&Mf(b.interaction.catalogObject),Qf(b.interaction),Wd(b),b&&b.source&&Array.isArray(b.source.contentZones)&&0<b.source.contentZones.length||
(a=t.matchedConfig)&&b.pageView&&(k.result.matchedConfig=y({},a,{contentZones:Od(a)}),k.result.currentPage=y({},k.result.currentPage||{},{source:y({},k.result.currentPage.source||{},{contentZones:Pd(a)})}),b.source.contentZones=k.result.currentPage.source.contentZones,Sd(!1)),Ja.onEventSend(b))}else r.warn("MCIS Module cannot parse event")},Zd=function(a){k.result.matchStatus=t.matchStatus;document.dispatchEvent(new CustomEvent(n.CustomEvents.OnPageMatchStatusUpdated,{detail:{matchStatus:a.detail.matchStatus}}))},
$d=function(a){if(a&&a.detail){var b=a.detail.error;var e=a.detail.context;document.dispatchEvent(new CustomEvent(n.CustomEvents.OnException,{detail:{error:b,context:e}}));a={};bc(a);cc(a);a[".em"]=Ha(b.message||b);a[".es"]=e;var g=window.navigator.userAgent.toLowerCase();e="unknown";var h="";switch(!0){case -1<g.indexOf("edge"):e="ie";h="edge";break;case -1<g.indexOf("trident"):e="ie";h="trident";break;case -1<g.indexOf("chrome")&&!!window.chrome:h=e="chrome";break;case -1<g.indexOf("firefox"):h=
e="mozilla";break;case -1<g.indexOf("safari"):h=e="safari"}"unknown"!==e?(g=(new RegExp("".concat(h,"/(.*?)s"),"gm")).exec(g),g=parseInt(!!g&&g[1]),g=isNaN(g)?null:g):g=null;a[".vt"]=e;g&&(a[".vn"]=g);switch(e){case "safari":zd(a,b,nf);break;case "mozilla":zd(a,b,of);break;default:b&&b.stack&&"string"===typeof b.stack&&(b=b.stack.split("\n")[1],b=b.substring(b.indexOf("at ")+3).match(/(.*) \((.*):(\d+):(\d+)\)/),Array.isArray(b)&&yd(a,{header:b[1],fileName:b[2],line:b[3],column:b[4]}))}Ia(a)&&ab.send(a)}},
ae=function(a){document.dispatchEvent(new CustomEvent(n.CustomEvents.OnConsentRevoke,{detail:{revokedConsent:a.detail.revokedConsent}}))},be=function(a){if(a.detail&&a.detail.newAnonymousId){var b=K();a=a.detail.newAnonymousId;b.uuid!==a&&Y({uuid:a})}},Rf=function(a){var b=a.detail.actionEvent;b.interaction&&b.interaction.name===ra.MetadataUpdate&&(a.preventDefault(),fb({action:ra.MetadataUpdate,consents:b.consents,source:b.source,user:b.user}))},kc=function(){document.removeEventListener(v.OnInitSitemap,
Xd);document.removeEventListener(v.OnEventSend,Yd);document.removeEventListener(v.OnPageMatchStatusUpdated,Zd);document.removeEventListener(v.OnException,$d);document.removeEventListener(v.OnConsentRevoke,ae);document.removeEventListener(v.OnSetAnonymousId,be)},Sf=function(a){return(a.listeners||[]).map(function(a){return Ya(a)})},ce=function(a){jd(a);document.dispatchEvent(new CustomEvent(n.CustomEvents.OnInitSitemap,{detail:{sitemapConfig:k.config}}))},ee=function(a){de(a);return!0},fe=function(a){k.result.matchedConfig=
y({},a,{contentZones:Od(a),listeners:Sf(a)});var b=k.result,e=k.result.currentPage||{};var g="function"===typeof a.action?a.action():a.action;var h=a.catalog?a.itemAction||n.ItemAction.ViewItem:null,m=a.name;var l="function"===typeof a.locale?a.locale():a.locale;b.currentPage=y({},e,{action:g,itemAction:h,source:{pageType:m,locale:l,contentZones:Pd(a)},flags:{pageView:!0},user:{},performance:{},debug:{}});return Tf(a)},Tf=function(a){return a.itemAction===n.ItemAction.ViewCart||a&&a.cart&&a.cart.complete?
Uf(a).then(function(a){k.result.currentPage.itemAction=n.ItemAction.ViewCart;k.result.currentPage.cart=a}):a.itemAction===n.ItemAction.Purchase||a&&a.order?Vf(a).then(function(a){k.result.currentPage.itemAction=n.ItemAction.Purchase;k.result.currentPage.order=a}):Wf(a).then(function(a){k.result.currentPage.catalog=a})},Uf=function(a){var b={};if(!a.catalog&&!a.cart&&!a.order)return Promise.resolve(b);if(a.cart)var e=a.cart;else if(a.order||a.catalog){var g={},h=a.order||a.catalog;Object.keys(h).forEach(function(a){var b=
h[a];b&&b.lineItems&&(g[a]=b.lineItems)});e={complete:g}}if(e.complete){a=e.complete;for(var k in a)return Array.isArray(k.match(/[A-Z]/))?"Product"!==k?(w(Error("Item type must be Product"),"Sitewide Javascript"),Promise.resolve(b)):Af(a[k]):(w(Error("Item types must be capitalized. Did you mean ".concat(k.replace(/^\w/,function(a){return a.toUpperCase()}),"?")),"Sitewide Javascript"),Promise.resolve(b))}},Vf=function(a){var b={};if(!a.catalog&&!a.order)return Promise.resolve(b);a=a.order||a.catalog;
for(var e in a)return Array.isArray(e.match(/[A-Z]/))?"Product"!==e?(w(Error("Item type must be Product"),"Sitewide Javascript"),Promise.resolve(b)):Ef(a[e]):(w(Error("Item types must be capitalized. Did you mean ".concat(e.replace(/^\w/,function(a){return a.toUpperCase()}),"?")),"Sitewide Javascript"),Promise.resolve(b))},Wf=function(a){var b={};if(!a.catalog)return Promise.resolve(b);for(var e in a.catalog)return Array.isArray(e.match(/[A-Z]/))?Xf(a.catalog[e],e):(w(Error("Item types must be capitalized. Did you mean ".concat(e.replace(/^\w/,
function(a){return a.toUpperCase()}),"?")),"Sitewide Javascript"),Promise.resolve(b))},Xf=function(a,b){return Df(a,b).then(function(a){Object.keys(a).forEach(function(e){a[e]._id||w(Error("Invalid ".concat(b,", missing _id for the ").concat(k.result.matchedConfig.name," page config.")),"Site-wide Javascript")});return Ud()?Lf(a):a})},Yf=function b(){for(var e=arguments.length,g=Array(e),h=0;h<e;h++)g[h]=arguments[h];return g.reduce(function(e,g){Object.keys(g).forEach(function(h){var k=e[h],l=g[h];
Array.isArray(k)&&Array.isArray(l)?Object.assign(e,L({},h,k.concat.apply(k,ib(l)))):k&&"object"===A(k)&&l&&"object"===A(l)?Object.assign(e,L({},h,b(k,l))):Object.assign(e,L({},h,l))});return e},{})},ge=function(b){var e=k.config.global||{},g=e.onActionEvent;delete e.onActionEvent;b=Yf(e,b);e.onActionEvent=g;return b},bg=function(b){try{return Zf(b.global),$f(b.pageTypeDefault),ag(b.pageTypes),!0}catch(e){return w(Error(e),"Sitemap"),!1}},$f=function(b){b&&Object.keys(b).forEach(function(b){if("contentZones"!==
b&&"listeners"!==b&&"locale"!==b&&"name"!==b&&"onActionEvent"!=b)throw Error("".concat(b," is not a valid default config attribute."));})},Zf=function(b){b&&Object.keys(b).forEach(function(e){if("contentZones"!==e&&"listeners"!==e&&"locale"!==e&&"onActionEvent"!=e)throw Error("".concat(e," is not a valid global config attribute."));if("contentZones"===e&&b[e]&&!Array.isArray(b[e]))throw Error("global config: contentZones must be provided as an array of objects");})},ag=function(b){b.forEach(function(b){if(!b.name||
!b.isMatch)throw Error("All page configs must have a name and isMatch attribute defined");if(b&&b.contentZones&&!Array.isArray(b.contentZones))throw Error("".concat(b.name," pageType config: contentZones must be provided as an array of objects"));})},cg=function(){var b=k.result;fb(k.result.currentPage);k.result=b},de=function(b){ce(b);Yc();Kf();db();if(k.config.settings.runOnTranslatedPage||!jc())k.result.currentPage=null,bg(b)&&Wa(b.pageTypes).then(ge).then(fe).then(cg).then(function(){return Sd()}).catch(function(b){"sitemap_reinit"!==
b&&w(Error("Unhandled exception: ".concat(b)),"Site-wide Javascript")})};document.addEventListener(v.OnInit,function(b){var e=b.detail.sdkConfig;if("running"==q.beaconState)V("reinitializing MCIS Module");else{b=e.cookieDomain;var g=e.consents;e=ua(e,["cookieDomain","consents"]);b&&(q.beaconConfig.cookieDomain=b);g&&(q.beaconConfig.consents=g);var h=q.endpointConfig;b=h.account;g=h.dataset;q.beaconConfig=y({},q.beaconConfig,{trackerUrl:h.trackerUrl},e);e=rd();h=document.dispatchEvent(new CustomEvent(n.CustomEvents.OnInit,
{detail:{beaconConfig:e},cancelable:!0}));document.dispatchEvent(new CustomEvent(la.OnInit,{detail:{sdkConfig:e}}));h?(Q.setCookieHash(b,g,ka),h=Q.read("a"),e=Q.read("n"),ud(h)?(Y(td(h)).uuid!==T&&ac(),r.debug("Loaded visitor record from cookie: ".concat(JSON.stringify(K())))):"string"===typeof h&&0<h.length||null!=e&&"object"===A(e)?(h&&"object"!==A(h)&&(Q.remove("a",{domain:q.beaconConfig.cookieDomain}),Q.remove("a",{domain:$b(location.hostname)}),h=h.split("."),0<h.length&&(Y({uuid:h[0]}),1<h.length&&
h[1]&&Y({affinityId:h[1]}))),e&&"object"===A(e)&&(Q.remove("n",{domain:q.beaconConfig.cookieDomain}),Q.remove("n",{domain:$b(location.hostname)}),e.puid&&"string"===typeof e.puid&&Y({persistedUserId:e.puid}),e.paid&&"string"===typeof e.paid&&Y({persistedAccountId:e.paid})),ac(),r.debug("Classic cookie detected with anonymousId: ".concat(K().uuid))):(Wc()?Y({uuid:T}):(Y({uuid:Ec()}),ac()),r.debug("Created new visitor record. anonymousId: ".concat(K().uuid))),K(),e=q.beaconConfig.trackerUrl,Ja=new Jf(e+
"/api2/event/"+q.endpointConfig.dataset,Ja?Ja.eventRateLimiter:null),Ad=new dc(e+"/msreceiver"),Bd=new dc(e+"/pr"),ab=new yf(e+"/er",ab?ab.eventRateLimiter:null),kc(),document.addEventListener(v.OnInitSitemap,Xd),document.addEventListener(v.OnEventSend,Yd),document.addEventListener(v.OnPageMatchStatusUpdated,Zd),document.addEventListener(v.OnException,$d),document.addEventListener(v.OnConsentRevoke,ae),document.addEventListener(v.OnSetAnonymousId,be),If.setupActivityTimers(),r.debug("Initialized Tracking Beacon v".concat(16,
" for account[").concat(b,"] dataset[").concat(g,"]")),q.beaconState="running"):(kc(),r.debug("Cancelling activity tracking."),clearTimeout(W),W=-1,ca(window,"unload",Cb),ca(window,"blur",Db),ca(window,"focus",Eb),ca(document,"mousemove keydown scroll click",Aa),r.debug("IS Module initialization canceled due to a preventDefault call in a listener for the OnInit event."))}});document.addEventListener(v.OnShutDown,function(b){b=b.detail.message;r.info("Shutting down MCIS Module: ".concat(b));document.dispatchEvent(new CustomEvent(n.CustomEvents.OnShutDown,
{detail:{message:b}}));q.beaconState="shutDown";kc()});document.addEventListener(v.OnBeforeInit,function(b){Sc=q.beaconConfig.secureCookie?!0:!1});var he=function(){var b=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};return new Promise(function(e){document.addEventListener(v.OnBeforeEventSend,Rf);Ub(b).catch(function(b){});"running"===q.beaconState&&e(q)})},ie=function(b){b.campaignStats.forEach(function(b){var e=k.campaignResponses.find(function(e){return e.experienceId===b.experienceId});
document.dispatchEvent(new CustomEvent(n.CustomEvents.OnStatSend,{detail:{campaignStat:b,campaignResponse:e}}));document.dispatchEvent(new CustomEvent(la.OnStatSend,{detail:{campaignStat:b,campaignResponse:e}}))});return Ia(b)?Ad.send(uf(b)):Promise.resolve(b)};window.SalesforceInteractions&&(window.SalesforceInteractions.mcis={extractFirstGroup:sa.extractFirstGroup,getLastPathComponentWithoutExtension:sa.getLastPathComponentWithoutExtension,getParameterByName:sa.getParameterByName,getValueFromNestedObject:sa.getValueFromNestedObject,
buildLineItemFromPageState:zf,cookie:sa.cookie,sendStat:ie,getContentZoneSelector:Qd,getSdkConfig:rd,getSitemapConfig:wd,getSitemapResult:vd,getCampaignResponses:xd,CustomEvents:la,ConsentPurpose:Wb,CatalogObjectInteractionName:za});n.ConsentPurpose=Wb;n.DisplayUtils=pd;n.addEventListener=function(b){r.warn("Evergage.addEventListener is deprecated. Use the Evergage.CustomEvents.OnEventSend event instead.");return null};n.addResponseListener=function(b){r.warn("Evergage.addResponseListener is deprecated. Use the Evergage.CustomEvents.OnEventResponse event instead.");
return null};n.build=function(b){Wa(b.pageTypes).then(ge).then(fe).catch(function(b){"sitemap_reinit"!==b&&w(Error("Unhandled exception: ".concat(b)),"Site-wide Javascript")})};n.cashDom=B;n.configure=function(b,e){"running"==q.beaconState&&r.debug("Unbinding signal subscriptions.");q.beaconState="initializing";q.endpointConfig=y({},q.endpointConfig,{},b);var g=q.endpointConfig;b=g.account;var h=g.dataset;g=g.siteConfigVersion;if(!b||!h)return V("account/dataset undefined. Check your beacon configuration.");
if(!g)return V("beacon config version undefined");q.endpointConfig.cdnUrl||(q.endpointConfig.cdnUrl="https://".concat(lf));if(!q.endpointConfig.cdnUrl)return V("cdnUrl undefined. Check your beacon configuration.");q.endpointConfig.trackerUrl||(g=q.endpointConfig,b="https://".concat({account:b,dataset:h}.account,".").concat("evergage.com"),g.trackerUrl=b);if(!q.endpointConfig.trackerUrl)return V("trackerUrl undefined. Check your beacon configuration.");q.beaconConfig.trackerUrl=q.endpointConfig.trackerUrl;
q.beaconConfig=y({},q.beaconConfig,{},e);q.beaconState="configured"};n.getCampaignResponses=xd;n.getConfig=Yb;n.getConsents=$c;n.getContentZoneSelector=Qd;n.getCurrentPage=Jc;n.getLoggingLevel=Dc;n.getSitemapConfig=wd;n.getSitemapResult=vd;n.getState=$a;n.getVersion=function(){return 16};n.init=he;n.initSitemap=ee;n.listener=function(b,e,g){var h="object"===A(g)?function(){r.warn("ListenerOptions are deprecated. Please use a callback in the Listener instead.");var b=y({},g,{user:{}});fb(b)}:g;return Fc(b,
e,h)};n.log=r;n.reinit=function(){var b=P.map(function(b){return b.consent});he(y({},Yb(),{consents:b})).then(function(){ee(k.config)})};n.removeCookies=function(b){b&&Q.setCookieHash(q.endpointConfig.account,q.endpointConfig.dataset,b);document.dispatchEvent(new CustomEvent(v.OnClearCookie,{detail:{options:{domain:b||q.beaconConfig.cookieDomain||$b(location.hostname)}}}))};n.resolvers=nd;n.runSpecificConfig=function(b){Object.assign(k.config,{pageTypes:[b]});de(k.config)};n.sendEvent=fb;n.sendException=
w;n.sendStat=ie;n.setConfig=ce;n.setLoggingLevel=Cc;n.shutDown=V;n.updateConsents=Qb;n.util=sa;return n}({});
window.evergageBeaconParseTimeEnd = (new Date().getTime());

(function configureEvergage() {
    try {
       Evergage.configure({
           account: "schoolspecialty",
           dataset: "production",
           cdnUrl: "https://cdn.evergage.com",
           trackerUrl: "https://schoolspecialty.us-4.evergage.com",
           siteConfigVersion: "45"
       },{"allowBotTraffic":false,"corsAllowedOrigins":["*"],"defaultCurrency":"USD","defaultLocale":null,"disableQtipWindowScroll":false,"doNotStoreCookiesRequireProvidedAnonId":false,"doNotTrackPingRequestsForActions":false,"enableCorsRestrictedOrigins":false,"enableMessageRotation":false,"enableRememberMeUserIds":false,"enableTemplateEsc":false,"hideContentSections":false,"hideContentSectionsMillis":2500,"hidePagesForRedirect":false,"hidePagesForRedirectMillis":1000,"identityAttributes":["emailAddress","hashedEmail","pid_nid","profileId","sfdcContactId","sfmcContactKey","sfmcSubscriberId"],"lastModified":1643139074460,"preventSensitiveDataCapture":false,"rememberMeUserIdsMillis":63072000000,"secureCookie":false,"sendErrorEvents":true,"showPoweredBy":false,"siteConfigExecBeforePageReady":false,"spaRouteChangeTimeout":500,"trackAnonymousVisitors":true,"trackContextualRelatedItems":false,"trackSubdomainAsCompany":false,"trackUnknownPagesByTitle":false,"treatHashChangeAsPageLoad":false}       );
    } catch (e) {
          console.error(e);
    }
})();


try {
    const CAMPAIGN_STAT_ATTRIBUTE = {
    CAMPAIGN: "data-evg-campaign-id",
    EXPERIENCE: "data-evg-experience-id",
    USER_GROUP: "data-evg-user-group",
    CLICKTHROUGH: "data-evg-clickthrough",
    IGNORE_CLICKTHROUGH: "data-evg-ignore-clickthrough",
    DISMISSAL: "data-evg-dismissal",
    ITEM: "data-evg-item-id",
    ITEM_TYPE: "data-evg-item-type"
};

const CAMPAIGN_STAT_TYPE = {
    IMPRESSION: "Impression",
    CLICKTHROUGH: "Clickthrough",
    DISMISSAL: "Dismissal"
};

const CAMPAIGN_STAT_USER_GROUP = {
    TEST: "Test",
    CONTROL: "Control"
};

document.addEventListener(Evergage.CustomEvents.OnTemplateDisplayEnd, (event) => {
    if (validateOnTemplateDisplayEndEvent(event)) {
        const payload = event.detail.payload;
        const campaignElement = getCampaignElementFromPayload(payload);
        sendImpression(payload, campaignElement);
        bindCampaignClickthroughsAndDismissals(campaignElement);
    }
});

const sendImpression = (payload, campaignElement) => {
    const userGroup = payload.userGroup;
    const stat = {
        control: userGroup === CAMPAIGN_STAT_USER_GROUP.CONTROL,
        experienceId: payload.experience,
        stat: CAMPAIGN_STAT_TYPE.IMPRESSION
    };
    const itemStats = generateItemStats(campaignElement);
    if (Object.keys(itemStats).length > 0) {
        stat.catalog = itemStats;
    }
    if (userGroup === CAMPAIGN_STAT_USER_GROUP.CONTROL || (userGroup === CAMPAIGN_STAT_USER_GROUP.TEST && campaignElement.length > 0)) {
        Evergage.sendStat({campaignStats: [stat]});
    } else {
        Evergage.log.warn("campaignStatsTracking.js", "Experience", payload.experience, "not found in DOM.");
    }
};

const generateItemStats = (campaignElement) => {
    const catalogStats = {};
    const itemNodes = Evergage.cashDom(campaignElement).find("[" + CAMPAIGN_STAT_ATTRIBUTE.ITEM_TYPE + "]");
    if (!itemNodes || itemNodes.length === 0) {
        return catalogStats;
    }
    Array.from(itemNodes).forEach(function(itemNode) {
        const itemId = Evergage.cashDom(itemNode).attr(CAMPAIGN_STAT_ATTRIBUTE.ITEM);
        const itemType = Evergage.cashDom(itemNode).attr(CAMPAIGN_STAT_ATTRIBUTE.ITEM_TYPE);
        if (itemId && itemType) {
            if (!catalogStats[itemType]) {
                catalogStats[itemType] = [];
            }
            if (!catalogStats[itemType].includes(itemId)) {
                catalogStats[itemType].push(itemId);
            }
        }
    });
    return catalogStats;
}

const buildCampaignSelector = (experienceId) => {
    return `[${CAMPAIGN_STAT_ATTRIBUTE.EXPERIENCE}='${experienceId}']`
}

const getCampaignElementFromPayload = (payload) => {
    const experienceId = payload.experience;
    const campaignSelector = buildCampaignSelector(experienceId);
    return Evergage.cashDom(campaignSelector);
};

const getCampaignClickthroughAndDismissalElements = (campaignElement) => {
    const experienceId = Evergage.cashDom(campaignElement).attr(`${CAMPAIGN_STAT_ATTRIBUTE.EXPERIENCE}`);
    const campaignSelector = buildCampaignSelector(experienceId);
    return Evergage.cashDom(campaignElement).parent().find(`
        ${campaignSelector}[${CAMPAIGN_STAT_ATTRIBUTE.CLICKTHROUGH}],
        ${campaignSelector} a,
        ${campaignSelector} [${CAMPAIGN_STAT_ATTRIBUTE.CLICKTHROUGH}],
        ${campaignSelector} [${CAMPAIGN_STAT_ATTRIBUTE.DISMISSAL}]
    `);
};

const sendClickthroughOrDismissal = (e) => {
    if (Evergage.cashDom(e.target).closest(`[${CAMPAIGN_STAT_ATTRIBUTE.IGNORE_CLICKTHROUGH}]`).length > 0) {
        return;
    }
    const campaignElement = Evergage.cashDom(e.target).closest(`[${CAMPAIGN_STAT_ATTRIBUTE.EXPERIENCE}]`);
    if (campaignElement.length > 0  && Evergage.cashDom(e.target).closest(`
        a,
        [${CAMPAIGN_STAT_ATTRIBUTE.CLICKTHROUGH}],
        [${CAMPAIGN_STAT_ATTRIBUTE.DISMISSAL}]`).length > 0) {

        const stat = {
            control: campaignElement.attr(CAMPAIGN_STAT_ATTRIBUTE.USER_GROUP) === CAMPAIGN_STAT_USER_GROUP.CONTROL,
            experienceId: campaignElement.attr(CAMPAIGN_STAT_ATTRIBUTE.EXPERIENCE),
            stat: Evergage.cashDom(e.target).closest(`[${CAMPAIGN_STAT_ATTRIBUTE.CLICKTHROUGH}]`).length > 0 || Evergage.cashDom(e.target).closest("a").length > 0
                ? CAMPAIGN_STAT_TYPE.CLICKTHROUGH
                : CAMPAIGN_STAT_TYPE.DISMISSAL
        };

        if (stat.stat === CAMPAIGN_STAT_TYPE.CLICKTHROUGH) {
            const itemClickthroughStats = generateItemClickthroughStats(e.target);
            if (Object.keys(itemClickthroughStats).length > 0) {
                stat.catalog = itemClickthroughStats;
            }
        }

        Evergage.sendStat({campaignStats: [stat]});
    }
};

const generateItemClickthroughStats = (target) => {
    const itemStats = {};
    const itemId = Evergage.cashDom(target).closest("[" + CAMPAIGN_STAT_ATTRIBUTE.ITEM + "]").attr(CAMPAIGN_STAT_ATTRIBUTE.ITEM);
    const itemType = Evergage.cashDom(target).closest("[" + CAMPAIGN_STAT_ATTRIBUTE.ITEM_TYPE + "]").attr(CAMPAIGN_STAT_ATTRIBUTE.ITEM_TYPE);

    if (itemId && itemType) {
        itemStats[itemType] = [itemId];
    }
    return itemStats;
}

const bindCampaignClickthroughsAndDismissals = (campaignElement) => {
    const elements = getCampaignClickthroughAndDismissalElements(campaignElement);
    elements.off("click", sendClickthroughOrDismissal);
    elements.on("click", sendClickthroughOrDismissal);
};

const validateOnTemplateDisplayEndEvent = (event) => {
    if (!event.detail) {
        Evergage.log.warn("campaignStatsTracking.js", "No detail object found for onTemplateDisplayEndEvent", event);
        return false;
    }
    if (!event.detail.payload) {
        Evergage.log.warn("campaignStatsTracking.js", "No payload object found for onTemplateDisplayEndEvent", event);
        return false;
    }
    if (!event.detail.payload.campaign) {
        Evergage.log.warn("campaignStatsTracking.js", "No campaign found in payload object", event.detail);
        return false;
    }
    if (!event.detail.payload.experience) {
        Evergage.log.warn("campaignStatsTracking.js", "No experience found in payload object", event.detail);
        return false;
    }
    if (!event.detail.payload.userGroup) {
        Evergage.log.warn("campaignStatsTracking.js", "No user group found in payload object", event.detail);
        return false;
    }
    return true;
};

} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: Campaign Stats Tracking:campaignStatsTracking.js");
    }
};


try {
    /**
 *  Personalization Flicker Defense
 */
Evergage.FlickerDefender = Evergage.FlickerDefender || (() => {
    const personalizationSectionsSelector = "head > style.evergagePersonalizationSections";

    let personalizedSectionsString = "";
    let sectionsHaveEverBeenHidden = false;
    let hasBeenHidden = false;
    let shouldReshowNow = false;
    let hiddenSections = {};

    const timeoutOptions = {
        pageMatchTimeout: 1000,
        redisplayTimeout: Evergage.getConfig().hideContentSectionsMillis || 2500
    }

    const utils = {
        getGlobalContentZoneSelectors: () => {
            return ((Evergage.getState().config.global || {}).contentZones || [])
                .filter((contentZone) => (contentZone || {}).selector)
                .map((contentZone) => contentZone.selector);
        },
        getPageTypeContentZoneSelectors: () => {
            const { pageTypes } = Evergage.getState().config;
            return pageTypes.length < 1
                ? []
                : pageTypes
                    .map((pageType) => pageType.contentZones || [])
                    .reduce((acc, contentZonesArr) => acc.concat(contentZonesArr), [])
                    .filter((contentZone) => (contentZone || {}).selector)
                    .map((contentZone) => contentZone.selector);
        },
        buildContentZoneSelectors: () => {
            return [
                ...new Set([
                    ...utils.getGlobalContentZoneSelectors(),
                    ...utils.getPageTypeContentZoneSelectors()
                ])
            ];
        },
        addToPersonalizedSectionsString: (selector) => {
            if (typeof selector === "string") {
                try {
                    document.querySelector(selector);
                    if (personalizedSectionsString !== "") {
                        personalizedSectionsString += ", ";
                    }
                    personalizedSectionsString += selector;
                } catch (exception) {
                    Evergage.sendException(exception, "hideSectionsInvalidCSSSelector");
                }
            }
        },
        hasBeenReshown: () => {
            return Evergage.cashDom(personalizationSectionsSelector).length === 0;
        }
    };

    const actions = {
        hideSections: () => {
            if (sectionsHaveEverBeenHidden) return;

            const selectors = utils.buildContentZoneSelectors();
            if (selectors.length === 0) {
                Evergage.log.debug("Evergage: Issue with malformed request in hideSections.");
                return;
            }
            for (const selector of selectors) {
                utils.addToPersonalizedSectionsString(selector);
            }

            if (!personalizedSectionsString) return;

            const head = document.head || document.getElementsByTagName("head")[0];
            const style = document.createElement("style");
            Evergage.cashDom(style)
                .attr({ type: "text/css", class: "evergagePersonalizationSections" })
                .text(`${personalizedSectionsString} { visibility: hidden !important; }`);

            clearTimeout(window.evergageReshowPersonalizedSectionsTimeout);
            window.evergageReshowPersonalizedSectionsTimeout = setTimeout(function () {
                if (utils.hasBeenReshown()) return;
                shouldReshowNow = true;
                actions.reshowPersonalizedSectionsNow();
            }, timeoutOptions.redisplayTimeout);

            head.appendChild(style);
            sectionsHaveEverBeenHidden = true;
        },
        reshowPersonalizedSections: () => {
            if (utils.hasBeenReshown()) return;
            try {
                if (typeof window.requestAnimationFrame === "function") {
                    Evergage.log.info("Evergage: Scheduling for next animation frame redisplay of sections of the page marked for personalization.");
                    window.requestAnimationFrame(actions.reshowPersonalizedSectionsNow);
                } else {
                    actions.reshowPersonalizedSectionsNow();
                }
            } catch (exception) {
                Evergage.sendException(exception, "reshowPersonalizedSections");
            }
        },
        reshowReadyPersonalizedSections: () => {
            Evergage.cashDom(personalizationSectionsSelector).text(`${personalizedSectionsString} { visibility: hidden !important }`);
            Evergage.log.info(`Evergage: Redisplaying the following sections of the page marked for personalization: ${personalizedSectionsString}`);
        },
        reshowAllPersonalizedSections: () => {
            Evergage.cashDom(personalizationSectionsSelector).remove();
            Evergage.log.info("Evergage: Redisplaying outstanding sections of the page marked for personalization.");
        },
        reshowPersonalizedSectionsNow: () => {
            if (utils.hasBeenReshown()) return;
            try {
                if (shouldReshowNow || Object.keys(hiddenSections).length === 0) {
                    actions.reshowAllPersonalizedSections();
                } else if (Object.keys(hiddenSections).length > 0) {
                    personalizedSectionsString = "";
                    for (const contentZone in hiddenSections) {
                        utils.addToPersonalizedSectionsString(hiddenSections[contentZone]);
                    }
                    actions.reshowReadyPersonalizedSections();
                }
            } catch (exception) {
                Evergage.sendException(exception, "reshowPersonalizedSectionsNow");
            }
        }
    };

    const beaconListeners = {
        addOnInit: () => {
            document.addEventListener(Evergage.CustomEvents.OnInit, (domEvent) => {
                clearTimeout(window.evergagePageMatchTimeout);
                window.evergagePageMatchTimeout = setTimeout(function () {
                    const { pageType } = (Evergage.getCurrentPage().source || {});
                    if (utils.hasBeenReshown() || (typeof pageType === "string" && pageType !== "")) return;
                    shouldReshowNow = true;
                    actions.reshowPersonalizedSectionsNow();
                }, timeoutOptions.pageMatchTimeout);
            });
        },
        addPageMatchStatusUpdated: () => {
            document.addEventListener(Evergage.CustomEvents.OnPageMatchStatusUpdated, (domEvent) => {
                if (!hasBeenHidden) {
                    actions.hideSections();
                    if (Evergage.cashDom(personalizationSectionsSelector).length > 0) {
                        hasBeenHidden = true;
                    }
                }
            });
        },
        addOnEventResponse: () => {
            document.addEventListener(Evergage.CustomEvents.OnEventResponse, (domEvent) => {
                const { campaignResponses } = ((domEvent.detail || {}).response || {});
                if ((campaignResponses || []).length >= 1) {
                    personalizedSectionsString = "";
                    for (const campaign of campaignResponses) {
                        const { contentZone } = ((campaign || {}).payload || {});
                        const contentZoneSelector = Evergage.getContentZoneSelector(((campaign || {}).payload || {}).contentZone);
                        if (typeof contentZoneSelector === "string") {
                            hiddenSections[contentZone] = contentZoneSelector;
                            utils.addToPersonalizedSectionsString(contentZoneSelector);
                        }
                    }
                    if (!personalizedSectionsString) {
                        actions.reshowPersonalizedSections();
                        return;
                    }

                    Evergage.cashDom(personalizationSectionsSelector).text(`${personalizedSectionsString} { visibility: hidden !important; }`);
                } else {
                    actions.reshowPersonalizedSections();
                }
            });
        },
        addOnTemplateDisplayEnd: () => {
            document.addEventListener(Evergage.CustomEvents.OnTemplateDisplayEnd, (domEvent) => {
                if (utils.hasBeenReshown()) return;
                const { contentZone } = ((domEvent.detail || {}).payload || {});
                if (typeof contentZone === "string" && hiddenSections[contentZone]) {
                    delete hiddenSections[contentZone];
                }
                actions.reshowPersonalizedSections();
            });
        },
    };

    return {
        setPageMatchTimeout: (millis) => {
            if (typeof millis === "number" && millis >= 0) {
                timeoutOptions.pageMatchTimeout = parseInt(millis);
            } else {
                Evergage.log.warn("flickerDefender.js", "setPageMatchTimeout: Passed argument must be a number and must be greater than or equal to 0", millis);
            }
        },
        setRedisplayTimeout: (millis) => {
            if (typeof millis === "number" && millis >= 0) {
                timeoutOptions.redisplayTimeout = parseInt(millis);
            } else {
                Evergage.log.warn("flickerDefender.js", "setRedisplayTimeout: Passed argument must be a number and must be greater than or equal to 0", millis);
            }
        },
        init: function() {
            for (const key in beaconListeners) {
                beaconListeners[key]();
            }
        }
    };
})();

if (window.SalesforceInteractions && window.SalesforceInteractions.mcis) {
    window.SalesforceInteractions.mcis.FlickerDefender = Evergage.FlickerDefender;
}

if (typeof Evergage.FlickerDefender.init === "function" && (window.frameElement || {}).id !== "siteEditorFrame") {
    Evergage.FlickerDefender.init();
}

} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: Flicker Defender:flickerDefender.js");
    }
};


try {
    !function(e,t){for(var n in t)e[n]=t[n]}(window,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){"use strict";n.r(t),n.d(t,"extend",(function(){return l})),n.d(t,"toString",(function(){return c})),n.d(t,"isFunction",(function(){return s})),n.d(t,"isArray",(function(){return u})),n.d(t,"indexOf",(function(){return p})),n.d(t,"escapeExpression",(function(){return d})),n.d(t,"isEmpty",(function(){return f})),n.d(t,"createFrame",(function(){return h})),n.d(t,"blockParams",(function(){return m})),n.d(t,"appendContextPath",(function(){return g}));const r={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},o=/[&<>"'`=]/g,a=/[&<>"'`=]/;function i(e){return r[e]}function l(e){for(let t=1;t<arguments.length;t++)for(let n in arguments[t])Object.prototype.hasOwnProperty.call(arguments[t],n)&&(e[n]=arguments[t][n]);return e}let c=Object.prototype.toString,s=function(e){return"function"==typeof e};s(/x/)&&(s=function(e){return"function"==typeof e&&"[object Function]"===c.call(e)});const u=Array.isArray||function(e){return!(!e||"object"!=typeof e)&&"[object Array]"===c.call(e)};function p(e,t){for(let n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function d(e){if("string"!=typeof e){if(e&&e.toHTML)return e.toHTML();if(null==e)return"";if(!e)return e+"";e=""+e}return a.test(e)?e.replace(o,i):e}function f(e){return!e&&0!==e||!(!u(e)||0!==e.length)}function h(e){let t=l({},e);return t._parent=e,t}function m(e,t){return e.path=t,e}function g(e,t){return(e?e+".":"")+t}},function(e,t,n){"use strict";const r=["description","fileName","lineNumber","endLineNumber","message","name","number","stack"];function o(e,t){let n,a,i,l,c=t&&t.loc;c&&(n=c.start.line,a=c.end.line,i=c.start.column,l=c.end.column,e+=" - "+n+":"+i);let s=Error.prototype.constructor.call(this,e);for(let e=0;e<r.length;e++)this[r[e]]=s[r[e]];Error.captureStackTrace&&Error.captureStackTrace(this,o);try{c&&(this.lineNumber=n,this.endLineNumber=a,Object.defineProperty?(Object.defineProperty(this,"column",{value:i,enumerable:!0}),Object.defineProperty(this,"endColumn",{value:l,enumerable:!0})):(this.column=i,this.endColumn=l))}catch(e){}}o.prototype=new Error,t.a=o},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.restrictContentZone=t.executeControl=t.handleCampaignResponses=t.renderTemplate=t.resetTemplate=t.registerTemplate=t.executeBundles=void 0;var i=n(10),l=n(3),c=a(n(4)),s=new Map,u=new Map,p=new Set,d=function(){return document.getElementsByTagName("html").length>0&&null!=document.getElementsByTagName("html")[0].getAttribute(c.VE_LOADING_ATTRIBUTE)||null!=document.getElementById(c.VE_ACTIVE_ELEMENT_ID)||"true"===localStorage.getItem(c.VE_INDICATOR_FLAG)||document.location.href.includes(c.TEST_TEMPLATE_PARAMETER)},f=function(e){return s.get(e)},h=function(e,t){return[e,t.campaign,t.experience].join(":")};t.executeBundles=function(e){e&&e.forEach((function(e){try{Function("TemplateService",e.bundle)({registerTemplate:t.registerTemplate})}catch(e){l.dispatchError(e)}}))},t.registerTemplate=function(e){var t=new i.Template(e);s.set(e.name,t)},t.resetTemplate=function(e,t){var n=h(e,t),r=u.get(n);if(r)try{r()}catch(e){l.dispatchError(e)}u.delete(n)},t.renderTemplate=function(e,t){if(s.has(e)){var n=f(e).render(t);u.set(h(e,t),n)}},t.handleCampaignResponses=function(e){d()||e.filter((function(e){return"ng"===e.type})).filter((function(e){return!g(e)})).forEach((function(e){switch(e.userGroup){case"Default":m(e);break;case"Control":t.executeControl(e)}}))};var m=function(e){e.templateNames.forEach((function(n){t.renderTemplate(n,e.payload)}))};t.executeControl=function(e){e.templateNames.forEach((function(t){var n=f(t),r=e.payload;if(n.control)try{var o=n.control(r);l.handleTemplateDispatch(o,r)}catch(e){l.dispatchError(e)}}))};var g=function(e){return e.payload.contentZone&&p.has(e.payload.contentZone)};t.restrictContentZone=function(e){e&&p.add(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.dispatchError=t.handleTemplateDispatch=t.getQueryParam=void 0,t.getQueryParam=function(e){var t=location.search;e=e.replace(/[[]/,"\\[").replace(/[\]]/,"\\]");var n=new RegExp("[\\?&]"+e+"=([^&#]*)").exec(t);return null===n?"":decodeURIComponent(n[1].replace(/\+/g," "))};var r=function(e){document.dispatchEvent(new CustomEvent(window.Evergage.CustomEvents.OnTemplateDisplayEnd,{detail:{payload:e}})),document.dispatchEvent(new CustomEvent(window.SalesforceInteractions.mcis.CustomEvents.OnTemplateDisplayEnd,{detail:{payload:e}}))};t.handleTemplateDispatch=function(e,t){window.Promise&&"function"==typeof window.Promise.resolve?window.Promise.resolve(e).then((function(){r(t)})):r(t)},t.dispatchError=function(e){document.dispatchEvent(new CustomEvent(window.Evergage.CustomEvents.OnException,{detail:{error:new Error(e),context:"Handlebars Template Gear"}}))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.VE_ACTIVE_ELEMENT_ID=t.VE_INDICATOR_FLAG=t.VE_LOADING_ATTRIBUTE=t.TEST_TEMPLATE_PARAMETER=t.TEST_TEMPLATE_STORAGE_KEY=void 0,t.TEST_TEMPLATE_STORAGE_KEY="testTemplate",t.TEST_TEMPLATE_PARAMETER="evergageTestTemplate",t.VE_LOADING_ATTRIBUTE="evergagevisualeditorloading",t.VE_INDICATOR_FLAG="evgVE",t.VE_ACTIVE_ELEMENT_ID="evg_ui-visual-editor"},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";(function(e){var r=n(0),o=n(1);t.a=function(t){t.registerHelper("each",(function(t,n){if(!n)throw new o.a("Must pass iterator to #each");let a,i,l=n.fn,c=n.inverse,s=0,u="";function p(e,n,o){a&&(a.key=e,a.index=n,a.first=0===n,a.last=!!o,i&&(a.contextPath=i+e)),u+=l(t[e],{data:a,blockParams:Object(r.blockParams)([t[e],e],[i+e,null])})}if(n.data&&n.ids&&(i=Object(r.appendContextPath)(n.data.contextPath,n.ids[0])+"."),Object(r.isFunction)(t)&&(t=t.call(this)),n.data&&(a=Object(r.createFrame)(n.data)),t&&"object"==typeof t)if(Object(r.isArray)(t))for(let e=t.length;s<e;s++)s in t&&p(s,s,s===t.length-1);else if(e.Symbol&&t[e.Symbol.iterator]){const n=[],r=t[e.Symbol.iterator]();for(let e=r.next();!e.done;e=r.next())n.push(e.value);for(let e=(t=n).length;s<e;s++)p(s,s,s===t.length-1)}else{let e;Object.keys(t).forEach(t=>{void 0!==e&&p(e,s-1),e=t,s++}),void 0!==e&&p(e,s-1,!0)}return 0===s&&(u=c(this)),u}))}}).call(this,n(5))},function(e,t,n){"use strict";(function(e){t.a=function(t){let n=void 0!==e?e:window,r=n.Handlebars;t.noConflict=function(){return n.Handlebars===t&&(n.Handlebars=r),t}}}).call(this,n(5))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.render=void 0;var r=n(9),o=n(11),a=n(2);function i(){/complete|interactive|loaded/.test(document.readyState)?(r.renderTestTemplate(),o.initPreview()):document.addEventListener("DOMContentLoaded",(function(){r.renderTestTemplate(),o.initPreview()}))}document.addEventListener(window.Evergage.CustomEvents.OnEventResponse,(function(e){a.executeBundles(e.detail.response.compiledCampaignTemplates),a.handleCampaignResponses(e.detail.response.campaignResponses)})),t.render=i,i()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.renderTestTemplate=void 0;var r=n(2),o=n(3),a=n(4);t.renderTestTemplate=function(){if("true"==o.getQueryParam(a.TEST_TEMPLATE_PARAMETER)){var e=i();addEventListener("storage",(function(t){t.key==a.TEST_TEMPLATE_STORAGE_KEY&&(e&&r.resetTemplate(e.templateName,e.templateConfig),e=i())}))}};var i=function(){var e=localStorage.getItem(a.TEST_TEMPLATE_STORAGE_KEY);if(e)try{var t=JSON.parse(e);return r.executeBundles(t.templates),r.renderTemplate(t.templateName,t.templateConfig),r.restrictContentZone(t.templateConfig.contentZone),t}catch(e){}}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Template=void 0;var o=r(n(12)),a=n(3),i=function(){function e(e){var t=this;if(this.getContentZoneFromMatchedConfig=function(e){var t=window.Evergage.getState().result.matchedConfig;return e.contentZone&&t&&t.contentZones&&0!==t.contentZones.length&&t.contentZones.find((function(t){return t.name===e.contentZone}))||null},this.applyRender=function(e){var n=t.getContentZoneFromMatchedConfig(e);n&&t.executeInsertionForTarget(n,e)},this.replaceContentAtTarget=function(e,t){t.innerHTML=e},this.name=e.name,this.apply=e.apply,this.reset=e.reset,this.control=e.control,e.handlebars)try{this.generateHtml=o.default.template(e.handlebars),o.default.partials[e.name]=o.default.template(e.handlebars)}catch(e){a.dispatchError(e)}else this.generateHtml=function(){}}return e.prototype.render=function(e){try{var t=this.apply(e,this.generateHtml,this.applyRender);return a.handleTemplateDispatch(t,e),this.reset.bind(this,e,this.generateHtml)}catch(e){a.dispatchError(e)}},e.prototype.executeInsertionForTarget=function(e,t){if(this.generateHtml){var n=e.selector;try{var r=document.querySelector(n);if(!r){var o='Could not render template. Content zone "'+e.name+'" defined but the selector "'+n+'" not found on the page.';return void a.dispatchError(o)}var i=this.generateHtml(t);if(!i)return;this.replaceContentAtTarget(i,r)}catch(e){a.dispatchError(e)}}},e}();t.Template=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initPreview=void 0;var r=n(4),o=n(2);t.initPreview=function(){window.Evergage.Render={render:function(e,t,n){var a=JSON.stringify({templateName:e,templateConfig:t,templates:n});window.localStorage.setItem(r.TEST_TEMPLATE_STORAGE_KEY,a),o.resetTemplate(e,t),o.executeBundles(n),o.renderTemplate(e,t)},reset:o.resetTemplate}}},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"VERSION",(function(){return g})),n.d(r,"COMPILER_REVISION",(function(){return v})),n.d(r,"LAST_COMPATIBLE_COMPILER_REVISION",(function(){return E})),n.d(r,"REVISION_CHANGES",(function(){return b})),n.d(r,"HandlebarsEnvironment",(function(){return T})),n.d(r,"log",(function(){return y})),n.d(r,"createFrame",(function(){return a.createFrame})),n.d(r,"logger",(function(){return d}));var o={};n.r(o),n.d(o,"checkRevision",(function(){return O})),n.d(o,"template",(function(){return P})),n.d(o,"wrapProgram",(function(){return j})),n.d(o,"resolvePartial",(function(){return x})),n.d(o,"invokePartial",(function(){return A})),n.d(o,"noop",(function(){return C}));var a=n(0),i=n(1),l=n(6);function c(e){!function(e){e.registerHelper("blockHelperMissing",(function(t,n){let r=n.inverse,o=n.fn;if(!0===t)return o(this);if(!1===t||null==t)return r(this);if(Object(a.isArray)(t))return t.length>0?(n.ids&&(n.ids=[n.name]),e.helpers.each(t,n)):r(this);if(n.data&&n.ids){let e=Object(a.createFrame)(n.data);e.contextPath=Object(a.appendContextPath)(n.data.contextPath,n.name),n={data:e}}return o(t,n)}))}(e),Object(l.a)(e),function(e){e.registerHelper("helperMissing",(function(){if(1!==arguments.length)throw new i.a('Missing helper: "'+arguments[arguments.length-1].name+'"')}))}(e),function(e){e.registerHelper("if",(function(e,t){if(2!=arguments.length)throw new i.a("#if requires exactly one argument");return Object(a.isFunction)(e)&&(e=e.call(this)),!t.hash.includeZero&&!e||Object(a.isEmpty)(e)?t.inverse(this):t.fn(this)})),e.registerHelper("unless",(function(t,n){if(2!=arguments.length)throw new i.a("#unless requires exactly one argument");return e.helpers.if.call(this,t,{fn:n.inverse,inverse:n.fn,hash:n.hash})}))}(e),function(e){e.registerHelper("log",(function(){let t=[void 0],n=arguments[arguments.length-1];for(let e=0;e<arguments.length-1;e++)t.push(arguments[e]);let r=1;null!=n.hash.level?r=n.hash.level:n.data&&null!=n.data.level&&(r=n.data.level),t[0]=r,e.log(...t)}))}(e),function(e){e.registerHelper("lookup",(function(e,t,n){return e?n.lookupProperty(e,t):e}))}(e),function(e){e.registerHelper("with",(function(e,t){if(2!=arguments.length)throw new i.a("#with requires exactly one argument");Object(a.isFunction)(e)&&(e=e.call(this));let n=t.fn;if(Object(a.isEmpty)(e))return t.inverse(this);{let r=t.data;return t.data&&t.ids&&(r=Object(a.createFrame)(t.data),r.contextPath=Object(a.appendContextPath)(t.data.contextPath,t.ids[0])),n(e,{data:r,blockParams:Object(a.blockParams)([e],[r&&r.contextPath])})}}))}(e)}function s(e,t,n){e.helpers[t]&&(e.hooks[t]=e.helpers[t],n||delete e.helpers[t])}function u(e){!function(e){e.registerDecorator("inline",(function(e,t,n,r){let o=e;return t.partials||(t.partials={},o=function(r,o){let i=n.partials;n.partials=Object(a.extend)({},i,t.partials);let l=e(r,o);return n.partials=i,l}),t.partials[r.args[0]]=r.fn,o}))}(e)}let p={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(e){if("string"==typeof e){let t=Object(a.indexOf)(p.methodMap,e.toLowerCase());e=t>=0?t:parseInt(e,10)}return e},log:function(e,...t){if(e=p.lookupLevel(e),"undefined"!=typeof console&&p.lookupLevel(p.level)<=e){let n=p.methodMap[e];console[n]||(n="log"),console[n](...t)}}};var d=p;function f(...e){return Object(a.extend)(Object.create(null),...e)}const h=Object.create(null);function m(e,t){return void 0!==e.whitelist[t]?!0===e.whitelist[t]:void 0!==e.defaultValue?e.defaultValue:(function(e){!0!==h[e]&&(h[e]=!0,(void 0)("error",`Handlebars: Access has been denied to resolve the property "${e}" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`))}(t),!1)}const g="4.7.7",v=8,E=7,b={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0 <4.3.0",8:">= 4.3.0"};function T(e,t,n){this.helpers=e||{},this.partials=t||{},this.decorators=n||{},c(this),u(this)}T.prototype={constructor:T,logger:d,log:d.log,registerHelper:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new i.a("Arg not supported with multiple helpers");Object(a.extend)(this.helpers,e)}else this.helpers[e]=t},unregisterHelper:function(e){delete this.helpers[e]},registerPartial:function(e,t){if("[object Object]"===a.toString.call(e))Object(a.extend)(this.partials,e);else{if(void 0===t)throw new i.a(`Attempting to register a partial called "${e}" as undefined`);this.partials[e]=t}},unregisterPartial:function(e){delete this.partials[e]},registerDecorator:function(e,t){if("[object Object]"===a.toString.call(e)){if(t)throw new i.a("Arg not supported with multiple decorators");Object(a.extend)(this.decorators,e)}else this.decorators[e]=t},unregisterDecorator:function(e){delete this.decorators[e]},resetLoggedPropertyAccesses(){Object.keys(h).forEach(e=>{delete h[e]})}};let y=d.log;function w(e){this.string=e}w.prototype.toString=w.prototype.toHTML=function(){return""+this.string};var _=w;function O(e){const t=e&&e[0]||1;if(!(t>=E&&t<=v)){if(t<E){const e=b[v],n=b[t];throw new i.a("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+e+") or downgrade your runtime to an older version ("+n+").")}throw new i.a("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+e[1]+").")}}function P(e,t){if(!t)throw new i.a("No environment passed to template");if(!e||!e.main)throw new i.a("Unknown template object: "+typeof e);e.main.decorator=e.main_d,t.VM.checkRevision(e.compiler);const n=e.compiler&&7===e.compiler[0];let r={strict:function(e,t,n){if(!e||!(t in e))throw new i.a('"'+t+'" not defined in '+e,{loc:n});return r.lookupProperty(e,t)},lookupProperty:function(e,t){let n=e[t];return null==n||Object.prototype.hasOwnProperty.call(e,t)||function(e,t,n){return m("function"==typeof e?t.methods:t.properties,n)}(n,r.protoAccessControl,t)?n:void 0},lookup:function(e,t){const n=e.length;for(let o=0;o<n;o++){if(null!=(e[o]&&r.lookupProperty(e[o],t)))return e[o][t]}},lambda:function(e,t){return"function"==typeof e?e.call(t):e},escapeExpression:a.escapeExpression,invokePartial:function(n,r,o){o.hash&&(r=a.extend({},r,o.hash),o.ids&&(o.ids[0]=!0)),n=t.VM.resolvePartial.call(this,n,r,o);let l=a.extend({},o,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),c=t.VM.invokePartial.call(this,n,r,l);if(null==c&&t.compile&&(o.partials[o.name]=t.compile(n,e.compilerOptions,t),c=o.partials[o.name](r,l)),null!=c){if(o.indent){let e=c.split("\n");for(let t=0,n=e.length;t<n&&(e[t]||t+1!==n);t++)e[t]=o.indent+e[t];c=e.join("\n")}return c}throw new i.a("The partial "+o.name+" could not be compiled when running in runtime-only mode")},fn:function(t){let n=e[t];return n.decorator=e[t+"_d"],n},programs:[],program:function(e,t,n,r,o){let a=this.programs[e],i=this.fn(e);return t||o||r||n?a=j(this,e,i,t,n,r,o):a||(a=this.programs[e]=j(this,e,i)),a},data:function(e,t){for(;e&&t--;)e=e._parent;return e},mergeIfNeeded:function(e,t){let n=e||t;return e&&t&&e!==t&&(n=a.extend({},t,e)),n},nullContext:Object.seal({}),noop:t.VM.noop,compilerInfo:e.compiler};function o(t,n={}){let i=n.data;o._setup(n),!n.partial&&e.useData&&(i=function(e,t){t&&"root"in t||((t=t?Object(a.createFrame)(t):{}).root=e);return t}(t,i));let l,c=e.useBlockParams?[]:void 0;function s(t){return""+e.main(r,t,r.helpers,r.partials,i,c,l)}return e.useDepths&&(l=n.depths?t!=n.depths[0]?[t].concat(n.depths):n.depths:[t]),(s=M(e.main,s,r,n.depths||[],i,c))(t,n)}return o.isTop=!0,o._setup=function(o){if(o.partial)r.protoAccessControl=o.protoAccessControl,r.helpers=o.helpers,r.partials=o.partials,r.decorators=o.decorators,r.hooks=o.hooks;else{let i=a.extend({},t.helpers,o.helpers);!function(e,t){Object.keys(e).forEach(n=>{let r=e[n];e[n]=function(e,t){const n=t.lookupProperty;return function(e,t){return"function"!=typeof e?e:function(){const n=arguments[arguments.length-1];return arguments[arguments.length-1]=t(n),e.apply(this,arguments)}}(e,e=>a.extend({lookupProperty:n},e))}(r,t)})}(i,r),r.helpers=i,e.usePartial&&(r.partials=r.mergeIfNeeded(o.partials,t.partials)),(e.usePartial||e.useDecorators)&&(r.decorators=a.extend({},t.decorators,o.decorators)),r.hooks={},r.protoAccessControl=function(e){let t=Object.create(null);t.constructor=!1,t.__defineGetter__=!1,t.__defineSetter__=!1,t.__lookupGetter__=!1;let n=Object.create(null);return n.__proto__=!1,{properties:{whitelist:f(n,e.allowedProtoProperties),defaultValue:e.allowProtoPropertiesByDefault},methods:{whitelist:f(t,e.allowedProtoMethods),defaultValue:e.allowProtoMethodsByDefault}}}(o);let l=o.allowCallsToHelperMissing||n;s(r,"helperMissing",l),s(r,"blockHelperMissing",l)}},o._child=function(t,n,o,a){if(e.useBlockParams&&!o)throw new i.a("must pass block params");if(e.useDepths&&!a)throw new i.a("must pass parent depths");return j(r,t,e[t],n,0,o,a)},o}function j(e,t,n,r,o,a,i){function l(t,o={}){let l=i;return!i||t==i[0]||t===e.nullContext&&null===i[0]||(l=[t].concat(i)),n(e,t,e.helpers,e.partials,o.data||r,a&&[o.blockParams].concat(a),l)}return(l=M(n,l,e,i,r,a)).program=t,l.depth=i?i.length:0,l.blockParams=o||0,l}function x(e,t,n){return e?e.call||n.name||(n.name=e,e=n.partials[e]):e="@partial-block"===n.name?n.data["partial-block"]:n.partials[n.name],e}function A(e,t,n){const r=n.data&&n.data["partial-block"];let o;if(n.partial=!0,n.ids&&(n.data.contextPath=n.ids[0]||n.data.contextPath),n.fn&&n.fn!==C){n.data=Object(a.createFrame)(n.data);let e=n.fn;o=n.data["partial-block"]=function(t,n={}){return n.data=Object(a.createFrame)(n.data),n.data["partial-block"]=r,e(t,n)},e.partials&&(n.partials=a.extend({},n.partials,e.partials))}if(void 0===e&&o&&(e=o),void 0===e)throw new i.a("The partial "+n.name+" could not be found");if(e instanceof Function)return e(t,n)}function C(){return""}function M(e,t,n,r,o,i){if(e.decorator){let l={};t=e.decorator(t,l,n,r&&r[0],o,i,r),a.extend(t,l)}return t}var S=n(7);function k(){let e=new T;return a.extend(e,r),e.SafeString=_,e.Exception=i.a,e.Utils=a,e.escapeExpression=a.escapeExpression,e.VM=o,e.template=function(t){return P(t,e)},e}let I=k();I.create=k,Object(S.a)(I),I.default=I;t.default=I}]));
} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: Handlebars Templates:index.js");
    }
};


try {
    // syncs with @frontend/packages/ui-chrome-extension/src/constants.ts#CUSTOM_EVENT.MESSAGE_FROM_INTERACTION_STUDIO_TOOLS_GEAR
var VE_CUSTOM_EVENT_NAME = 'msg_from_interaction_studio_tools_gear';
// syncs with @frontend/packages/ui-chrome-extension/src/constants.ts#EVENT_TYPE.MESSAGE_FROM_INTERACTION_STUDIO_TOOLS_GEAR
var TO_LAUNCHER_MESSAGE_TYPE = 'nxve_messageFromInteractionStudioToolsGear';

var TO_LAUNCHER_PAYLOAD_TYPE = 'beaconSDK_domEvent';

function sendMessageToEvergageLauncher(message) {
    try {
        document.dispatchEvent(
            new CustomEvent(VE_CUSTOM_EVENT_NAME, {
                detail: JSON.stringify(message),
            })
        );
    } catch (e) {
        console.error(e);
    }
}

var eventLinkId = null;

if (Evergage !== null) {
    document.addEventListener(Evergage.CustomEvents.OnInit, function (
        domEvent
    ) {
        sendMessageToEvergageLauncher({
            type: TO_LAUNCHER_MESSAGE_TYPE,
            payload: {
                type: TO_LAUNCHER_PAYLOAD_TYPE,
                payload: {
                    name: Evergage.CustomEvents.OnInit,
                    detail: domEvent.detail,
                },
            },
        });
    });

    document.addEventListener(Evergage.CustomEvents.OnEventSend, function (
        domEvent
    ) {
        eventLinkId = Math.random().toString().slice(2);

        const { actionEvent } = domEvent.detail || {};
        actionEvent._toolsEventLinkId = eventLinkId;
        if (actionEvent.interaction) {
            actionEvent.explain = true;
        } else {
            actionEvent.debug = Object.assign(
                (actionEvent.debug || {}),
                { explanations: true }
            );
        }

        sendMessageToEvergageLauncher({
            type: TO_LAUNCHER_MESSAGE_TYPE,
            payload: {
                type: TO_LAUNCHER_PAYLOAD_TYPE,
                payload: {
                    name: Evergage.CustomEvents.OnEventSend,
                    detail: domEvent.detail,
                },
            },
        });
    });

    document.addEventListener(Evergage.CustomEvents.OnEventResponse, function (
        domEvent
    ) {
        if (domEvent.detail) {
            const currentPage = Evergage.getCurrentPage();
            const sitemapConfig = Evergage.getState().config;
            const matchedPageConfig =
                Evergage.getState().result &&
                Evergage.getState().result.matchedConfig;

            eventLinkId = null;

            sendMessageToEvergageLauncher({
                type: TO_LAUNCHER_MESSAGE_TYPE,
                payload: {
                    type: TO_LAUNCHER_PAYLOAD_TYPE,
                    payload: {
                        name: Evergage.CustomEvents.OnEventResponse,
                        detail: {
                            response: domEvent.detail.response,
                            currentPage: currentPage,
                            sitemapConfig: sitemapConfig,
                            matchedPageConfig: matchedPageConfig,
                        },
                    },
                },
            });
        }
    });
}

} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: System Tools:interactionStudioTools.js");
    }
};


try {
    Evergage.Surveys = Evergage.Surveys || (function() {

    var SURVEY_ACTION = {
        SUBMIT: "submit",
        PAGE_NEXT: "pageNext",
        PAGE_PREV: "pagePrev"
    };

    var SURVEY_EVENT_PARAM = {
        SURVEY_ACTION: 'surveyAction',
        SURVEY_ID: 'surveyId',
        SURVEY_START_TIME: 'surveyStartTime'
    };

    var initialized = false;

    function isInitialized() {
        return (initialized || typeof window.Survey === 'object');
    }

    /**
     * processSurveyResponses
     * ** recursive **
     * @param responses {object} a collection of survey element response values keyed by element.name (question.name)
     * @param elements {object} a collection of SurveyElements for a given page or panel of a survey
     * @param addResponseFn {function} invoked for each questionType element that has been processed
     */
    function processSurveyResponses(elements, survey, sender) {
        try {

            var shouldHandleElementAsPanel = function(element) {
                return (element.type === 'panel'
                        && Evergage.cashDom.isArray(element.elements)
                        && element.elements.length !== 0
                        && !isString(element.questionId));
            };

            var formatAnswer = function(answer) {
                var result = (answer) ? answer : null;
                if (result != null && Evergage.cashDom.isArray(result) || isPlainObject(result)) {
                    result = JSON.stringify(result);
                }
                return result;
            };

            var formatQuestionId = function(element, rowId) {
                var questionId = "survey:" + survey.id + ":" + element.questionId;
                if (isString(rowId)) {
                    questionId += ":" + rowId;
                }
                return questionId;
            };

            var responses = [];
            for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {
                var element = elements[elementIndex];
                if (shouldHandleElementAsPanel(element)) {
                    responses = responses.concat(processSurveyResponses(element.elements, survey, sender));
                } else {
                    if (element.type === "matrix") {
                        for (var rowIndex = 0; rowIndex < element.rows.length; rowIndex++) {
                            var row = element.rows[rowIndex];
                            var rowId = element.rowIds[rowIndex];
                            var allRowsValues = sender.data[element.name] ? sender.data[element.name] : {};
                            if (allRowsValues[row.value]) {
                                var rowValue = allRowsValues[row.value];
                                responses.push({ questionId: formatQuestionId(element, rowId), answer: rowValue });
                            }
                        }
                    } else {
                        var answer = formatAnswer(sender.data[element.name]);
                        if (answer) {
                            responses.push({ questionId: formatQuestionId(element), answer: answer });
                        }
                    }
                }
            }
            return responses;
        } catch (e) {
            Evergage.log.error('Evergage: There was an error when attempting to ' +
                                       'process survey responses: ', e);
        }
    }

    function isPlainObject(obj) {
        if (typeof obj !== 'object' || obj === null) return false;
        const proto = Object.getPrototypeOf(obj);
        return proto === null || proto === Object.prototype;
    }

    function isString(property) {
        return typeof property === 'string' || property instanceof String;
    }

    function handleSurveyAction(surveyAction, survey, sender) {

        try {
            if (surveyAction === SURVEY_ACTION.PAGE_NEXT) {
                return;
            } else {
                var surveyActionEvent = new SurveyActionEvent(surveyAction, survey.id, new Date().getTime());
                Evergage.cashDom.each(survey.config.pages, function(index, page) {
                    surveyActionEvent.addResponses(processSurveyResponses(page.elements, survey, sender));
                });
                surveyActionEvent.send();
            }
        } catch (e) {
            Evergage.log.error('Evergage: There was an error when attempting to ' +
                                       'submit survey responses surveyId[' + message.surveyConfig.survey.id + ']: ', e);
        }
    }

    function renderSurvey(survey, renderTarget) {
        if (typeof survey !== "object" || !renderTarget) return Evergage.log.error("Evergage: renderSurvey arguments are not valid");
        return injectSurveyResourcesIntoPage().then(() => {
            try {
                if (surveyAlreadyRendered(survey.id, renderTarget)) return;
                window.Survey.JsonObject.metaData.addProperty("questionbase", "questionId");
                window.Survey.JsonObject.metaData.addProperty("questionbase", "rowIds");
                var surveyModel = new window.Survey.Model(survey.config);
                // eslint-disable-next-line new-cap
                Evergage.cashDom(renderTarget).Survey({
                    model: surveyModel,
                    onComplete: function(sender) {
                        handleSurveyAction(SURVEY_ACTION.SUBMIT, survey, sender);
                    },
                    onPartialSend: function(sender) {
                        handleSurveyAction(SURVEY_ACTION.PAGE_NEXT, survey, sender);
                    }
                });
                Evergage.cashDom(renderTarget).attr("data-evg-survey-id", survey.id);
            } catch (e) {
                Evergage.log.error('Evergage: There was an error when attempting to render the survey', e);
            }
        });
    }

    function injectSurveyResourceIntoPage(type, url) {
        try {
            var documentHead = document.head || document.getElementsByTagName('head')[0];
            var isStylesheet = (type === 'style');
            var surveyResourceElement = document.createElement(isStylesheet ? 'link' : 'script');
            surveyResourceElement.setAttribute('type', ((isStylesheet) ? 'text/css' : 'text/javascript'));
            surveyResourceElement.setAttribute('class', 'evergageSurvey-' + type);
            surveyResourceElement.setAttribute(((isStylesheet) ? 'href' : 'src'), url);
            if (isStylesheet) {
                surveyResourceElement.setAttribute('rel', 'stylesheet');
            }
            documentHead.appendChild(surveyResourceElement);
            Evergage.log.trace('Evergage: Injected survey resource of type[' + type + '] url[' + url + ']');
        } catch (e) {
            Evergage.log.error('Evergage: There was an error when attempting to inject surveyJS resources into the page: ', e);
        }

    }

    function injectSurveyResourcesIntoPage() {
        return new Promise(resolve => {
            if (isInitialized()) {
                return resolve();
            }
            var SURVEY_JS_CDN_BASE_URL = '//cdn.evergage.com/evergage-content/3pp';
            var SURVEY_JS_VERSION = 'surveyjs-1.0.95';
            var SURVEY_JS_SCRIPT_NAME = 'survey.cash.min.js';
            var SURVEY_JS_STYLESHEET_NAME = 'survey.min.css';
            Object.entries({
                script: [SURVEY_JS_CDN_BASE_URL, SURVEY_JS_VERSION, SURVEY_JS_SCRIPT_NAME].join('/'),
                style: [SURVEY_JS_CDN_BASE_URL, SURVEY_JS_VERSION, SURVEY_JS_STYLESHEET_NAME].join('/')
            }).forEach(function(entry) {
                const [resourceType, resourceUrl] = entry
                injectSurveyResourceIntoPage(resourceType, resourceUrl);
            });
            var interval = setInterval(function(){
                if (Evergage.cashDom.fn.Survey != null && window.Survey != null) {
                    clearInterval(interval);
                    initialized = true;
                    resolve();
                }
            }, 100);
        })
    }

    function surveyAlreadyRendered(surveyId, renderTarget) {
        return Evergage.cashDom(renderTarget).attr("data-evg-survey-id") === surveyId;
    }

    function SurveyActionEvent(surveyAction, surveyId, timestamp) {
        this.params = { source: {}, attributes: {} };
        this.params.source[SURVEY_EVENT_PARAM.SURVEY_ACTION] = surveyAction;
        this.params.source[SURVEY_EVENT_PARAM.SURVEY_ID] = surveyId;
        this.params.source[SURVEY_EVENT_PARAM.SURVEY_START_TIME] = timestamp;
    }

    SurveyActionEvent.prototype.addResponses = function(responses) {
        for (var i = 0; i < responses.length; i++) {
            var response = responses[i];
            this.addResponse(response.questionId, response.answer);
        }
    };

    SurveyActionEvent.prototype.addResponse = function(name, value) {
        Evergage.log.trace('Evergage: Adding response to SurveyActionEvent: ' + JSON.stringify({ name: name, value: value }));
        this.params.attributes[name] = value;
    };

    SurveyActionEvent.prototype.send = function() {
        Evergage.log.trace('Evergage: Tracking survey event: ', this.params);
        Evergage.sendEvent({
            action: "Survey " + this.params.source[SURVEY_EVENT_PARAM.SURVEY_ACTION],
            source: this.params.source,
            user: {
                attributes: this.params.attributes
            }
        });
    };

    return {
        renderSurvey: renderSurvey,
        injectSurveyResourcesIntoPage: injectSurveyResourcesIntoPage
    };

})(window);

if (window.SalesforceInteractions && window.SalesforceInteractions.mcis) {
    window.SalesforceInteractions.mcis.Surveys = Evergage.Surveys;
}
} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: Surveys:SurveyJS.js");
    }
};


try {
    (function () {
    var VE_LOCAL_STORAGE_KEY = 'evgVE';
    var SITEMAP_EDITOR_LOCAL_STORAGE_KEY = 'evgVE-cdp-sitemap-editor';

    var SdkNamespace = window.Evergage || window.SalesforceInteractions;

    function injectEditorLaunchScript(isStandaloneSitemapEditor) {
        try {
            // getConfig() is not exposed on the Salesforce/CDP build of the SDK
            var trackerUrl =
                typeof SdkNamespace.getConfig === 'function' &&
                SdkNamespace.getConfig().trackerUrl;

            var baseUrl = !isStandaloneSitemapEditor && trackerUrl ? trackerUrl : 'https://cdn.evergage.com';
            var scriptPath = isStandaloneSitemapEditor
                ? '/evergage-content/sitemap-editor/4.0.0/launch.sitemap-editor.js'
                : '/visual-editor/launch.js';

            var scriptUrl = [baseUrl, scriptPath].join('');

            var scriptTag = document.createElement('script');
            scriptTag.setAttribute('id', 'salesforceInteractionsLauncherScript');
            scriptTag.src = scriptUrl;

            if (
                document.getElementById('salesforceInteractionsLauncherScript') == null
            ) {
                document.head.appendChild(scriptTag);
            } else {
                SdkNamespace.log.info('Launch script is already here.');
            }
        } catch (err) {
            SdkNamespace.log.error(
                'Failed to inject Salesforce Interactions Launcher script: ' + err
            );
        }
    }

    function getUrlBoolean(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? null : results[1] === 'true';
    }

    var visualEditorParam = getUrlBoolean('evergageEditor');
    var standaloneEditorParam = getUrlBoolean('salesforceInteractionsSitemapEditor');

    var visualEditorEnabledInStorage = function () {
        return window.localStorage[VE_LOCAL_STORAGE_KEY] === 'true';
    };

    var standloneSitemapEditorEnabledInStorage = function () {
        return window.localStorage[SITEMAP_EDITOR_LOCAL_STORAGE_KEY] === 'true';
    };

    // honor and set local storage based off queryParam
    if (visualEditorParam !== null) {
        window.localStorage.setItem(VE_LOCAL_STORAGE_KEY, visualEditorParam);
    }

    if (standaloneEditorParam !== null) {
        window.localStorage.setItem(
            SITEMAP_EDITOR_LOCAL_STORAGE_KEY,
            standaloneEditorParam
        );
    }

    var inSiteEditorFrameContext =
        window.frameElement && window.frameElement.id === 'siteEditorFrame';

    // trigger off of localStorage only
    // chrome extension reads/sets localStorage more easily than modifying the currentTab URL
    if (
        !visualEditorEnabledInStorage() &&
        !standloneSitemapEditorEnabledInStorage() &&
        !inSiteEditorFrameContext
    ) {
        return;
    }

    if (window.top === window.self || inSiteEditorFrameContext) {
        document.addEventListener(
            SdkNamespace.CustomEvents.OnInit,
            (event) => {
                injectEditorLaunchScript(
                    standloneSitemapEditorEnabledInStorage()
                );
                event.preventDefault();
            },
            { once: true }
        );
    }
})();

} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
        Evergage.sendException(e, "beaconExtension: Visual Editor:visualEditor.js");
    }
};


try {
var evgr = Evergage.resolvers;
const getCookieDomain = () => {
    let currentDomain = window.location.hostname;
    if (currentDomain === "select.schoolspecialty.com") {  
        return "select.schoolspecialty.com";
    } else if (currentDomain === "www.schoolspecialty.com") {
        return "www.schoolspecialty.com";
    } else if (currentDomain === "blog.schoolspecialty.com") {
        return "blog.schoolspecialty.com";
    } else if (currentDomain === "help.schoolspecialty.com") {
        return "help.schoolspecialty.com";
    } else if (currentDomain === "fossnextgeneration.com") {
        return "fossnextgeneration.com";
    } else if (currentDomain === "www.deltaeducation.com") {
        return "www.deltaeducation.com";
    } else if (currentDomain === "eps.schoolspecialty.com") {
        return "eps.schoolspecialty.com";
    }
};

const currentCookieDomain = getCookieDomain();

Evergage.init({
    cookieDomain: currentCookieDomain
}).then(() => {

    //retrieve the PageType from the data layer
    const retrievePageTypeDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = 0; i < window.dataLayer.length; i++) {
                if (window.dataLayer[i].pageType) {
                    return window.dataLayer[i].pageType;
                }
                //for Blog website
                if (window.dataLayer[i].pagePostType) {
                    if (window.dataLayer[i].pagePostType && window.dataLayer[i].pagePostType2)
                        return window.dataLayer[i].pagePostType2;
                    return window.dataLayer[i].pagePostType;
                }
            }
        }
        return '';
    };

    //retrieve the Product Details from the data layer
    const retrieveProductDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = 0; i < window.dataLayer.length; i++) {
                if (window.dataLayer[i]["ecommerce"]) {
                    if (window.dataLayer[i]["ecommerce"].detail && window.dataLayer[i]["ecommerce"].detail.products) {
                        return window.dataLayer[i].ecommerce.detail.products;
                    }
                    return '';
                }
            }
        }
        return '';
    };

    //retrieve the Blog Details from the data layer
    const retrieveBlogDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = 0; i < window.dataLayer.length; i++) {
                if (window.dataLayer[i]["1"] && window.dataLayer[i]["1"] === "ViewContent" && window.dataLayer[i]["2"]) {
                    return window.dataLayer[i]["2"];
                }
            }
        }
        return '';
    };

    //retrieve the Add to Cart Event Details from the data layer
    const retrieveAddToCartEventtDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                if (window.dataLayer[i]["event"] === "addToCart") {
                    return window.dataLayer[i];
                }
            }
        }
        return '';
    };

    //retrieve the Quick Order - Add to Cart Event Details from the data layer
    const retrieveQuickOrderAddToCartEventtDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                if (window.dataLayer[i]["event"] === "Quick Order - Add to Cart") {
                    return window.dataLayer[i];
                }
            }
        }
        return '';
    };

    //retrieve the Add to WishList Event Details from the data layer
    const retrieveAddToWishListEventtDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = 0; i < window.dataLayer.length; i++) {
                if (window.dataLayer[i]["event"] === "AddToWishlist") {
                    return window.dataLayer[i];
                }
            }
        }
        return '';
    };

    //retrieve the Remove From Cart Event Details from the data layer
    const retrieveRemoveFromCartEventtDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                if (window.dataLayer[i]["event"] === "removeFromCart") {
                    return window.dataLayer[i];
                }
            }
        }
        return '';
    };

    //retrieve the Checkout Event Details from the data layer
    const retrieveSubmitCartDetailsDatalayerObject = () => {
        if (window.dataLayer) {
            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                if (window.dataLayer[i]["event"] === "checkout") {
                    return window.dataLayer[i];
                }
            }
        }
        return '';
    };

    //Get the URL Path Value - for Product Categories
    const getURLPathValue = (pageType) => {
        var subStringId = window.location.pathname;
        if (subStringId.indexOf('/en/ssib2bstore') > -1) {
            subStringId = subStringId.substring(15, subStringId.length - 1);
        }
        if (pageType === 'category') {
            if (subStringId === '/') {
                subStringId = 'HOME';
            } else {
                var regex = new RegExp('/', 'g');
                subStringId = 'HOME' + subStringId.toUpperCase().replace(regex, '|');
            }
        }
        else if (pageType === 'product') {
            if (subStringId === '/') {
                subStringId = 'HOME';
            } else {
                //removing the Product Name from the URL to get the Category Tree
                var lastIndexOfPipe = subStringId.lastIndexOf('/');
                subStringId = subStringId.substring(0, lastIndexOfPipe);
                var regex = new RegExp('/', 'g');
                subStringId = 'HOME' + subStringId.toUpperCase().replace(regex, '|');
            }
        }
        return subStringId;
    };

    //Function to hash Email - sha256
    async function sha256(message) {
        // encode as UTF-8
        const msgBuffer = new TextEncoder('utf-8').encode(message);
        // hash the message
        const hashBuffer = await window.crypto.subtle.digest('SHA-256', msgBuffer);
        // convert ArrayBuffer to Array
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        // convert bytes to hex string
        const hashHex = hashArray.map(b => ('00' + b.toString(16)).slice(-2)).join('');
        return hashHex;
    }


    //Define SiteMap Configs
    let B2BConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page"
        },
        pageTypes: []
    };

    let B2CConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };

    let helpConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };

    let blogConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };
    let epsConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };
    let fossNextGenerationConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };
    let deltaEducationConfig = {
        global: {},
        pageTypeDefault: {
            name: "Unmapped Page",
        },
        pageTypes: []
    };

    let emailRegex = RegExp("^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$");

    //Configure Page Types for B2B site
    B2BConfig.pageTypes.push(
        {
            name: "Home",
            action: "B2B-View Home",
            isMatch: () => {
                if (dataLayerPageObject === 'home') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Listener to capture login - click of the button
                Evergage.listener("click", "form#Logon > div#WC_AccountDisplay_div_7 > div#WC_AccountDisplay_div_12 > #WC_AccountDisplay_links_2", () => {
                    var hashEmail;
                    const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                break;
                            }
                        }
                        if (hashEmail) { return hashEmail; }
                        else { return false; }
                    }, null, 2000);
                    getHashedEmail.then((value) => {
                        var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                        var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                        if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                            Evergage.sendEvent({
                                action: "B2B-Logon",
                                user: { attributes: { emailAddress: emailOrUsername, hashedEmail: value } }
                            });
                        } else if (emailOrUsername && password) {
                            Evergage.sendEvent({
                                action: "B2B-Logon",
                                user: { attributes: { username: emailOrUsername, hashedEmail: value } }
                            });
                        }
                    });
                }),
                //Listener to capture login - hitting Enter
                Evergage.listener("keypress", "body", (event) => {
                    if (event.key === "Enter") {
                        var hashEmail;
                        const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = 0; i < window.dataLayer.length; i++) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                    hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                    break;
                                }
                            }
                            if (hashEmail) { return hashEmail; }
                            else { return false; }
                        }, null, 2000);
                        getHashedEmail.then((hashedEmail) => {
                            var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                            var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                            if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                                Evergage.sendEvent({
                                    action: "B2B-Logon",
                                    user: { attributes: { emailAddress: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            } else if (emailOrUsername && password) {
                                Evergage.sendEvent({
                                    action: "B2B-Logon",
                                    user: { attributes: { username: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            }
                        });
                    }
                }),
                //Init sitemap on click of "Select Options"
                Evergage.listener("click", "div.product_details.product_buttons> .product_option", () => {
                    setTimeout(function(){
                        Evergage.initSitemap(B2BConfig);
                    }, 1000);
                }),
                //Add to Cart- Select Options (Quick View)
                Evergage.listener("click", "div.purchase_section.shopperActions>div> a#WC_QuickInfo_Link_addtocart", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    Evergage.sendEvent({
                                        action: "B2B-Add to Cart(Quick View)",
                                        itemAction: Evergage.ItemAction.AddToCart,
                                        cart: {
                                            singleLine: {
                                                Product: lineItem
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Cart 
                Evergage.listener("click", "div.product_details.item_buttons> .product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2b_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wish List
                Evergage.listener("click", "div.product_details.item_buttons > div.shopperActions > div>  a> div.shoppping_list_content", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2B-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                }),
                //Add to Wish List - Quick View
                Evergage.listener("click", "div.purchase_section.shopperActions > div > div.shopperActions > div#QuickInfo_addToShoppingListBtn>  a#QuickInfo_addToShoppingList > div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2B-Add to Wish List (Quick View)',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2B Lesson Plans",
            action: "B2B-View Lesson Plan",
            isMatch: () => {
                if (dataLayerPageObject === 'product' && window.location.href.indexOf('lesson-plans') > -1) {
                    return true;
                }
                return false;
            },
            catalog: {
                Article: {
                    _id: () => {
                        var lessonPlanName = Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                        if (lessonPlanName.indexOf("-lp-") > -1) {
                            return "b2b_" + lessonPlanName.split("-lp-")[0];
                        }
                        return "b2b_" + Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                    },
                    name: () => {
                        var lessonPlanName = Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                        var regex = new RegExp('-', 'g');
                        if (lessonPlanName.indexOf("-lp-") > -1) {
                            return lessonPlanName.split("-lp-")[0].replace(regex, ' ');
                        }
                        return Evergage.util.getLastPathComponentWithoutExtension(window.location.href).replace(regex, ' ');
                    }
                }
            }
        },
        {
            name: "B2B Product",
            //itemAction: Evergage.ItemAction.ViewItem,
            action: "B2B-View Item",
            isMatch: () => {
                if (dataLayerPageObject === 'product' && window.location.href.indexOf('lesson-plans') === -1 && window.location.href.indexOf('/ideas-resources/activities') === -1) {
                    return true;
                }
                return false;
            },
            catalog: {
                Product: {
                    _id: () => {
                        if (dataLayerProductObject && dataLayerProductObject.length === 1) {
                            return "b2b_" + dataLayerProductObject[0].id.trim();
                        }
                        return "";
                    },
                    name: () => {
                        if (dataLayerProductObject && dataLayerProductObject.length === 1 && dataLayerProductObject[0]["name"]) {
                            return dataLayerProductObject[0].name.trim();
                        }
                        return '';
                    },
                    url: Evergage.util.removeQueryString(window.location.href),
                    categories: () => {
                        var urlPath = getURLPathValue('product');
                        if (urlPath.indexOf('|SHOP-BY-LEARNING-MODEL') > -1 || urlPath.indexOf('|SHOP-BY-LEARNING-ENVIRONMENT') > -1 || urlPath.indexOf('|FEATURED-ASSORTMENTS') > -1 || urlPath.indexOf('|IDEAS-RESOURCES') > -1 || urlPath.indexOf('SPECIALTY-SHOPS') > -1) {
                            if (urlPath.indexOf('IDEAS-RESOURCES') > -1) {
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace('IDEAS-RESOURCES', 'IDEAS & RESOURCES');
                                urlPath = urlPath.replace(regex, ' ');
                                return [urlPath.toUpperCase()];
                            } else {
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace(regex, ' ');
                                return [urlPath.toUpperCase()];
                            }
                        } else {
                            return Evergage.DisplayUtils.pageElementLoaded("#widget_breadcrumb li ", "html").then((ele) => {
                                return Evergage.resolvers.buildCategoryId("#widget_breadcrumb li a", 0, false, (categoryId) => [categoryId.toUpperCase()]);
                            });
                        }

                    },
                    relatedCatalogObjects: {
                        Brand: () => {
                            var brands = [];
                            if (dataLayerProductObject && dataLayerProductObject.length === 1) {
                                brands.push(dataLayerProductObject[0].brand.toString().trim());
                                return brands;
                            }
                            return "";
                        }
                    }
                }
            },
            listeners: [
                //Add to Cart
                Evergage.listener("click", " div.shopperActions > #add2CartBtn", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails["ecommerce"]["add"] && eventDetails["ecommerce"]["add"]["products"] && eventDetails["ecommerce"]["add"]["products"].length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2b_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Cart (Switch & Save, You may also like)
                Evergage.listener("click", "div.product > div > div.product_info > div.product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails["ecommerce"]["add"] && eventDetails["ecommerce"]["add"]["products"] && eventDetails["ecommerce"]["add"]["products"].length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2b_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart(Switch & Save)",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wishlist
                Evergage.listener("click", "div.shopperActions > div.shopperActions > div>  a> div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2B-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2B Category",
            //itemAction: Evergage.ItemAction.ViewCategory,
            action: 'B2B-View Category',
            isMatch: () => {
                if (dataLayerPageObject === 'category') {
                    return true;
                }
                return false;
            },
            catalog:
            {
                Category: {
                    _id: () => {
                        var urlPath = getURLPathValue('category');
                        if (urlPath.indexOf('|SHOP-BY-LEARNING-MODEL') > -1 || urlPath.indexOf('|SHOP-BY-LEARNING-ENVIRONMENT') > -1 || urlPath.indexOf('|FEATURED-ASSORTMENTS') > -1 || urlPath.indexOf('|IDEAS-RESOURCES') > -1 || urlPath.indexOf('SPECIALTY-SHOPS') > -1) {
                            if (urlPath.indexOf('IDEAS-RESOURCES') > -1){
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace('IDEAS-RESOURCES', 'IDEAS & RESOURCES');
                                return urlPath.replace(regex, ' ');
                            }
                            else{
                                var regex = new RegExp('-', 'g');
                                return urlPath.replace(regex, ' ');
                            }
                        } else {
                            return Evergage.DisplayUtils.pageElementLoaded("#widget_breadcrumb li ", "html").then((ele) => {
                                return Evergage.resolvers.buildCategoryId("#widget_breadcrumb li", 0, false, (categoryId) => categoryId.replace(/\\/g, '').toUpperCase());
                            });
                        }
                    }
                }
            },
            listeners: [
                //Add to Cart
                Evergage.listener("click", "div.product_details.item_buttons> .product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails["ecommerce"]["add"]["products"];
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2b_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Init sitemap on click of "Select Options"
                Evergage.listener("click", "div.product_details.product_buttons> .product_option", () => {
                    setTimeout(function(){
                        Evergage.initSitemap(B2BConfig);
                    }, 1000);
                }),
                //Add to Cart- Select Options (Quick View)
                Evergage.listener("click", "a#WC_QuickInfo_Link_addtocart", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    Evergage.sendEvent({
                                        action: "B2B-Add to Cart(Quick View)",
                                        itemAction: Evergage.ItemAction.AddToCart,
                                        cart: {
                                            singleLine: {
                                                Product: lineItem
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wish List
                Evergage.listener("click", "div.product_details.item_buttons > div.shopperActions > div>  a> div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2B-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                }),
                //Add to Wish List - Quick View
                Evergage.listener("click", "div.purchase_section.shopperActions > div > div.shopperActions > div#QuickInfo_addToShoppingListBtn>  a#QuickInfo_addToShoppingList > div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2B-Add to Wish List(Quick View)',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2B Search",
            action: "B2B-Search View Results",
            isMatch: () => {
                if (dataLayerPageObject === 'searchresults') {
                    return true;
                }
                return false;
            },
            onActionEvent: (actionEvent) => {
                const searchTerm = Evergage.util.getParameterByName('searchTerm').replace(/\s/g, ' ').trim();
                if (searchTerm) {
                    actionEvent.user = actionEvent.user || {};
                    actionEvent.user.attributes = actionEvent.user.attributes || {};
                    actionEvent.user.attributes.lastSearchTerm = searchTerm;
                };
                return actionEvent;
            }
        },
        {
            name: "B2B Carts",
            action: "B2B-View All Carts",
            isMatch: () => {
                if (dataLayerPageObject === 'Carts') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Approve and Print cart under Actions
                Evergage.listener("click", "div.carts_actions_expanded > div#carts-select-approve > a.selected_action_button ", (e) => {
                    const approveCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                            //Approve Carts - multiple
                            if (Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step') === "intermediate approval" || 
                                Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step') === "final approval") {

                                var stepIntermediate = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step');
                                var stepFinal = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step');
                                
                                if (stepIntermediate === 'intermediate approval') {
                                    var approverId = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverId"];
                                    var hash = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverEmailSha256"];
                                    Evergage.sendEvent({
                                        action: "B2B-Intermediate Approved Cart",
                                        user: {
                                            attributes: {
                                                username: approverId,
                                                hashedEmail: hash
                                            }
                                        }
                                    });
                                    return true;
                                } else if (stepFinal === 'final approval') {
                                    var approverId = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverId"];
                                    var hash = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverEmailSha256"];
                                    Evergage.sendEvent({
                                        action: "B2B-Final Approved Cart",
                                        user: {
                                            attributes: {
                                                username: approverId,
                                                hashedEmail: hash
                                            }
                                        }
                                    });
                                    return true;
                                }
                            }
                        }
                        return false;
                    }, null, 1500);
                    approveCart.then((value) => {
                        // console.log(value);
                    });
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                            //Print or Approve Carts - multiple
                            if (window.dataLayer[i]["gtm.elementId"] === "printOrdersForm") {
                                if(window.dataLayer[i]["gtm.elementId"] === "printOrdersForm"){
                                    Evergage.sendEvent({ action: "B2B-Print Cart" });
                                    return true;
                                } 
                            }
                        }
                        return false;
                    }, null, 800);
                    printCart.then((value) => {
                        // console.log(value);
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        //re-intializing the sitemap
                        Evergage.reinit();
                    }, 2000);
                }),
                //Approve Single Cart
                Evergage.listener("click", " div.approval-popup-row> div > div > button.button_secondary", () => {
                    const approveCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                            if (Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step') === "intermediate approval" || Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step') === "final approval") {
                                var stepIntermediate = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step');
                                var stepFinal = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step');
                                
                                if (stepIntermediate === 'intermediate approval') {
                                    var approverId = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverId"];
                                    var hash = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverEmailSha256"];
                                    Evergage.sendEvent({
                                        action: "B2B-Intermediate Approved Cart",
                                        user: {
                                            id: hash,
                                            attributes: {
                                                username: approverId,
                                                hashedEmail: hash
                                            }
                                        }
                                    });
                                    return true;
                                } else if (stepFinal === 'final approval') {
                                    var approverId = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverId"];
                                    var hash = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverEmailSha256"];
                                    Evergage.sendEvent({
                                        action: "B2B-Final Approved Cart",
                                        user: {
                                            id: hash,
                                            attributes: {
                                                username: approverId,
                                                hashedEmail: hash
                                            }
                                        }
                                    });
                                    return true;
                                }
                            }
                        }
                        return false;
                    }, null, 3000);
                    approveCart.then((value) => {
                        // console.log(value);
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 4000);
                }),
                //Reject Carts - multiple
                Evergage.listener("click", "div.reject_reason_modal > div.modal-dialog > div.modal-content > div.row > a.button_primary ", () => {
                    setTimeout(function () {
                        if (window.dataLayer) {
                            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                                if (window.dataLayer[i]["ecommerce"] && window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["step"] === "Cart Rejected") {
                                    var step = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["step"];
                                    Evergage.sendEvent({
                                        action: "B2B-Reject Cart"
                                    });
                                    break;
                                }
                            }
                        }
                    }, 1000);
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 2000);
                }),
                //Reject Cart - single
                Evergage.listener("click", "div.ordQuickRejectPopup > div> div.content > div.rejectForm_commentSection > a.button_primary ", () => {
                    setTimeout(function () {
                        if (window.dataLayer) {
                            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                                if (window.dataLayer[i]["ecommerce"] && window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["step"] === "Cart Rejected") {
                                    var step = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["step"];
                                    Evergage.sendEvent({
                                        action: "B2B-Reject Cart"
                                    });
                                    break;
                                }
                            }
                        }
                    }, 1000);
                    //re-init sitemap
                    setTimeout(function () {
                        //re-intializing the sitemap
                        Evergage.reinit();
                    }, 2000);
                }),
                //Approve & Reject Carts coming from Approval Page Type
                Evergage.listener("click", "body", () => {
                    if (doNotFireApprovalOrRejectionEvent === false) {
                        doNotFireApprovalOrRejectionEvent = true;
                        const approveOrRejectCart = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = window.dataLayer.length - 1; i >= 0; i--) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].ecommerce.checkout.actionField.step") === "Cart Rejected") {
                                    Evergage.sendEvent({ action: "B2B-Reject Cart" });
                                    return true;
                                }
                                else if (Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step') === "intermediate approval" || Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step') === "final approval") {
                                    var stepIntermediate = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.checkout.actionField.step');
                                    var stepFinal = Evergage.util.getValueFromNestedObject('window.dataLayer[' + i + '].ecommerce.purchase.actionField.step');
                                    
                                    if (stepIntermediate === 'intermediate approval') {
                                        var approverId = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverId"];
                                        var hash = window.dataLayer[i]["ecommerce"]["checkout"]["actionField"]["approverEmailSha256"];
                                        Evergage.sendEvent({
                                            action: "B2B-Intermediate Approved Cart",
                                            user: {
                                                id: hash,
                                                attributes: {
                                                    username: approverId,
                                                    hashedEmail: hash
                                                }
                                            }
                                        });
                                        return true;
                                    } else if (stepFinal === 'final approval') {
                                        var approverId = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverId"];
                                        var hash = window.dataLayer[i]["ecommerce"]["purchase"]["actionField"]["approverEmailSha256"];
                                        Evergage.sendEvent({
                                            action: "B2B-Final Approved Cart",
                                            user: {
                                                id: hash,
                                                attributes: {
                                                    username: approverId,
                                                    hashedEmail: hash
                                                }
                                            }
                                        });
                                        return true;
                                    }
                                }
                            }
                            return false;
                        }, null, 3000);
                        approveOrRejectCart.then((value) => {
                            // console.log(value);
                        });
                        //re-init sitemap
                        setTimeout(function () {
                            Evergage.reinit();
                        }, 4000);
                    }
                })
            ]
        },
        {
            name: "B2B Cart",
            action: "B2B-View Cart",
            isMatch: () => {
                if (dataLayerPageObject === 'cart') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Remove from cart Event
                Evergage.listener("click", ".remove_address_link", () => {
                    setTimeout(function () {
                        eventDetails = retrieveRemoveFromCartEventtDetailsDatalayerObject();
                        const productsRemovedFromCart = eventDetails["ecommerce"]["remove"]["products"];
                        if (productsRemovedFromCart && productsRemovedFromCart.length > 0) {
                            const lineItems = [];
                            const lineItem2 = {};
                            lineItem2.id = 'b2b_' + eventDetails["ecommerce"]["remove"]["products"][0].id;
                            lineItem2.type = 'Product';
                            lineItem2.currency = 'USD';
                            lineItem2.price = parseFloat(eventDetails["ecommerce"]["remove"]["products"][0].price);
                            lineItem2.quantity = 0;
                            lineItems.push(lineItem);

                            Evergage.sendEvent({
                                action: "B2B-Remove From Cart(Update Line Item Quantity)",
                                itemAction: Evergage.ItemAction.UpdateLineItem,
                                cart: {
                                    singleLine: {
                                        Product: lineItem2
                                    }
                                }
                            });
                        }
                    }, 1000);
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 3000);//TBD
                }),
                //Cart Submitted for Approval Event
                Evergage.listener("click", ".submit_for_approval", () => {
                    setTimeout(function () {
                        eventDetails = retrieveSubmitCartDetailsDatalayerObject();
                        const productsCheckedOut = eventDetails["ecommerce"]["checkout"]["products"];
                        if (productsCheckedOut && productsCheckedOut.length > 0 && productsCheckedOut.length <= 200) {//what if the length is >200
                            const lineItemArray = [];
                            $.each(productsCheckedOut, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = value.quantity;
                                    lineItem.currency = 'USD';
                                    lineItemArray.push(lineItem);
                                }
                            });
                            if (lineItemArray.length > 0) {
                                Evergage.sendEvent({
                                    action: 'B2B-Cart Submitted for Approval',
                                    catalog: {
                                        Product: {
                                            lineItems: lineItemArray
                                        }
                                    },
                                    //empty the cart
                                    cart: {
                                        complete: {
                                            Product: []
                                        }
                                    }
                                });
                            }
                        }
                    }, 1000);
                }),
                //Switch & Save
                Evergage.listener("click", "div.save-now-item-row > div.actions > a", () => {
                    Evergage.sendEvent({
                        action: 'B2B-Switch & Save',
                    });
                }),
                //Select Backup Item
                Evergage.listener("click", ".select-backup-txt", () => {
                    var backupItemList = '';
                    setTimeout(function () {
                        backupItemList = Evergage.cashDom('div#backupItemModalContent.modal-open > div.modal-dialog> div.modal-content > div.item-list > div.backup-item.row > div.backupItemRadio > input');
                    }, 800);
                    Evergage.sendEvent({ action: "B2B-Select Backup" });
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 1000);
                }),
                //Change Backup Item
                Evergage.listener("click", ".change-backup-txt", () => {
                    Evergage.sendEvent({ action: "B2B-Change Backup Item" });
                    // setTimeout(function () {
                    //     //re-intializing the sitemap
                    //     console.log('Re-init sitemap');
                    //     Evergage.reinit();
                    // }, 4000); //TBD
                }),
                //Print Cart
                Evergage.listener("click", "div#orderPrintModal > div > div > div > div#actions-button > a.actions-button.button_primary", () => {
                    var printCartEvent = '';
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "printCart") {
                                printCartEvent = window.dataLayer[i].event;
                                break;
                            }
                        }
                        if (printCartEvent) { return printCartEvent; }
                        else { return false; }
                    }, null, 800);
                    printCart.then(() => {
                        Evergage.sendEvent({ action: "B2B-Print Cart" });
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 1200);
                }),
                //Switch Cart
                Evergage.listener("click", "body", () => {
                    if (doNotFireEvent === false) {
                        doNotFireEvent = true;
                        if (window.dataLayer) {
                            var lineItems;
                            const switchCartEvent = Evergage.util.resolveWhenTrue.bind(() => {
                                for (let i = 0; i < window.dataLayer.length; i++) {
                                    if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].ecommerce.checkout.actionField.option") === "switchCart" || Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].ecommerce.checkout.actionField.step") === "1") {
                                        lineItems = window.dataLayer[i].ecommerce.checkout.products;
                                        break;
                                    }
                                }
                                if (lineItems) { return lineItems; }
                                else { return false; }
                            }, null, 1500);
                            switchCartEvent.then((switchCartProducts) => {
                                if (switchCartProducts.length > 0) {
                                    setTimeout(function () {
                                        //adding the switched cart items to cart
                                        const lineItems = [];
                                        $.each(switchCartProducts, function (key, value) {
                                            if (value) {
                                                const lineItem = {};
                                                lineItem.id = 'b2b_' + value.id;
                                                lineItem.type = 'Product';
                                                lineItem.quantity = parseInt(value.quantity);
                                                lineItem.currency = 'USD';
                                                lineItem.price = parseFloat(value.price);
                                                lineItems.push(lineItem);
                                            }
                                        });
                                        //Sending ViewCart, will overwrite all Cart Items
                                        Evergage.sendEvent({
                                            action: "B2B-View Cart Detail",
                                            itemAction: Evergage.ItemAction.ViewCart,
                                            cart: {
                                                complete: {
                                                    Product: lineItems
                                                }
                                            }
                                        });
                                    }, 1500);
                                }
                            });
                            //re-initing the sitemap does not reset the value of doNotFireEvent
                            setTimeout(function() {
                                Evergage.reinit();
                            }, 3000);
                        }
                    }
                })
            ]
        },
        {
            name: "B2B Checkout",
            action: "B2B-Checkout",
            isMatch: () => {
                if (dataLayerPageObject === 'category') {
                    return true;
                }
                return false;
            }
        },
        {
            name: "B2B Order",
            action: "B2B-Order",
            isMatch: () => {
                if (dataLayerPageObject === 'order') {
                    return true;
                }
                return false;
            }
        },
        {
            name: "B2B Approval",
            action: "B2B-View Cart Approval Page",
            isMatch: () => {
                if (dataLayerPageObject === 'Approval') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Print Cart - Approval Page type
                Evergage.listener("click", "a#WC_OrderShippingBillingConfirmationPage_Print_Link", () => {
                    var printCartEvent = '';
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "printCart") {
                                printCartEvent = window.dataLayer[i].event;
                                break;
                            }
                        }
                        if (printCartEvent) { return printCartEvent; }
                        else { return false; }
                    }, null, 1000);
                    printCart.then(() => {
                        Evergage.sendEvent({ action: "B2B-Print Cart" });
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 1500);
                })
            ]
        },
        {
            name: "B2B Saved Order Detail View",
            action: "B2B-Saved order Detail View",
            isMatch: () => {
                if (window.location.href.indexOf('/SavedOrderDetailView') > -1) {
                    return true;
                }
                return false;
            },
            listeners: [
                //Print Cart - awaiting approval, rejected carts
                Evergage.listener("click", "a#WC_OrderShippingBillingConfirmationPage_Print_Link", () => {
                    var printCartEvent = '';
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "printCart") {
                                printCartEvent = window.dataLayer[i].event;
                                break;
                            }
                        }
                        if (printCartEvent) { return printCartEvent; }
                        else { return false; }
                    }, null, 800);
                    printCart.then(() => {
                        Evergage.sendEvent({ action: "B2B-Print Cart" });
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        //re-intializing the sitemap
                        Evergage.reinit();
                    }, 1500);
                })
            ]
        },
        {
            name: "B2B Dashboard",
            action: "B2B-View Dashboard",
            isMatch: () => {
                if (dataLayerPageObject === 'Dashboard') {
                    return true;
                }
                return false;
            }
        },
        {
            name: "B2B Logon",
            action: "B2B-View Logon Form",
            isMatch: () => {
                if (window.location.href.indexOf('/LogonForm') > -1 || dataLayerPageObject === 'Login') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Login - click of the 'Sign In' button
                Evergage.listener("click", "form#Logon > div#WC_AccountDisplay_div_7 > div#WC_AccountDisplay_div_12 > #WC_AccountDisplay_links_2", () => {
                    var hashEmail;
                    const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                break;
                            }
                        }
                        if (hashEmail) { return hashEmail; }
                        else { return false; }
                    }, null, 1500);
                    getHashedEmail.then((value) => {
                        var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                        var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                        if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                            Evergage.sendEvent({
                                action: "B2B-Logon",
                                user: { attributes: { emailAddress: emailOrUsername, hashedEmail: value } }
                            });
                        } else if (emailOrUsername && password) {
                            Evergage.sendEvent({
                                action: "B2B-Logon",
                                user: { attributes: { username: emailOrUsername, hashedEmail: value } }
                            });
                        }
                    });
                }),
                //Listener to capture login - hitting Enter
                Evergage.listener("keypress", "body", (event) => {
                    if (event.key === "Enter") {
                        var hashEmail;
                        const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = 0; i < window.dataLayer.length; i++) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                    hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                    break;
                                }
                            }
                            if (hashEmail) { return hashEmail; }
                            else { return false; }
                        }, null, 1500);
                        getHashedEmail.then((hashedEmail) => {
                            var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                            var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                            if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                                Evergage.sendEvent({
                                    action: "B2B-Logon",
                                    user: { attributes: { emailAddress: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            } else if (emailOrUsername && password) {
                                Evergage.sendEvent({
                                    action: "B2B-Logon",
                                    user: { attributes: { username: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            }
                        });
                    }
                })
            ]
        },
        {
            name: "B2B Self Help",
            action: "B2B-View Self Help",
            isMatch: () => {
                if (window.location.href.indexOf('/help-faq') > -1) {
                    return true;
                }
                return false;
            }
        },
        {
            name: "B2B Quick Order",
            action: "B2B-View Quick Order",
            isMatch: () => {
                if (window.location.href.indexOf('/QuickOrderView') > -1) {
                    return true;
                }
                return false;
            },
            listeners: [
                //Add to Cart - Quick Order(button below the form)
                Evergage.listener("click", "a#WC_QuickOrderForm_link_1", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveQuickOrderAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails.ecommerce && eventDetails.ecommerce.add && eventDetails.ecommerce.add.products && eventDetails.ecommerce.add.products.length > 0) {
                            const productsAddedToCart = eventDetails.ecommerce.add.products[0];
                            const lineItems = [];
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    lineItems.push(lineItem);
                                }
                            });
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart(Quick Order)",
                                itemAction: Evergage.ItemAction.ViewCart,
                                cart: {
                                    complete: {
                                        Product: lineItems
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Cart - Quick Order(button above the form)
                Evergage.listener("click", "a#WC_QuickOrderForm_link_3", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveQuickOrderAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails.ecommerce && eventDetails.ecommerce.add && eventDetails.ecommerce.add.products && eventDetails.ecommerce.add.products.length > 0) {
                            const productsAddedToCart = eventDetails.ecommerce.add.products[0];
                            const lineItems =[];
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    lineItems.push(lineItem);
                                    
                                }
                            });
                            Evergage.sendEvent({
                                action: "B2B-Add to Cart(Quick Order)",
                                itemAction: Evergage.ItemAction.ViewCart,
                                cart: {
                                    complete: {
                                        Product: lineItems
                                    }
                                }
                            });
                        }
                    }, 1000);
                })

            ]
        },
        {
            name: "B2B Register for Account",
            action: "B2B-View Register Page",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf('https://select.schoolspecialty.com/UserRegistrationForm') > -1 || url.indexOf("https://select.schoolspecialty.com/UserRegistrationAdd") > -1) {
                    return true;
                }
                return false;
            },
            listeners: [
                //Register by clicking the button
                Evergage.listener("click", ".verify_address_submit", () => {
                    var username = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_logonId_In_Register_1_1").val();
                    var fname = Evergage.cashDom("#WC_UserRegistrationAddForm_NameEntryForm_FormInput_firstName_1").val();
                    var lname = Evergage.cashDom("#WC_UserRegistrationAddForm_NameEntryForm_FormInput_lastName_1").val();
                    var email = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_email1_In_Register_1").val();
                    var password = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_logonPassword_In_Register_1").val();
                    //send register event to IS
                    if (emailRegex.test(email) && fname && lname && username && password) {
                        const hash = sha256(email);
                        hash.then((value) => {
                            Evergage.sendEvent({
                                action: "B2B-Registered for Account",
                                user: {
                                    attributes: {
                                        hashedEmail: value,
                                        emailAddress: email,
                                        firstName: fname,
                                        lastName: lname,
                                        userName: username
                                    }
                                }
                            });
                        })
                    }
                })
            ]
        }
    );

    //B2B global config
    B2BConfig.global = {
        listeners: [
            //Forgot Username
            Evergage.listener("click", "form#ForgotUsernameForm > div> #WC_ForgotUsernameForm_Link_2 ", () => {
                var email = Evergage.cashDom('#WC_ForgotUsernameForm_FormInput_email_In_ForgotUsernameForm_1').val();
                const hash = sha256(email);
                if (emailRegex.test(email)) {
                    hash.then((value) => {
                        Evergage.sendEvent(
                            {
                                action: "B2B-Forgot Username",
                                user: {
                                    attributes: {
                                        emailAddress: Evergage.cashDom('#WC_ForgotUsernameForm_FormInput_email_In_ForgotUsernameForm_1').val(),
                                        hashEmail: value
                                    }
                                }
                            }
                        );
                    })
                }
            }),
            //Forgot Password
            Evergage.listener("click", "form#ResetPasswordForm > div> #WC_PasswordResetForm_Link_2", () => {
                Evergage.sendEvent(
                    {
                        action: "B2B-Forgot Password",
                        user: {
                            attributes: {
                                userName: Evergage.cashDom('#WC_PasswordResetForm_FormInput_logonId_In_ResetPasswordForm_1_1').val()
                            }
                        }
                    }
                );
            }),
            //Self Help/KB
            Evergage.listener("click", "a[href='/help-faq']", () => {
                Evergage.sendEvent({ action: "B2B-Self Help/KB" });
            }),
            //Email Signup footer - 1 step
            Evergage.listener("click", ".quick-email-submit", () => {
                var email = Evergage.cashDom(".quick-email-input").val();
                if (emailRegex.test(email)) {
                    const hash = sha256(email);
                    hash.then((value) => {
                        Evergage.sendEvent({
                            action: "B2B-Submitted Email Signup Footer",
                            user: { 
                                attributes: { emailAddress: email, hashedEmail: value }
                            }
                        });
                    })
                }
            }),
            //capture Internal Web Campaigns on User
            Evergage.listener("click", "body", () => {
                const subscriberId = Evergage.util.getParameterByName('sfmc_id').trim();
                if (subscriberId) {
                    Evergage.sendEvent({ user: { attributes: { sfmcSubscriberId: subscriberId } } });
                }
                if (dataLayerPageObject != 'cart' && dataLayerPageObject != 'Carts') {
                    if (doNotFireWebCampaignEventButton === false) {
                        doNotFireWebCampaignEventButton = true;
                        const getWebCampaign = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = 0; i < window.dataLayer.length; i++) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "campaignPushed") {
                                    return window.dataLayer[i];
                                }
                            }
                            return false;
                        }, null, 1000);
                        getWebCampaign.then((event) => {
                            var webSourceDL, webMediumDL, webCampaignDL, webContentDL;
                            webSourceDL = event.webSource;
                            webCampaignDL = event.webCampaign;
                            webContentDL = event.webContent;
                            webMediumDL = event.webMedium;
                            if (webSourceDL && webCampaignDL && webMediumDL && webContentDL) {
                                Evergage.sendEvent({
                                    action: "B2B-Internal Campaign",
                                    user:
                                    {
                                        attributes:
                                        {
                                            webSource: webSourceDL,
                                            webCampaign: webCampaignDL,
                                            webMedium: webMediumDL,
                                            webContent: webContentDL
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
            })
        ]
    };

    //B2C Page Types
    B2CConfig.pageTypes.push(
        {
            name: "B2C Home",
            action: "B2C-View Home",
            isMatch: () => {
                if (dataLayerPageObject === 'home') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Init sitemap on click of "Select Options"
                Evergage.listener("click", "div.product_details.product_buttons> .product_option", () => {
                    setTimeout(function(){
                        Evergage.initSitemap(B2CConfig);
                    }, 1000);
                }),
                //Add to Cart- Select Options (Quick View)
                Evergage.listener("click", "div.purchase_section.shopperActions>div> a#WC_QuickInfo_Link_addtocart", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2c_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    Evergage.sendEvent({
                                        action: "B2C-Add to Cart(Quick View)",
                                        itemAction: Evergage.ItemAction.AddToCart,
                                        cart: {
                                            singleLine: {
                                                Product: lineItem
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Cart 
                Evergage.listener("click", "div.product_details.item_buttons> .product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2c_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2C-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wish List
                Evergage.listener("click", "div.product_details.item_buttons > div.shopperActions > div>  a> div.shoppping_list_content", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2C-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                }),
                //Add to Wish List - Quick View
                Evergage.listener("click", "div.purchase_section.shopperActions > div > div.shopperActions > div#QuickInfo_addToShoppingListBtn>  a#QuickInfo_addToShoppingList > div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2C-Add to Wish List(Quick View)',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2C Lesson Plans",
            action: "B2C-View Lesson Plan",
            isMatch: () => {
                if (dataLayerPageObject === 'product' && window.location.href.indexOf('lesson-plans') > -1) {
                    return true;
                }
                return false;
            },
            catalog: {
                Article: {
                    _id: () => {
                        var lessonPlanName = Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                        if (lessonPlanName.indexOf("-lp-") > -1) {
                            return "b2c_" + lessonPlanName.split("-lp-")[0];
                        }
                        return "b2c_" + Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                    },
                    name: () => {
                        var lessonPlanName = Evergage.util.getLastPathComponentWithoutExtension(window.location.href);
                        var regex = new RegExp('-', 'g');
                        if (lessonPlanName.indexOf("-lp-") > -1) {
                            return lessonPlanName.split("-lp-")[0].replace(regex, ' ');
                        }
                        return Evergage.util.getLastPathComponentWithoutExtension(window.location.href).replace(regex, ' ');
                    }
                }
            }
        },
        {
            name: "B2C Product",
            //itemAction: Evergage.ItemAction.ViewItem,
            action: 'B2C-View Item',
            isMatch: () => {
                if (dataLayerPageObject === 'product' && window.location.href.indexOf('lesson-plans') === -1 && window.location.href.indexOf('/ideas-resources/activities') === -1) {
                    return true;
                }
                return false;
            },
            catalog: {
                Product: {
                    _id: () => {
                        if (dataLayerProductObject && dataLayerProductObject.length === 1) {
                            return "b2c_" + dataLayerProductObject[0].id.trim();
                        }
                        return "";
                    },
                    name: () => {
                        if (dataLayerProductObject && dataLayerProductObject.length === 1 && dataLayerProductObject[0]["name"]) {
                            return dataLayerProductObject[0].name.trim();
                        }
                        return '';
                    },
                    url: Evergage.util.removeQueryString(window.location.href),
                    categories: () => {
                        var urlPath = getURLPathValue('category');
                        if (urlPath.indexOf('|SHOP-BY-LEARNING-MODEL') > -1 || urlPath.indexOf('|SHOP-BY-LEARNING-ENVIRONMENT') > -1 || urlPath.indexOf('|FEATURED-ASSORTMENTS') > -1 || urlPath.indexOf('|IDEAS-RESOURCES') > -1 || urlPath.indexOf('SPECIALTY-SHOPS') > -1) {
                            if (urlPath.indexOf('IDEAS-RESOURCES') > -1) {
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace('IDEAS-RESOURCES', 'IDEAS & RESOURCES');
                                urlPath = urlPath.replace(regex, ' ');
                                return [urlPath.toUpperCase()];
                            } else {
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace(regex, ' ');
                                return [urlPath.toUpperCase()];
                            }
                        } else {
                            return Evergage.DisplayUtils.pageElementLoaded("#widget_breadcrumb li ", "html").then((ele) => {
                                return Evergage.resolvers.buildCategoryId("#widget_breadcrumb li a", 0, false, (categoryId) => [categoryId.toUpperCase()]);
                            });
                        }
                    },
                    relatedCatalogObjects: {
                        Brand: () => {
                            var brands = [];
                            if (dataLayerProductObject && dataLayerProductObject.length === 1) {
                                brands.push(dataLayerProductObject[0].brand.toString().trim());
                                return brands;
                            }
                            return "";
                        }
                    }
                }
            },
            listeners: [
                //Add to Cart
                Evergage.listener("click", " div.shopperActions > #add2CartBtn", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails["ecommerce"]["add"] && eventDetails["ecommerce"]["add"]["products"] && eventDetails["ecommerce"]["add"]["products"].length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2c_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2C-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Cart (switch& save, you may also like)
                Evergage.listener("click", "div.product > div > div.product_info > div.product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails["ecommerce"]["add"] && eventDetails["ecommerce"]["add"]["products"] && eventDetails["ecommerce"]["add"]["products"].length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2c_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2C-Add to Cart(Switch & Save)",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wishlist
                Evergage.listener("click", "div.shopperActions > div.shopperActions > div>  a> div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2C-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2C Category",
            //itemAction: Evergage.ItemAction.ViewCategory,
            action: "B2C-View Category",
            isMatch: () => {
                if (dataLayerPageObject === 'category') {
                    return true;
                }
                return false;
            },
            catalog:
            {
                Category:
                {
                    _id: () => {
                        var urlPath = getURLPathValue('category');
                        
                        if (urlPath.indexOf('SHOP-BY-LEARNING-MODEL') > -1 || urlPath.indexOf('SHOP-BY-LEARNING-ENVIRONMENT') > -1 || urlPath.indexOf('FEATURED-ASSORTMENTS') > -1 || 
                            urlPath.indexOf('IDEAS-RESOURCES') > -1 || urlPath.indexOf('SPECIALTY-SHOPS') > -1 || urlPath.indexOf('A-PLUS-DEALS') > -1 || window.location.pathname === '/shop-our-products') {
                            
                            if (urlPath.indexOf('IDEAS-RESOURCES') > -1){
                                var regex = new RegExp('-', 'g');
                                urlPath = urlPath.replace('IDEAS-RESOURCES', 'IDEAS & RESOURCES');
                                return urlPath.replace(regex, ' ');
                            }
                            else{
                                var regex = new RegExp('-', 'g');
                                return urlPath.replace(regex, ' ');
                            }
                        } else {
                            //var regex2 = new RegExp('\\', 'g');
                            return Evergage.DisplayUtils.pageElementLoaded("#widget_breadcrumb li ", "html").then((ele) => {
                                return Evergage.resolvers.buildCategoryId("#widget_breadcrumb li", 0, false, (categoryId) => categoryId.replace(/\\/g, '').toUpperCase());
                            });
                        }
                    }
                }
            },
            listeners: [
                //Add to Cart
                Evergage.listener("click", "div.product_details.item_buttons> .product_option", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails["ecommerce"]["add"]["products"];
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            const lineItem = {};
                            lineItem.id = 'b2c_' + eventDetails["ecommerce"]["add"]["products"][0].id;
                            lineItem.quantity = parseInt(eventDetails["ecommerce"]["add"]["products"][0].quantity);
                            lineItem.type = 'Product';
                            lineItem.price = parseFloat(eventDetails["ecommerce"]["add"]["products"][0].price);
                            lineItem.currency = 'USD';
                            Evergage.sendEvent({
                                action: "B2C-Add to Cart",
                                itemAction: Evergage.ItemAction.AddToCart,
                                cart: {
                                    singleLine: {
                                        Product: lineItem
                                    }
                                }
                            });
                        }
                    }, 1000);
                }),
                //Init sitemap on click of "Select Options"
                Evergage.listener("click", "div.product_details.product_buttons> .product_option", () => {
                    setTimeout(function(){
                        Evergage.initSitemap(B2CConfig);
                    }, 1000);
                }),
                //Add to Cart- Select Options (Quick View)
                Evergage.listener("click", "div.purchase_section.shopperActions>div> a#WC_QuickInfo_Link_addtocart", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToCartEventtDetailsDatalayerObject();
                        const productsAddedToCart = eventDetails.ecommerce.add.products;
                        if (productsAddedToCart && productsAddedToCart.length > 0) {
                            $.each(productsAddedToCart, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2c_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = parseInt(value.quantity);
                                    lineItem.currency = 'USD';
                                    lineItem.price = parseFloat(value.price);
                                    Evergage.sendEvent({
                                        action: "B2C-Add to Cart(Quick View)",
                                        itemAction: Evergage.ItemAction.AddToCart,
                                        cart: {
                                            singleLine: {
                                                Product: lineItem
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    }, 1000);
                }),
                //Add to Wish List
                Evergage.listener("click", "div.product_details.item_buttons > div.shopperActions > div>  a> div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2C-Add to Wish List',
                                });
                            }
                        }
                    }, 800);
                }),
                //Add to Wish List - Quick View
                Evergage.listener("click", "div.purchase_section.shopperActions > div > div.shopperActions > div#QuickInfo_addToShoppingListBtn>  a#QuickInfo_addToShoppingList > div.shoppping_list_content  ", () => {
                    var eventDetails;
                    setTimeout(function () {
                        eventDetails = retrieveAddToWishListEventtDetailsDatalayerObject();
                        if (eventDetails != '' && eventDetails.ecommerce) {
                            const productAddedToWishListId = eventDetails["ecommerce"]["content_id"];
                            if (productAddedToWishListId) {
                                Evergage.sendEvent({
                                    action: 'B2C-Add to Wish List(Quick View)',
                                });
                            }
                        }
                    }, 800);
                })
            ]
        },
        {
            name: "B2C Search",
            action: 'B2C-Search View Results',
            isMatch: () => {
                if (dataLayerPageObject === 'searchresults') {
                    return true;
                }
                return false;
            },
            onActionEvent: (actionEvent) => {
                const searchTerm = Evergage.util.getParameterByName('searchTerm').trim();
                if (searchTerm) {
                    actionEvent.user = actionEvent.user || {};
                    actionEvent.user.attributes = actionEvent.user.attributes || {};
                    actionEvent.user.attributes.lastSearchTerm = searchTerm;
                };
                return actionEvent;
            }
        },
        {
            name: "B2C Cart",
            action: 'B2C-View Cart',
            isMatch: () => {
                if (dataLayerPageObject === 'cart') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Remove from cart Event
                Evergage.listener("click", ".remove_address_link", () => {
                    setTimeout(function () {
                        eventDetails = retrieveRemoveFromCartEventtDetailsDatalayerObject();
                        const productsRemovedFromCart = eventDetails["ecommerce"]["remove"]["products"];
                        if (productsRemovedFromCart && productsRemovedFromCart.length > 0) {
                            const lineItems = [];
                            const lineItem2 = {};
                            lineItem2.id = 'b2c_' + eventDetails["ecommerce"]["remove"]["products"][0].id;
                            lineItem2.type = 'Product';
                            lineItem2.currency = 'USD';
                            lineItem2.quantity = 0;
                            lineItem2.price = parseFloat(eventDetails["ecommerce"]["remove"]["products"][0].price);
                            Evergage.sendEvent({
                                action: "B2C-Remove From Cart(Update Line Item Quantity)",
                                itemAction: Evergage.ItemAction.UpdateLineItem,
                                cart: {
                                    singleLine: {
                                        Product: lineItem2
                                    }
                                }
                            });
                        }
                    }, 1000);
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 3000);//TBD
                }),
                //Guest Checkout - click of button
                Evergage.listener("click", "div#unregistered_form > div> div#WC_UnregisteredCheckout_div_16 > a#WC_UnregisteredCheckout_links_4", () => {
                    setTimeout(function () {
                        //get the data submitted in the form
                        var fname = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_firstName_div_7> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_firstName_1").val();
                        var lname = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_lastName_div_10> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_lastName_1").val();
                        var email = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_email1_div_29> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_email1_1").val();
                        var streetAddress = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_address1_div_13> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_address1_1").val();
                        var formCity = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_city_div_16> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_city_1").val();
                        var formState = Evergage.cashDom("input[name='state']")[0].value;
                        var formCountry = Evergage.cashDom("input[name='country']")[0].value;
                        var formPhoneNo = Evergage.cashDom("input#WC_UserRegistrationAddForm_FormInput_billingAddressCreateEditFormDiv_1_AreaCode").val() + Evergage.cashDom("input#WC_UserRegistrationAddForm_FormInput_billingAddressCreateEditFormDiv_1_PhoneNo").val();
                        var postalCode = Evergage.cashDom("input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_zipCode_1").val();
                        var addressNickName = Evergage.cashDom("input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_nickName").val();

                        if (emailRegex.test(email) && fname && lname && streetAddress && formCity && formState && formCountry && postalCode && formPhoneNo && addressNickName) {
                            const hash = sha256(email);
                            //Send Guest Checkout Event
                            hash.then((value) => {
                                Evergage.sendEvent({
                                    action: "B2C-Guest Checkout (Continue to Payment)",
                                    user: {
                                        attributes: {
                                            hashedEmail:value,
                                            firstName: fname,
                                            lastName: lname,
                                            emailAddress: email,
                                            city: formCity,
                                            state: formState,
                                            country: formCountry,
                                            phoneNo: formPhoneNo,
                                            zipCode: postalCode
                                        }
                                    }
                                });
                            })
                        }
                    }, 500);
                }),
                //Guest checkout - hitting enter
                Evergage.listener("keypress", "body", (event) => {
                    if (event.key === "Enter") {
                        setTimeout(function () {
                            //get the data submitted in the form
                            var fname = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_firstName_div_7> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_firstName_1").val();
                            var lname = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_lastName_div_10> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_lastName_1").val();
                            var email = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_email1_div_29> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_email1_1").val();
                            var streetAddress = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_address1_div_13> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_address1_1").val();
                            var formCity = Evergage.cashDom("div#unregistered_form > div#billingCreateEditArea1> form#billingAddressCreateEditFormDiv_1 > div> div#WC_billingAddressCreateEditFormDiv_1_city_div_16> input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_city_1").val();
                            var formState = Evergage.cashDom("input[name='state']")[0].value;
                            var formCountry = Evergage.cashDom("input[name='country']")[0].value;
                            var formPhoneNo = Evergage.cashDom("input#WC_UserRegistrationAddForm_FormInput_billingAddressCreateEditFormDiv_1_AreaCode").val() + Evergage.cashDom("input#WC_UserRegistrationAddForm_FormInput_billingAddressCreateEditFormDiv_1_PhoneNo").val();
                            var postalCode = Evergage.cashDom("input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_zipCode_1").val();
                            var addressNickName = Evergage.cashDom("input#WC__ShoppingCartAddressEntryForm_billingAddressCreateEditFormDiv_1_nickName").val();


                            if (emailRegex.test(email) && fname && lname && streetAddress && formCity && formState && formCountry && postalCode && formPhoneNo && addressNickName) {
                                const hash = sha256(email);
                                //Send Guest Checkout Event
                                hash.then((value) => {
                                    Evergage.sendEvent({
                                        action: "B2C-Guest Checkout(Continue to Payment)",
                                        user: {
                                            attributes: {
                                                hashedEmail:value,
                                                firstName: fname,
                                                lastName: lname,
                                                emailAddress: email,
                                                city: formCity,
                                                state: formState,
                                                country: formCountry,
                                                phoneNo: formPhoneNo,
                                                zipCode: postalCode
                                            }
                                        }
                                    });
                                })
                            }
                        }, 500);
                    }
                }),
                //Switch & Save
                Evergage.listener("click", "div.save-now-item-row > div.actions > a", () => {
                    Evergage.sendEvent({
                        action: 'B2C-Switch and Save',
                    });
                }),
                Evergage.listener("click", ".select-backup-txt", () => {
                    var backupItemList = '';
                    setTimeout(function () {
                        backupItemList = Evergage.cashDom('div#backupItemModalContent.modal-open > div.modal-dialog> div.modal-content > div.item-list > div.backup-item.row > div.backupItemRadio > input');
                    }, 800);
                    Evergage.sendEvent({ action: "B2C-Select Backup" });
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 1500);
                }),
                //Change Backup Item
                Evergage.listener("click", ".change-backup-txt", () => {
                    Evergage.sendEvent({ action: "B2C-Change Backup Item" });
                    // setTimeout(function () {
                    //     //re-intializing the sitemap
                    //     console.log('Re-init sitemap');
                    //     Evergage.reinit();
                    // }, 1500);//TBD
                }),
                //Place Order
                Evergage.listener("click", "div.place-order-btn > a#singleOrderSummary > div", () => {
                    setTimeout(function () {
                        eventDetails = retrieveSubmitCartDetailsDatalayerObject();
                        if (eventDetails["ecommerce"] && eventDetails["ecommerce"]["checkout"] && eventDetails["ecommerce"]["checkout"]["products"] && eventDetails["ecommerce"]["checkout"]["products"].length > 0) {
                            const productsCheckedOut = eventDetails["ecommerce"]["checkout"]["products"];
                            const lineItemArray = [];
                            $.each(productsCheckedOut, function (key, value) {
                                if (value) {
                                    const lineItem = {};
                                    lineItem.id = 'b2b_' + value.id;
                                    lineItem.type = 'Product';
                                    lineItem.quantity = value.quantity;
                                    lineItem.currency = 'USD';
                                    lineItemArray.push(lineItem);
                                }
                            });
                            Evergage.sendEvent({
                                action: 'B2C-Placed Order',
                                catalog: {
                                    Product: {
                                        lineItems: lineItemArray
                                    }
                                }
                            });
                        }
                    }, 800);
                    //re-init sitemap
                    setTimeout(function () {
                        //re-intializing the sitemap
                        Evergage.reinit();
                    }, 1500);
                }),
                //Print Cart
                Evergage.listener("click", "div#orderPrintModal > div > div > div > div#actions-button > a.actions-button.button_primary", () => {
                    var printCartEvent = '';
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "printCart") {
                                printCartEvent = window.dataLayer[i].event;
                                break;
                            }
                        }
                        if (printCartEvent) { return printCartEvent; }
                        else { return false; }
                    }, null, 800);
                    printCart.then(() => {
                        Evergage.sendEvent({ action: "B2C-Print Cart" });
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 2000);
                }),
                //Switch Cart
                Evergage.listener("click", "body", () => {
                    if (doNotFireEvent === false) {
                        doNotFireEvent = true;
                        //get switch cart details - if cart is switched
                        if (window.dataLayer) {
                            var lineItems;
                            const switchCartEvent = Evergage.util.resolveWhenTrue.bind(() => {
                                for (let i = 0; i < window.dataLayer.length; i++) {
                                    if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].ecommerce.checkout.actionField.option") === "switchCart" || Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].ecommerce.checkout.actionField.step") === "1") {
                                        lineItems = window.dataLayer[i].ecommerce.checkout.products;
                                        break;
                                    }
                                }
                                if (lineItems) { return lineItems; }
                                else { return false; }
                            }, null, 1500);
                            switchCartEvent.then((switchCartProducts) => {
                                if (switchCartProducts.length > 0) {
                                    setTimeout(function () {
                                        //adding the switched cart items to cart
                                        const lineItems=[];
                                        $.each(switchCartProducts, function (key, value) {
                                            if (value) {
                                                const lineItem = {};
                                                lineItem.id = 'b2c_' + value.id;
                                                lineItem.type = 'Product';
                                                lineItem.quantity = parseInt(value.quantity);
                                                lineItem.currency = 'USD';
                                                lineItem.price = parseFloat(value.price);
                                                lineItems.push(lineItem);
                                            }
                                        });
                                        //Sending View Cart, will overwrite all Cart Items
                                        Evergage.sendEvent({
                                            action: "B2C-View Cart Detail",
                                            itemAction: Evergage.ItemAction.ViewCart,
                                            cart: {
                                                complete: {
                                                    Product: lineItems
                                                }
                                            }
                                        });
                                    }, 1500);
                                }
                            });
                            //re-initing the sitemap does not reset the value of doNotFireEvent
                            setTimeout(function() {
                                Evergage.reinit();
                            }, 3000);
                        }
                    }
                })
            ]
        },
        {
            name: "B2C Logon",
            action: "B2C-View Logon Form",
            isMatch: () => {
                if (window.location.href.indexOf('/LogonForm') > -1 || dataLayerPageObject === 'Login') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Login - click of 'Sign In' Button
                Evergage.listener("click", "form#Logon > div#WC_AccountDisplay_div_7 > div#WC_AccountDisplay_div_12 > #WC_AccountDisplay_links_2", () => {
                    var hashEmail;
                    const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                break;
                            }
                        }
                        if (hashEmail) { return hashEmail; }
                        else { return false; }
                    }, null, 1500);
                    getHashedEmail.then((value) => {
                        var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                        var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                        if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                            Evergage.sendEvent({
                                action: "B2C-Logon",
                                user: { attributes: { emailAddress: emailOrUsername, hashedEmail: value } }
                            });
                        } else if (emailOrUsername && password) {
                            Evergage.sendEvent({
                                action: "B2C-Logon",
                                user: { attributes: { userName: emailOrUsername, hashedEmail: value } }
                            });
                        }
                    });
                }),
                //Listener to capture login - hitting Enter
                Evergage.listener("keypress", "body", (event) => {
                    if (event.key === "Enter") {
                        var hashEmail;
                        const getHashedEmail = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = 0; i < window.dataLayer.length; i++) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256")) {
                                    hashEmail = Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].email_sha256");
                                    break;
                                }
                            }
                            if (hashEmail) { return hashEmail; }
                            else { return false; }
                        }, null, 1500);
                        getHashedEmail.then((hashedEmail) => {
                            var emailOrUsername = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonId_In_Logon_1").val();
                            var password = Evergage.cashDom("#WC_AccountDisplay_FormInput_logonPassword_In_Logon_1").val();
                            if (emailOrUsername && emailRegex.test(emailOrUsername) && password) {
                                Evergage.sendEvent({
                                    action: "B2C-Logon",
                                    user: { attributes: { emailAddress: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            } else if (emailOrUsername && password) {
                                Evergage.sendEvent({
                                    action: "B2C-Logon",
                                    user: { attributes: { username: emailOrUsername, hashedEmail: hashedEmail } }
                                });
                            }
                        });
                    }
                }),
            ]
        },
        {
            name: "B2C Register for Account",
            action: "B2C-View Register Page",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf("www.schoolspecialty.com/UserRegistrationForm") > -1 || url.indexOf("www.schoolspecialty.com/UserRegistrationAdd") > -1 || dataLayerPageObject === 'Registration Form') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Register - click of the button
                Evergage.listener("click", ".verify_address_submit", () => {
                    var username = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_logonId_In_Register_1_1").val();
                    var fname = Evergage.cashDom("#WC_UserRegistrationAddForm_NameEntryForm_FormInput_firstName_1").val();
                    var lname = Evergage.cashDom("#WC_UserRegistrationAddForm_NameEntryForm_FormInput_lastName_1").val();
                    var email = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_email1_In_Register_1").val();
                    var password = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_logonPassword_In_Register_1").val();
                    var streetAddress = Evergage.cashDom("#WC_UserRegistrationAddForm_AddressEntryForm_FormInput_address1_1").val();
                    var formCity = Evergage.cashDom("#WC_UserRegistrationAddForm_AddressEntryForm_FormInput_city_1").val();
                    var formCountry = Evergage.cashDom("#WC_UserRegistrationAddForm_AddressEntryForm_FormInput_country_1").val();
                    var formState = Evergage.cashDom("#WC_UserRegistrationAddForm_AddressEntryForm_FormInput_state_1").val();
                    var postalCode = Evergage.cashDom("#WC_UserRegistrationAddForm_AddressEntryForm_FormInput_zipCode_1").val();
                    var formPhoneNo = Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_AreaCode").val() + Evergage.cashDom("#WC_UserRegistrationAddForm_FormInput_PhoneNo").val();
                    //send register event to IS
                    if (emailRegex.test(email) && fname && lname && username && password && streetAddress && formCity && formState && formCountry && postalCode && formPhoneNo) {
                        const hash = sha256(email);
                        hash.then((value) => {
                            Evergage.sendEvent({
                                action: "B2C-Registered for Account",
                                user: {
                                    attributes: {
                                        hashedEmail: value,
                                        emailAddress: email,
                                        firstName: fname,
                                        lastName: lname,
                                        userName: username,
                                        city: formCity,
                                        state: formState,
                                        country: formCountry,
                                        zipCode: postalCode,
                                        phoneNo: formPhoneNo
                                    }
                                }
                            });
                        })
                    }
                })
            ]
        },
        {
            name: "B2C Self Help",
            action: "B2C-View Self Help",
            isMatch: () => {
                if (window.location.href.indexOf('/help-faq') > -1) {
                    return true;
                }
                return false;
            }
        },
        {
            name: "B2C Purchase-Order Confirmation",
            action: "B2C-Purchase-Order Confirmation",
            isMatch: () => {
                if (dataLayerPageObject === 'purchase') {
                    return true;
                }
                return false;
            },
            listeners: [
                //Print Cart
                Evergage.listener("click", "div#orderPrintModal > div > div > div > div#actions-button > a.actions-button.button_primary", () => {
                    var printCartEvent = '';
                    const printCart = Evergage.util.resolveWhenTrue.bind(() => {
                        for (let i = 0; i < window.dataLayer.length; i++) {
                            if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "printCart") {
                                printCartEvent = window.dataLayer[i].event;
                                break;
                            }
                        }
                        if (printCartEvent) { return printCartEvent; }
                        else { return false; }
                    }, null, 800);
                    printCart.then(() => {
                        Evergage.sendEvent({ action: "B2C-Print Cart" });
                    });
                    //re-init sitemap
                    setTimeout(function () {
                        Evergage.reinit();
                    }, 1500);
                }),
            ]
        }

    );
    //B2C global config
    B2CConfig.global = {
        listeners: [
            //Forgot Username
            Evergage.listener("click", "form#ForgotUsernameForm > div> #WC_ForgotUsernameForm_Link_2 ", () => {
                var email = Evergage.cashDom('#WC_ForgotUsernameForm_FormInput_email_In_ForgotUsernameForm_1').val();
                if (emailRegex.test(email)) {
                    const hash = sha256(email);
                    hash.then((value) => {
                        Evergage.sendEvent(
                            {
                                action: "B2C-Forgot Username",
                                user: {
                                    attributes: {
                                        hashedEmail:value,
                                        emailAddress: email
                                    }
                                }
                            }
                        );
                    })
                }
            }),
            //Forgot Password
            Evergage.listener("click", "form#ResetPasswordForm > div> #WC_PasswordResetForm_Link_2", () => {
                Evergage.sendEvent(
                    {
                        action: "B2C-Forgot Password",
                        user: {
                            attributes: {
                                userName: Evergage.cashDom('#WC_PasswordResetForm_FormInput_logonId_In_ResetPasswordForm_1_1').val() //should we keep this or not?
                            }
                        }
                    }
                );
            }),
            //Self Help/KB
            Evergage.listener("click", "a[href='/help-faq']", () => {
                Evergage.sendEvent({ action: "B2C-Self Help/KB" });
            }),
            //Email Signup footer - 1 step - click of button
            Evergage.listener("click", ".quick-email-submit", () => {
                var email = Evergage.cashDom(".quick-email-input").val();
                if (emailRegex.test(email)) {
                    const hash = sha256(email);
                    hash.then((value) => {
                        Evergage.sendEvent({
                            action: "B2C-Submitted Email Signup Footer",
                            user: {
                                attributes: { emailAddress: email, hashedEmail: value }
                            }
                        });
                    })
                }
            }),
            //Email Signup footer - 1 step - hitting enter
            Evergage.listener("keypress", "body", (event) => {
                if (event.key === "Enter") {
                    var email = Evergage.cashDom(".quick-email-input").val();
                    if (emailRegex.test(email)) {
                        const hash = sha256(email);
                        hash.then((value) => {
                            Evergage.sendEvent({
                                action: "B2C-Submitted Email Signup Footer",
                                user: {
                                    attributes: { hashedEmail:value, emailAddress: email }
                                }
                            });
                        })
                    }
                }
            }),
            //capture Internal Web Campaigns on User - shop now buttons
            Evergage.listener("click", "body", () => {
                const subscriberId = Evergage.util.getParameterByName('sfmc_id').trim();
                if (subscriberId) {
                    Evergage.sendEvent({ user: { attributes: { sfmcSubscriberId: subscriberId } } });
                }
                if (dataLayerPageObject != 'cart' && dataLayerPageObject != 'Carts') {
                    if (doNotFireWebCampaignEventButton === false) {
                        doNotFireWebCampaignEventButton = true;
                        var campaignEvent = '';
                        const getWebCampaign = Evergage.util.resolveWhenTrue.bind(() => {
                            for (let i = 0; i < window.dataLayer.length; i++) {
                                if (Evergage.util.getValueFromNestedObject("window.dataLayer[" + i + "].event") === "campaignPushed") {
                                    campaignEvent = window.dataLayer[i];
                                }
                            }
                            if (campaignEvent) { return campaignEvent }
                            else { return false };
                        }, null, 1000);
                        getWebCampaign.then((event) => {
                            var webSourceDL, webMediumDL, webCampaignDL, webContentDL;
                            webSourceDL = event.webSource;
                            webCampaignDL = event.webCampaign;
                            webContentDL = event.webContent;
                            webMediumDL = event.webMedium;
                            if (webSourceDL && webCampaignDL && webMediumDL && webContentDL) {
                                Evergage.sendEvent({
                                    action: "B2C-Internal Campaign",
                                    user:
                                    {
                                        attributes:
                                        {
                                            webSource: webSourceDL,
                                            webCampaign: webCampaignDL,
                                            webMedium: webMediumDL,
                                            webContent: webContentDL
                                        }
                                    }
                                });
                            }
                        });
                    }
                }
            })
        ]
    };

    blogConfig.pageTypes.push(
        {
            name: "Blog-Home",
            action: "Blog-Home",
            isMatch: () => {
                if (dataLayerPageObject === 'frontpage') {
                    return true;
                }
                return false;
            }
        },
        {
            name: "Blog-Category",
            action: "Blog-View Category",
            isMatch: () => {
                if (dataLayerPageObject === 'category-post') {
                    return true;
                }
                return false;
            }
        },
        {
            name: "Blog-Post",
            action: "Blog-View Blog Post",
            isMatch: () => {
                if (dataLayerPageObject === 'single-post') {
                    return true;
                }
                return false;
            },
            catalog: {
                Blog: {
                    _id: () => {
                        if (dataLayerBlogObject != '' && dataLayerBlogObject.post_id) {
                            return dataLayerBlogObject.post_id.trim();
                        }
                        return "";
                    },
                    name: () => {
                        if (dataLayerBlogObject != '' && dataLayerBlogObject.content_name) {
                            return dataLayerBlogObject.content_name.trim();
                        }
                        return '';
                    },
                    url: Evergage.util.removeQueryString(window.location.href),
                    relatedCatalogObjects: {
                        ArticleCategory: () => {
                            if (dataLayerBlogObject != '' && dataLayerBlogObject.categories) {
                                return dataLayerBlogObject.categories.trim().split(',');
                            }
                            return '';
                        }
                    }
                }
            }
        },
        {
            name: "Blog-Search",
            action: "Blog-Search View Results",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf('?s=') > -1) {
                    return true;
                }
                return false;
            },
            onActionEvent: (actionEvent) => {
                // var regex = new RegExp(/\s/g, 'g');
                const searchTerm = Evergage.util.getParameterByName('s').replace(/\s/g, ' ').trim();
                if (searchTerm) {
                    actionEvent.user = actionEvent.user || {};
                    actionEvent.user.attributes = actionEvent.user.attributes || {};
                    actionEvent.user.attributes.lastBlogSearchTerm = searchTerm;
                };
                return actionEvent;
            }
        },
        {
            name: "Blog-View Subscribe",
            action: "Blog-View Subscribe",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf('blog.schoolspecialty.com/subscribe/') > -1 || url.indexOf('schoolyardstg.wpengine.com/subscribe/') > -1) {
                    return true;
                }
                return false;
            }
        }
    );
    blogConfig.global = {
        onActionEvent: (actionEvent) => {
            const subscriberId = Evergage.util.getParameterByName('sfmc_id').trim();
            if (subscriberId) {
                actionEvent.user = actionEvent.user || {};
                actionEvent.user.attributes = actionEvent.user.attributes || {};
                actionEvent.user.attributes.sfmcSubscriberId = subscriberId;
            };
            return actionEvent;
        }
    };

    //page types & listeners for the Help website
    helpConfig.pageTypes.push(
        {
            name: "Help-Contact Us",
            action: "Help-View Contact Us",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf('uat-myschoolspecialty.cs63.force.com/SelfHelp/s/contact-support') > -1) {
                    return true;
                }
                return false;
            },
            listeners: [
                //click of the submit button
                Evergage.listener("click", "div.submitButtonContainer > button.caseCreationButton ", () => {
                    Evergage.sendEvent({
                        action: "Help-Submitted Contact Us Form"
                    });
                })
            ]
        }
    );
    helpConfig.global = {
        onActionEvent: (actionEvent) => {
            var regex = new RegExp('+', 'g');
            const subscriberId = Evergage.util.getParameterByName('sfmc_id').replace(/\s/g, ' ').trim();
            if (subscriberId) {
                actionEvent.user = actionEvent.user || {};
                actionEvent.user.attributes = actionEvent.user.attributes || {};
                actionEvent.user.attributes.sfmcSubscriberId = subscriberId;
            };
            return actionEvent;
        }
    };

    //page types & listeners for the Help website
    epsConfig.pageTypes.push(
        {
            name: "EPS-Request Information",
            action: "EPS-View Request Information",
            isMatch: () => {
                var url = window.location.href;
                if (url.indexOf('/about-eps/request-information') > -1) {
                    return true;
                }
                return false;
            },
            listeners: [
                //Request Information - clicking of the button
                Evergage.listener("click", "#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_btnOK", () => {
                    var individualTypeRadio = Evergage.cashDom('[name="p$lt$ctl04$pageplaceholder$p$lt$ctl04$BizForm$viewBiz$ctl00$ProspectType$list"]');
                    var individualType = '';
                    $.each(individualTypeRadio, function (key, individualTypeCurrent) {
                        if (individualTypeCurrent.checked === true) {
                            individualType = individualTypeCurrent.value;
                        }
                    });
                    var fname = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_FirstName_textbox").val();
                    var lname = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_LastName_textbox").val();
                    var position = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Title_textbox").val();
                    var email = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Email_txtEmailInput").val();
                    var formPhoneNo = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Phone_textbox").val();
                    var school = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_SchoolOrganization_textbox").val();
                    var formCity = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_City_textbox").val();
                    var formState = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_StateProvince_uxStateSelector").val();
                    var questions = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Comments_textbox").val();
                    var interestedInCoach = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_ProductInterestType_list_1").val();
                    var interestedInEPSPrograms = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_ProductInterestType_list_0").val();

                    if (emailRegex.test(email) && fname && lname && position && (interestedInCoach || interestedInEPSPrograms) && school && formCity && formState && questions && individualType) {
                        const hash = sha256(email);
                        hash.then((value) => {
                            Evergage.sendEvent({
                                action: "EPS-Request Information",
                                user: {
                                    attributes: {
                                        hashedEmail:value,
                                        emailAddress: email,
                                        firstName: fname,
                                        lastName: lname,
                                        city: formCity,
                                        state: formState,
                                        phoneNo: formPhoneNo
                                    }
                                }
                            })
                        })
                    }
                }),
                //Request Information - hitting the enter key
                Evergage.listener("keypress", "body", (event) => {
                    if (event.key === "Enter") {
                        var individualTypeRadio = Evergage.cashDom('[name="p$lt$ctl04$pageplaceholder$p$lt$ctl04$BizForm$viewBiz$ctl00$ProspectType$list"]');
                        var individualType = '';
                        $.each(individualTypeRadio, function (key, individualTypeCurrent) {
                            if (individualTypeCurrent.checked === true) {
                                individualType = individualTypeCurrent.value;
                            }
                        });
                        var fname = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_FirstName_textbox").val();
                        var lname = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_LastName_textbox").val();
                        var position = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Title_textbox").val();
                        var email = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Email_txtEmailInput").val();
                        var formPhoneNo = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Phone_textbox").val();
                        var school = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_SchoolOrganization_textbox").val();
                        var formCity = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_City_textbox").val();
                        var formState = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_StateProvince_uxStateSelector").val();
                        var questions = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_Comments_textbox").val();
                        var interestedInCoach = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_ProductInterestType_list_1").val();
                        var interestedInEPSPrograms = Evergage.cashDom("#p_lt_ctl04_pageplaceholder_p_lt_ctl04_BizForm_viewBiz_ctl00_ProductInterestType_list_0").val();
                        if (emailRegex.test(email) && fname && lname && position && (interestedInCoach || interestedInEPSPrograms) && school && formCity && formState && questions && individualType) {
                            const hash = sha256(email);
                            hash.then((value) => {
                                Evergage.sendEvent({
                                    action: "EPS-Request Information",
                                    user: {
                                        attributes: {
                                            hashedEmail: value,
                                            emailAddress: email,
                                            firstName: fname,
                                            lastName: lname,
                                            city: formCity,
                                            state: formState,
                                            phoneNo: formPhoneNo
                                        }
                                    }
                                })
                            })
                        }
                    }
                })
            ]
        }
    );

    //Initializing global variables - do ot get reset on reiniting the sitemap
    let dataLayerPageObject = '';
    let dataLayerProductObject = '';
    let dataLayerBlogObject = '';
    let urlPath = '';
    var doNotFireEvent = false;
    var doNotFireWebCampaignEventButton = false;
    var doNotFireWebCampaignEventBanner = false;
    var doNotFireApprovalOrRejectionEvent = false;

    if (currentCookieDomain === "select.schoolspecialty.com") {
        setTimeout(function () {
            dataLayerPageObject = retrievePageTypeDatalayerObject();
            dataLayerProductObject = retrieveProductDetailsDatalayerObject();
            Evergage.initSitemap(B2BConfig);
        }, 1500);
    } else if (currentCookieDomain === "www.schoolspecialty.com") {
        setTimeout(function () {
            dataLayerPageObject = retrievePageTypeDatalayerObject();
            dataLayerProductObject = retrieveProductDetailsDatalayerObject();
            Evergage.initSitemap(B2CConfig);
        }, 1600);
    } else if (currentCookieDomain === "help.schoolspecialty.com") {
        Evergage.initSitemap(helpConfig);
    } else if (currentCookieDomain === "blog.schoolspecialty.com") {
        setTimeout(function () {
            dataLayerPageObject = retrievePageTypeDatalayerObject();
            dataLayerBlogObject = retrieveBlogDetailsDatalayerObject();
            Evergage.initSitemap(blogConfig);
        }, 1500)
    } else if (currentCookieDomain === "fossnextgeneration.com") {
        Evergage.initSitemap(fossNextGenerationConfig);
    } else if (currentCookieDomain === "www.deltaeducation.com") {
        Evergage.initSitemap(deltaEducationConfig);
    } else if (currentCookieDomain === "eps.schoolspecialty.com") {
        Evergage.initSitemap(epsConfig);
    }
});
} catch (e) {
    if (typeof window.Evergage === "object" && typeof window.Evergage.getVersion === "function" && window.Evergage.getVersion() >= 5) {
          console.error("siteWideJavascriptError" + e);    }
};

